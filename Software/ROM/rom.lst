ca65 V2.14 - Git 2a3fbc6
Main file   : rom.s
Current file: rom.s

000000r 1               	.include "macro.i"
000000r 2               ; load A/X
000000r 2                .macro ldax arg
000000r 2               	.if (.match (.left (1, {arg}), #))	; immediate mode
000000r 2               	lda #<(.right (.tcount ({arg})-1, {arg}))
000000r 2               	ldx #>(.right (.tcount ({arg})-1, {arg}))
000000r 2               	.else					; assume absolute or zero page
000000r 2               	lda arg
000000r 2               	ldx 1+(arg)
000000r 2               	.endif
000000r 2                .endmacro
000000r 2               
000000r 2               ; store A/X
000000r 2                .macro stax arg
000000r 2               	sta arg
000000r 2               	stx 1+(arg)
000000r 2                .endmacro
000000r 2               
000000r 2               ; convert ascii to screencodes
000000r 2                .macro screencode str
000000r 2               	.repeat .strlen(str), I
000000r 2               		.if ((.strat(str, I) & $60) = $20)
000000r 2               			.byte .strat(str, I)
000000r 2               		.endif
000000r 2               		.if ((.strat(str, I) & $e0) = $40)
000000r 2               			.byte .strat(str, I) & $1f
000000r 2               		.endif
000000r 2               		.if ((.strat(str, I) & $e0) = $60) .or ((.strat(str, I) & $e0) = $c0)
000000r 2               			.byte .strat(str, I) & $1f | $40
000000r 2               		.endif
000000r 2               	.endrepeat
000000r 2                .endmacro
000000r 2               
000000r 2               
000000r 2               ; define chained raster IRQ handlers
000000r 2                .macro IRQ_DEFINE name, line
000000r 2               
000000r 2               	.ident(.concat(name, "_line")) = line
000000r 2               	.ident(name):
000000r 2               
000000r 2               	sta @savea
000000r 2               	stx @savex
000000r 2               	sty @savey
000000r 2               
000000r 2                .endmacro
000000r 2               
000000r 2                .macro IRQ_NEXT next
000000r 2               
000000r 2               	ldax #.ident(next)
000000r 2               	stax $fffe
000000r 2               	lda #(.ident(.concat(next, "_line")))
000000r 2               	sta $d012
000000r 2               
000000r 2               	inc $d019
000000r 2               
000000r 2               @savey = * + 1
000000r 2               	ldy #$5e
000000r 2               @savex = * + 1
000000r 2               	ldx #$5e
000000r 2               @savea = * + 1
000000r 2               	lda #$5e
000000r 2               	rti
000000r 2               
000000r 2                .endmacro
000000r 2               
000000r 2                .macro IRQ_STABILIZE
000000r 2               
000000r 2               	lda $dc04
000000r 2               	eor #7
000000r 2               	sta * + 4
000000r 2               	bpl * + 2
000000r 2               	lda #$a9
000000r 2               	lda #$a9
000000r 2               	lda $eaa5
000000r 2               
000000r 2                .endmacro
000000r 2               
000000r 2               ; debugging
000000r 2               DEBUG = 0
000000r 2               
000000r 2                .if DEBUG
000000r 2               	.macro DEBUG_DEC_D020
000000r 2               	dec $d020
000000r 2               	.endmacro
000000r 2               	.macro DEBUG_INC_D020
000000r 2               	inc $d020
000000r 2               	.endmacro
000000r 2               	.macro DEBUG_RESET_D020
000000r 2               	lda #0
000000r 2               	sta $d020
000000r 2               	.endmacro
000000r 2                .else
000000r 2               	.macro DEBUG_DEC_D020
000000r 2               	.endmacro
000000r 2               	.macro DEBUG_INC_D020
000000r 2               	.endmacro
000000r 2               	.macro DEBUG_RESET_D020
000000r 2               	.endmacro
000000r 2                .endif
000000r 2               
000000r 2               
000000r 2               ; WDC65C02S
000000r 2               
000000r 2               	.macro stp
000000r 2               	.byte $db
000000r 2               	.endmacro
000000r 2               
000000r 2               	.macro wai
000000r 2               	.byte $cb
000000r 2               	.endmacro
000000r 2               
000000r 1               
000000r 1               
000000r 1               	.import display_init
000000r 1               
000000r 1               
000000r 1               	.bss
000000r 1               
000000r 1  xx xx        vec_nmih:	.res 2
000002r 1  xx xx        vec_irqh:	.res 2
000004r 1               
000004r 1               
000004r 1               	.code
000000r 1               
000000r 1               reset:
000000r 1  78           	sei
000001r 1  D8           	cld
000002r 1  A2 FF        	ldx #$ff
000004r 1  9A           	txs
000005r 1               
000005r 1  A2 0D        	ldx #$0d
000007r 1               @reset_mmu:
000007r 1  8A           	txa
000008r 1  9D 00 E0     	sta $e000,x
00000Br 1  CA           	dex
00000Cr 1  10 F9        	bpl @reset_mmu
00000Er 1  A9 FE        	lda #$fe
000010r 1  8D 0E E0     	sta $e00e
000013r 1  A9 FF        	lda #$ff
000015r 1  8D 0F E0     	sta $e00f
000018r 1               
000018r 1  A2 00        	ldx #0
00001Ar 1  8A           	txa
00001Br 1               @clear_ram:
00001Br 1  95 00        	sta $00,x
00001Dr 1  9D 00 01     	sta $0100,x
000020r 1  E8           	inx
000021r 1  D0 F8        	bne @clear_ram
000023r 1               
000023r 1  A9 rr A2 rr  	ldax #rom_nmih
000027r 1  8D rr rr 8E  	stax vec_nmih
00002Br 1  rr rr        
00002Dr 1  A9 rr A2 rr  	ldax #rom_irqh
000031r 1  8D rr rr 8E  	stax vec_irqh
000035r 1  rr rr        
000037r 1               
000037r 1  20 rr rr     	jsr display_init
00003Ar 1               
00003Ar 1  A2 00        	ldx #0
00003Cr 1  8E 00 E3     	stx $e300
00003Fr 1               @printmsg:
00003Fr 1  BD rr rr     	lda msg_startup,x
000042r 1  F0 06        	beq :+
000044r 1  9D 00 E2     	sta $e200,x
000047r 1  E8           	inx
000048r 1  D0 F5        	bne @printmsg
00004Ar 1               :
00004Ar 1  4C rr rr     	jmp *
00004Dr 1               
00004Dr 1               
00004Dr 1               
00004Dr 1               j_nmih:
00004Dr 1  6C rr rr     	jmp (vec_nmih)
000050r 1               rom_nmih:
000050r 1  DB           	stp
000051r 1               j_irqh:
000051r 1  6C rr rr     	jmp (vec_irqh)
000054r 1               rom_irqh:
000054r 1  DB           	stp
000055r 1               
000055r 1               
000055r 1               	.rodata
000000r 1               
000000r 1               msg_startup:
000000r 1  63 30 32 65  	.asciiz "c02emu"
000004r 1  6D 75 00     
000007r 1               
000007r 1               
000007r 1               	.segment "VECTORS"
000000r 1               
000000r 1  rr rr        vec_nmi:	.addr j_nmih
000002r 1  rr rr        vec_res:	.addr reset
000004r 1  rr rr        vec_irq:	.addr j_irqh
000004r 1               
