AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6128 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2014  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 14-dec-2014
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0000 =                  load_data_direct = 0
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $50 (80) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0010 =                  zero_page = $10
                        
                        ;data_segment memory start address, $5B (91) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
                        ;parts of the code are self modifying and must reside in RAM
1000 =                  code_segment = $1000  
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0001 =                  report = 1
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
00e0 =                  ram_top = $e0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                         sta $ef04
                         db "success", 10, 0
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                sta $ef02
                                ;jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                         sta $ef04
                         db "success", 10, 0
                                db $db
                                ;jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                    sta range_adr   ;reset self modifying code
                                    sta tandi1
                                    sta tandi2
                                    sta teori1
                                    sta teori2
                                    sta torai1
                                    sta torai2
                                    sta chkdadi  
                                    sta chkdsbi
                                    sta chkadi
                                    sta chksbi
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(data_segment) ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(data_bss) ;data after write test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;sta $ef03
                                    check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0010 =                          org zero_page
                        ;break test interrupt save
0010 =                  irq_a   ds  1               ;a register
0011 =                  irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0012 =                  zpt                         ;5 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0012 =                  adfc    ds  1               ;carry flag before op
0013 =                  ad1     ds  1               ;operand 1 - accumulator
0014 =                  ad2     ds  1               ;operand 2 - memory / immediate
0015 =                  adrl    ds  1               ;expected result bits 0-7
0016 =                  adrh    ds  1               ;expected result bit 8 (carry)
0017 =                  adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0018 =                  sb2     ds  1               ;operand 2 complemented for subtract
0019 =                  zp_bss
0019 =                  zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
001d =                  zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
001e =                  zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0022 =                  zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0026 =                  zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
002a =                  ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
002c =                          dw  abs1+1
002e =                          dw  abs1+2
0030 =                          dw  abs1+3
0032 =                          dw  abs7f
0034 =                  inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0036 =                  indt    dw  abst            ;indirect pointer to store area in absolute memory
0038 =                          dw  abst+1
003a =                          dw  abst+2
003c =                          dw  abst+3
003e =                  inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0040 =                  indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0042 =                          dw  absAN+1
0044 =                          dw  absAN+2
0046 =                          dw  absAN+3
0048 =                  indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
004a =                          dw  absEO+1
004c =                          dw  absEO+2
004e =                          dw  absEO+3
0050 =                  indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0052 =                          dw  absOR+1
0054 =                          dw  absOR+2
0056 =                          dw  absOR+3
                        ;add/subtract indirect pointers
0058 =                  adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
005a =                  sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
005c =                  adiy2   dw  ada2-$ff        ;with offset for indirect indexed
005e =                  sbiy2   dw  sba2-$ff
0060 =                  zp_bss_end
                           
0200 =                          org data_segment
0200 =                  test_case   ds  1           ;current test number
0201 =                  ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 =                  abst                        ;5 bytes store/modify test area
0203 =                  ada2    ds  1               ;operand 2
0204 =                  sba2    ds  1               ;operand 2 complemented for subtract
0205 =                          ds  3               ;fill remaining bytes
0208 =                  data_bss
0208 =                  abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
020c =                  abs7f   db  $7f             ;test pattern for compare
                        ;loads
020d =                  fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0211 =                  rASL                        ;expected result ASL & ROL -carry  
0211 =                  rROL    db  $86,$04,$82,0   ; "
0215 =                  rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0219 =                  rLSR                        ;expected result LSR & ROR -carry
0219 =                  rROR    db  $61,$41,$20,0   ; "
021d =                  rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0221 =                  fASL                        ;expected flags for shifts
0221 =                  fROL    db  fnc,fc,fn,fz    ;no carry in
0225 =                  fROLc   db  fnc,fc,fn,0     ;carry in
0229 =                  fLSR
0229 =                  fROR    db  fc,0,fc,fz      ;no carry in
022d =                  fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0231 =                  rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
0236 =                  fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
023b =                  absOR   db  0,$1f,$71,$80   ;test pattern for OR
023f =                  absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0243 =                  absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0247 =                  absORa  db  0,$f1,$1f,0     ;test pattern for OR
024b =                  absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
024f =                  absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0253 =                  absrlo  db  0,$ff,$7f,$80
0257 =                  absflo  db  fz,fn,0,fn
025b =                  data_bss_end
                        
                        
                                code
1000 =                          org code_segment
1000 : a90f              lda #$0f
1002 : 850f              sta $0f
1004 : d8               start   cld
1005 : a2ff                     ldx #$ff
1007 : 9a                       txs
1008 : a900                     lda #0          ;*** test 0 = initialize
100a : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
100d : 20e467                   jsr report_init
                            endif
                            
                        ;initialize BSS segment
                            if load_data_direct != 1
1010 : a246                     ldx #zp_end-zp_init-1
1012 : bd2d69           ld_zp   lda zp_init,x
1015 : 9519                     sta zp_bss,x
1017 : ca                       dex
1018 : 10f8                     bpl ld_zp
101a : a252                     ldx #data_end-data_init-1
101c : bd7469           ld_data lda data_init,x
101f : 9d0802                   sta data_bss,x
1022 : ca                       dex
1023 : 10f7                     bpl ld_data
                              if ROM_vectors = 1
1025 : a205                     ldx #5
1027 : bdc769           ld_vect lda vec_init,x
102a : 9dfaff                   sta vec_bss,x
102d : ca                       dex
102e : 10f7                     bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
1030 : a900                     lda #0 
1032 : 8512                     sta zpt         ;set low byte of indirect pointer
1034 : 8d0202                   sta ram_chksm+1 ;checksum high byte
1037 : 8dbb11                   sta range_adr   ;reset self modifying code
103a : 8dfb57                   sta tandi1
103d : 8d2258                   sta tandi2
1040 : 8dbc5a                   sta teori1
1043 : 8de35a                   sta teori2
1046 : 8d7c5d                   sta torai1
1049 : 8da35d                   sta torai2
104c : 8dba63                   sta chkdadi  
104f : 8dd763                   sta chkdsbi
1052 : 8d6365                   sta chkadi
1055 : 8d8065                   sta chksbi
1058 : 18                       clc
1059 : a209                     ldx #zp_bss-zero_page ;zeropage - write test area
105b : 7510             gcs3    adc zero_page,x
105d : 9004                     bcc gcs2
105f : ee0202                   inc ram_chksm+1 ;carry to high byte
1062 : 18                       clc
1063 : e8               gcs2    inx
1064 : d0f5                     bne gcs3
1066 : a202                     ldx #hi(data_segment) ;set high byte of indirect pointer
1068 : 8613                     stx zpt+1
106a : a008                     ldy #lo(data_bss) ;data after write test area
106c : 7112             gcs5    adc (zpt),y
106e : 9004                     bcc gcs4
1070 : ee0202                   inc ram_chksm+1 ;carry to high byte
1073 : 18                       clc
1074 : c8               gcs4    iny
1075 : d0f5                     bne gcs5
1077 : e8                       inx             ;advance RAM high address
1078 : 8613                     stx zpt+1
107a : e0e0                     cpx #ram_top
107c : d0ee                     bne gcs5
107e : 8d0102                   sta ram_chksm   ;checksum complete
                            endif
                                next_test            
1081 : ad0002          >            lda test_case   ;previous test
1084 : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1086 : f003            >        beq skip0002
                       >        trap            ;failed not equal (non zero)
1088 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
108b :                 >skip0002
                       >
0001 =                 >test_num = test_num + 1
108b : a901            >            lda #test_num   ;*** next tests' number
108d : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1090 : d8              >            cld
1091 : a900            >            lda #0
1093 : 8512            >            sta zpt         ;set low byte of indirect pointer
1095 : 8515            >            sta zpt+3       ;checksum high byte
1097 : 8dbb11          >            sta range_adr   ;reset self modifying code
109a : 8dfb57          >            sta tandi1
109d : 8d2258          >            sta tandi2
10a0 : 8dbc5a          >            sta teori1
10a3 : 8de35a          >            sta teori2
10a6 : 8d7c5d          >            sta torai1
10a9 : 8da35d          >            sta torai2
10ac : 8dba63          >            sta chkdadi  
10af : 8dd763          >            sta chkdsbi
10b2 : 8d6365          >            sta chkadi
10b5 : 8d8065          >            sta chksbi
10b8 : 18              >            clc
10b9 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
10bb : 7510            >ccs30004      adc zero_page,x
10bd : 9003            >            bcc ccs20004
10bf : e615            >            inc zpt+3       ;carry to high byte
10c1 : 18              >            clc
10c2 : e8              >ccs20004      inx
10c3 : d0f6            >            bne ccs30004
10c5 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
10c7 : 8613            >            stx zpt+1
10c9 : a008            >            ldy #lo(data_bss) ;data after write test area
10cb : 7112            >ccs50004      adc (zpt),y
10cd : 9003            >            bcc ccs40004
10cf : e615            >            inc zpt+3       ;carry to high byte
10d1 : 18              >            clc
10d2 : c8              >ccs40004      iny
10d3 : d0f6            >            bne ccs50004
10d5 : e8              >            inx             ;advance RAM high address
10d6 : 8613            >            stx zpt+1
10d8 : e0e0            >            cpx #ram_top
10da : d0ef            >            bne ccs50004
10dc : 8514            >            sta zpt+2       ;checksum low is
10de : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
10e1 : f003            >        beq skip0005
                       >        trap            ;failed not equal (non zero)
10e3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
10e6 :                 >skip0005
                       >
10e6 : a515            >            lda zpt+3       ;checksum high is
10e8 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
10eb : f003            >        beq skip0007
                       >        trap            ;failed not equal (non zero)
10ed : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
10f0 :                 >skip0007
                       >
                       >
                        
                        
10f0 : 8d04ef            sta $ef04
10f3 : 74657374696e67..  db "testing relative addressing with BEQ", 10, 0
1119 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
111b :                  range_loop
111b : 88                       dey             ;next relative address
111c : 98                       tya
111d : aa                       tax             ;precharge count to end of loop
111e : 1008                     bpl range_fw    ;calculate relative address
1120 : 18                       clc             ;avoid branch self or to relative address of branch
1121 : 6902                     adc #2
1123 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
1124 : ea                       nop
1125 : ea                       nop
1126 : ea                       nop
1127 : ea                       nop
1128 :                  range_fw
1128 : ea                       nop
1129 : ea                       nop
112a : ea                       nop
112b : ea                       nop
112c : ea                       nop
112d : 497f                     eor #$7f        ;complement except sign
112f : 8dbb11                   sta range_adr   ;load into test target
1132 : a900                     lda #0          ;should set zero flag in status register
1134 : 4cba11                   jmp range_op
                                
1137 : ca                       dex             ; offset landing zone - backward branch too far
1138 : ca                       dex
1139 : ca                       dex
113a : ca                       dex
113b : ca                       dex
                                ;relative address target field with branch under test in the middle                       
113c : ca                       dex             ;-128 - max backward
113d : ca                       dex
113e : ca                       dex
113f : ca                       dex
1140 : ca                       dex
1141 : ca                       dex
1142 : ca                       dex
1143 : ca                       dex
1144 : ca                       dex             ;-120
1145 : ca                       dex
1146 : ca                       dex
1147 : ca                       dex
1148 : ca                       dex
1149 : ca                       dex
114a : ca                       dex
114b : ca                       dex
114c : ca                       dex
114d : ca                       dex
114e : ca                       dex             ;-110
114f : ca                       dex
1150 : ca                       dex
1151 : ca                       dex
1152 : ca                       dex
1153 : ca                       dex
1154 : ca                       dex
1155 : ca                       dex
1156 : ca                       dex
1157 : ca                       dex
1158 : ca                       dex             ;-100
1159 : ca                       dex
115a : ca                       dex
115b : ca                       dex
115c : ca                       dex
115d : ca                       dex
115e : ca                       dex
115f : ca                       dex
1160 : ca                       dex
1161 : ca                       dex
1162 : ca                       dex             ;-90
1163 : ca                       dex
1164 : ca                       dex
1165 : ca                       dex
1166 : ca                       dex
1167 : ca                       dex
1168 : ca                       dex
1169 : ca                       dex
116a : ca                       dex
116b : ca                       dex
116c : ca                       dex             ;-80
116d : ca                       dex
116e : ca                       dex
116f : ca                       dex
1170 : ca                       dex
1171 : ca                       dex
1172 : ca                       dex
1173 : ca                       dex
1174 : ca                       dex
1175 : ca                       dex
1176 : ca                       dex             ;-70
1177 : ca                       dex
1178 : ca                       dex
1179 : ca                       dex
117a : ca                       dex
117b : ca                       dex
117c : ca                       dex
117d : ca                       dex
117e : ca                       dex
117f : ca                       dex
1180 : ca                       dex             ;-60
1181 : ca                       dex
1182 : ca                       dex
1183 : ca                       dex
1184 : ca                       dex
1185 : ca                       dex
1186 : ca                       dex
1187 : ca                       dex
1188 : ca                       dex
1189 : ca                       dex
118a : ca                       dex             ;-50
118b : ca                       dex
118c : ca                       dex
118d : ca                       dex
118e : ca                       dex
118f : ca                       dex
1190 : ca                       dex
1191 : ca                       dex
1192 : ca                       dex
1193 : ca                       dex
1194 : ca                       dex             ;-40
1195 : ca                       dex
1196 : ca                       dex
1197 : ca                       dex
1198 : ca                       dex
1199 : ca                       dex
119a : ca                       dex
119b : ca                       dex
119c : ca                       dex
119d : ca                       dex
119e : ca                       dex             ;-30
119f : ca                       dex
11a0 : ca                       dex
11a1 : ca                       dex
11a2 : ca                       dex
11a3 : ca                       dex
11a4 : ca                       dex
11a5 : ca                       dex
11a6 : ca                       dex
11a7 : ca                       dex
11a8 : ca                       dex             ;-20
11a9 : ca                       dex
11aa : ca                       dex
11ab : ca                       dex
11ac : ca                       dex
11ad : ca                       dex
11ae : ca                       dex
11af : ca                       dex
11b0 : ca                       dex
11b1 : ca                       dex
11b2 : ca                       dex             ;-10
11b3 : ca                       dex
11b4 : ca                       dex
11b5 : ca                       dex
11b6 : ca                       dex
11b7 : ca                       dex
11b8 : ca                       dex
11b9 : ca                       dex             ;-3
11ba :                  range_op                ;test target with zero flag=0, z=1 if previous dex
11bb =                  range_adr   = *+1       ;modifiable relative address
11ba : f03e                     beq *+64        ;+64 if called without modification
11bc : ca                       dex             ;+0
11bd : ca                       dex
11be : ca                       dex
11bf : ca                       dex
11c0 : ca                       dex
11c1 : ca                       dex
11c2 : ca                       dex
11c3 : ca                       dex
11c4 : ca                       dex
11c5 : ca                       dex
11c6 : ca                       dex             ;+10
11c7 : ca                       dex
11c8 : ca                       dex
11c9 : ca                       dex
11ca : ca                       dex
11cb : ca                       dex
11cc : ca                       dex
11cd : ca                       dex
11ce : ca                       dex
11cf : ca                       dex
11d0 : ca                       dex             ;+20
11d1 : ca                       dex
11d2 : ca                       dex
11d3 : ca                       dex
11d4 : ca                       dex
11d5 : ca                       dex
11d6 : ca                       dex
11d7 : ca                       dex
11d8 : ca                       dex
11d9 : ca                       dex
11da : ca                       dex             ;+30
11db : ca                       dex
11dc : ca                       dex
11dd : ca                       dex
11de : ca                       dex
11df : ca                       dex
11e0 : ca                       dex
11e1 : ca                       dex
11e2 : ca                       dex
11e3 : ca                       dex
11e4 : ca                       dex             ;+40
11e5 : ca                       dex
11e6 : ca                       dex
11e7 : ca                       dex
11e8 : ca                       dex
11e9 : ca                       dex
11ea : ca                       dex
11eb : ca                       dex
11ec : ca                       dex
11ed : ca                       dex
11ee : ca                       dex             ;+50
11ef : ca                       dex
11f0 : ca                       dex
11f1 : ca                       dex
11f2 : ca                       dex
11f3 : ca                       dex
11f4 : ca                       dex
11f5 : ca                       dex
11f6 : ca                       dex
11f7 : ca                       dex
11f8 : ca                       dex             ;+60
11f9 : ca                       dex
11fa : ca                       dex
11fb : ca                       dex
11fc : ca                       dex
11fd : ca                       dex
11fe : ca                       dex
11ff : ca                       dex
1200 : ca                       dex
1201 : ca                       dex
1202 : ca                       dex             ;+70
1203 : ca                       dex
1204 : ca                       dex
1205 : ca                       dex
1206 : ca                       dex
1207 : ca                       dex
1208 : ca                       dex
1209 : ca                       dex
120a : ca                       dex
120b : ca                       dex
120c : ca                       dex             ;+80
120d : ca                       dex
120e : ca                       dex
120f : ca                       dex
1210 : ca                       dex
1211 : ca                       dex
1212 : ca                       dex
1213 : ca                       dex
1214 : ca                       dex
1215 : ca                       dex
1216 : ca                       dex             ;+90
1217 : ca                       dex
1218 : ca                       dex
1219 : ca                       dex
121a : ca                       dex
121b : ca                       dex
121c : ca                       dex
121d : ca                       dex
121e : ca                       dex
121f : ca                       dex
1220 : ca                       dex             ;+100
1221 : ca                       dex
1222 : ca                       dex
1223 : ca                       dex
1224 : ca                       dex
1225 : ca                       dex
1226 : ca                       dex
1227 : ca                       dex
1228 : ca                       dex
1229 : ca                       dex
122a : ca                       dex             ;+110
122b : ca                       dex
122c : ca                       dex
122d : ca                       dex
122e : ca                       dex
122f : ca                       dex
1230 : ca                       dex
1231 : ca                       dex
1232 : ca                       dex
1233 : ca                       dex
1234 : ca                       dex             ;+120
1235 : ca                       dex
1236 : ca                       dex
1237 : ca                       dex
1238 : ca                       dex
1239 : ca                       dex
123a : ca                       dex
123b : ea                       nop             ;offset landing zone - forward branch too far
123c : ea                       nop
123d : ea                       nop
123e : ea                       nop
123f : ea                       nop
1240 : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
1242 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1245 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
1246 : ea                       nop
1247 : ea                       nop
1248 : ea                       nop
1249 : ea                       nop
124a :                  range_ok
124a : ea                       nop
124b : ea                       nop
124c : ea                       nop
124d : ea                       nop
124e : ea                       nop
124f : c000                     cpy #0
1251 : f003                     beq range_end   
1253 : 4c1b11                   jmp range_loop
1256 :                  range_end               ;range test successful
                                next_test
1256 : ad0002          >            lda test_case   ;previous test
1259 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
125b : f003            >        beq skip0011
                       >        trap            ;failed not equal (non zero)
125d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1260 :                 >skip0011
                       >
0002 =                 >test_num = test_num + 1
1260 : a902            >            lda #test_num   ;*** next tests' number
1262 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1265 : d8              >            cld
1266 : a900            >            lda #0
1268 : 8512            >            sta zpt         ;set low byte of indirect pointer
126a : 8515            >            sta zpt+3       ;checksum high byte
126c : 8dbb11          >            sta range_adr   ;reset self modifying code
126f : 8dfb57          >            sta tandi1
1272 : 8d2258          >            sta tandi2
1275 : 8dbc5a          >            sta teori1
1278 : 8de35a          >            sta teori2
127b : 8d7c5d          >            sta torai1
127e : 8da35d          >            sta torai2
1281 : 8dba63          >            sta chkdadi  
1284 : 8dd763          >            sta chkdsbi
1287 : 8d6365          >            sta chkadi
128a : 8d8065          >            sta chksbi
128d : 18              >            clc
128e : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1290 : 7510            >ccs30013      adc zero_page,x
1292 : 9003            >            bcc ccs20013
1294 : e615            >            inc zpt+3       ;carry to high byte
1296 : 18              >            clc
1297 : e8              >ccs20013      inx
1298 : d0f6            >            bne ccs30013
129a : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
129c : 8613            >            stx zpt+1
129e : a008            >            ldy #lo(data_bss) ;data after write test area
12a0 : 7112            >ccs50013      adc (zpt),y
12a2 : 9003            >            bcc ccs40013
12a4 : e615            >            inc zpt+3       ;carry to high byte
12a6 : 18              >            clc
12a7 : c8              >ccs40013      iny
12a8 : d0f6            >            bne ccs50013
12aa : e8              >            inx             ;advance RAM high address
12ab : 8613            >            stx zpt+1
12ad : e0e0            >            cpx #ram_top
12af : d0ef            >            bne ccs50013
12b1 : 8514            >            sta zpt+2       ;checksum low is
12b3 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
12b6 : f003            >        beq skip0014
                       >        trap            ;failed not equal (non zero)
12b8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
12bb :                 >skip0014
                       >
12bb : a515            >            lda zpt+3       ;checksum high is
12bd : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
12c0 : f003            >        beq skip0016
                       >        trap            ;failed not equal (non zero)
12c2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
12c5 :                 >skip0016
                       >
                       >
                        
                        
12c5 : 8d04ef            sta $ef04
12c8 : 7061727469616c..  db "partial test BNE & CMP, CPX, CPY immediate", 10, 0
12f4 : c001                     cpy #1          ;testing BNE true
12f6 : d003                     bne test_bne
                                trap 
12f8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
12fb :                  test_bne
12fb : a900                     lda #0 
12fd : c900                     cmp #0          ;test compare immediate 
                                trap_ne
12ff : f003            >        beq skip0019
                       >        trap            ;failed not equal (non zero)
1301 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1304 :                 >skip0019
                        
                                trap_cc
1304 : b003            >        bcs skip0021
                       >        trap            ;failed carry clear
1306 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1309 :                 >skip0021
                        
                                trap_mi
1309 : 1003            >        bpl skip0023
                       >        trap            ;failed minus (bit 7 set)
130b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
130e :                 >skip0023
                        
130e : c901                     cmp #1
                                trap_eq 
1310 : d003            >        bne skip0025
                       >        trap           ;failed equal (zero)
1312 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1315 :                 >skip0025
                        
                                trap_cs
1315 : 9003            >        bcc skip0027
                       >        trap            ;failed carry set
1317 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
131a :                 >skip0027
                        
                                trap_pl
131a : 3003            >        bmi skip0029
                       >        trap            ;failed plus (bit 7 clear)
131c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
131f :                 >skip0029
                        
131f : aa                       tax 
1320 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
1322 : f003            >        beq skip0031
                       >        trap            ;failed not equal (non zero)
1324 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1327 :                 >skip0031
                        
                                trap_cc
1327 : b003            >        bcs skip0033
                       >        trap            ;failed carry clear
1329 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
132c :                 >skip0033
                        
                                trap_mi
132c : 1003            >        bpl skip0035
                       >        trap            ;failed minus (bit 7 set)
132e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1331 :                 >skip0035
                        
1331 : e001                     cpx #1
                                trap_eq 
1333 : d003            >        bne skip0037
                       >        trap           ;failed equal (zero)
1335 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1338 :                 >skip0037
                        
                                trap_cs
1338 : 9003            >        bcc skip0039
                       >        trap            ;failed carry set
133a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
133d :                 >skip0039
                        
                                trap_pl
133d : 3003            >        bmi skip0041
                       >        trap            ;failed plus (bit 7 clear)
133f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1342 :                 >skip0041
                        
1342 : a8                       tay 
1343 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
1345 : f003            >        beq skip0043
                       >        trap            ;failed not equal (non zero)
1347 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
134a :                 >skip0043
                        
                                trap_cc
134a : b003            >        bcs skip0045
                       >        trap            ;failed carry clear
134c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
134f :                 >skip0045
                        
                                trap_mi
134f : 1003            >        bpl skip0047
                       >        trap            ;failed minus (bit 7 set)
1351 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1354 :                 >skip0047
                        
1354 : c001                     cpy #1
                                trap_eq 
1356 : d003            >        bne skip0049
                       >        trap           ;failed equal (zero)
1358 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
135b :                 >skip0049
                        
                                trap_cs
135b : 9003            >        bcc skip0051
                       >        trap            ;failed carry set
135d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1360 :                 >skip0051
                        
                                trap_pl
1360 : 3003            >        bmi skip0053
                       >        trap            ;failed plus (bit 7 clear)
1362 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1365 :                 >skip0053
                        
                                next_test
1365 : ad0002          >            lda test_case   ;previous test
1368 : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
136a : f003            >        beq skip0056
                       >        trap            ;failed not equal (non zero)
136c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
136f :                 >skip0056
                       >
0003 =                 >test_num = test_num + 1
136f : a903            >            lda #test_num   ;*** next tests' number
1371 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1374 : d8              >            cld
1375 : a900            >            lda #0
1377 : 8512            >            sta zpt         ;set low byte of indirect pointer
1379 : 8515            >            sta zpt+3       ;checksum high byte
137b : 8dbb11          >            sta range_adr   ;reset self modifying code
137e : 8dfb57          >            sta tandi1
1381 : 8d2258          >            sta tandi2
1384 : 8dbc5a          >            sta teori1
1387 : 8de35a          >            sta teori2
138a : 8d7c5d          >            sta torai1
138d : 8da35d          >            sta torai2
1390 : 8dba63          >            sta chkdadi  
1393 : 8dd763          >            sta chkdsbi
1396 : 8d6365          >            sta chkadi
1399 : 8d8065          >            sta chksbi
139c : 18              >            clc
139d : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
139f : 7510            >ccs30058      adc zero_page,x
13a1 : 9003            >            bcc ccs20058
13a3 : e615            >            inc zpt+3       ;carry to high byte
13a5 : 18              >            clc
13a6 : e8              >ccs20058      inx
13a7 : d0f6            >            bne ccs30058
13a9 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
13ab : 8613            >            stx zpt+1
13ad : a008            >            ldy #lo(data_bss) ;data after write test area
13af : 7112            >ccs50058      adc (zpt),y
13b1 : 9003            >            bcc ccs40058
13b3 : e615            >            inc zpt+3       ;carry to high byte
13b5 : 18              >            clc
13b6 : c8              >ccs40058      iny
13b7 : d0f6            >            bne ccs50058
13b9 : e8              >            inx             ;advance RAM high address
13ba : 8613            >            stx zpt+1
13bc : e0e0            >            cpx #ram_top
13be : d0ef            >            bne ccs50058
13c0 : 8514            >            sta zpt+2       ;checksum low is
13c2 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
13c5 : f003            >        beq skip0059
                       >        trap            ;failed not equal (non zero)
13c7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
13ca :                 >skip0059
                       >
13ca : a515            >            lda zpt+3       ;checksum high is
13cc : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
13cf : f003            >        beq skip0061
                       >        trap            ;failed not equal (non zero)
13d1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
13d4 :                 >skip0061
                       >
                       >
                        
13d4 : 8d04ef            sta $ef04
13d7 : 74657374696e67..  db "testing stack operations PHA PHP PLA PLP", 10, 0
                                    
1401 : a2ff                     ldx #$ff        ;initialize stack
1403 : 9a                       txs
1404 : a955                     lda #$55
1406 : 48                       pha
1407 : a9aa                     lda #$aa
1409 : 48                       pha
140a : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
140d : f003            >        beq skip0063
                       >        trap            ;failed not equal (non zero)
140f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1412 :                 >skip0063
                        
1412 : ba                       tsx
1413 : 8a                       txa             ;overwrite accu
1414 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
1416 : f003            >        beq skip0065
                       >        trap            ;failed not equal (non zero)
1418 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
141b :                 >skip0065
                        
141b : 68                       pla
141c : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
141e : f003            >        beq skip0067
                       >        trap            ;failed not equal (non zero)
1420 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1423 :                 >skip0067
                        
1423 : 68                       pla
1424 : c955                     cmp #$55
                                trap_ne
1426 : f003            >        beq skip0069
                       >        trap            ;failed not equal (non zero)
1428 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
142b :                 >skip0069
                        
142b : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
142e : f003            >        beq skip0071
                       >        trap            ;failed not equal (non zero)
1430 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1433 :                 >skip0071
                        
1433 : ba                       tsx
1434 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
1436 : f003            >        beq skip0073
                       >        trap            ;failed not equal (non zero)
1438 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
143b :                 >skip0073
                        
                                next_test
143b : ad0002          >            lda test_case   ;previous test
143e : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1440 : f003            >        beq skip0076
                       >        trap            ;failed not equal (non zero)
1442 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1445 :                 >skip0076
                       >
0004 =                 >test_num = test_num + 1
1445 : a904            >            lda #test_num   ;*** next tests' number
1447 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
144a : d8              >            cld
144b : a900            >            lda #0
144d : 8512            >            sta zpt         ;set low byte of indirect pointer
144f : 8515            >            sta zpt+3       ;checksum high byte
1451 : 8dbb11          >            sta range_adr   ;reset self modifying code
1454 : 8dfb57          >            sta tandi1
1457 : 8d2258          >            sta tandi2
145a : 8dbc5a          >            sta teori1
145d : 8de35a          >            sta teori2
1460 : 8d7c5d          >            sta torai1
1463 : 8da35d          >            sta torai2
1466 : 8dba63          >            sta chkdadi  
1469 : 8dd763          >            sta chkdsbi
146c : 8d6365          >            sta chkadi
146f : 8d8065          >            sta chksbi
1472 : 18              >            clc
1473 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1475 : 7510            >ccs30078      adc zero_page,x
1477 : 9003            >            bcc ccs20078
1479 : e615            >            inc zpt+3       ;carry to high byte
147b : 18              >            clc
147c : e8              >ccs20078      inx
147d : d0f6            >            bne ccs30078
147f : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1481 : 8613            >            stx zpt+1
1483 : a008            >            ldy #lo(data_bss) ;data after write test area
1485 : 7112            >ccs50078      adc (zpt),y
1487 : 9003            >            bcc ccs40078
1489 : e615            >            inc zpt+3       ;carry to high byte
148b : 18              >            clc
148c : c8              >ccs40078      iny
148d : d0f6            >            bne ccs50078
148f : e8              >            inx             ;advance RAM high address
1490 : 8613            >            stx zpt+1
1492 : e0e0            >            cpx #ram_top
1494 : d0ef            >            bne ccs50078
1496 : 8514            >            sta zpt+2       ;checksum low is
1498 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
149b : f003            >        beq skip0079
                       >        trap            ;failed not equal (non zero)
149d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
14a0 :                 >skip0079
                       >
14a0 : a515            >            lda zpt+3       ;checksum high is
14a2 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
14a5 : f003            >        beq skip0081
                       >        trap            ;failed not equal (non zero)
14a7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
14aa :                 >skip0081
                       >
                       >
                        
                        
14aa : 8d04ef            sta $ef04
14ad : 74657374696e67..  db "testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ", 10, 0
                                set_stat $ff    ;all on
                       >            load_flag $ff    
14e7 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
14e9 : 48              >            pha         ;use stack to load status
14ea : 28              >            plp
                        
14eb : 101a                     bpl nbr1        ;branches should not be taken
14ed : 501b                     bvc nbr2
14ef : 901c                     bcc nbr3
14f1 : d01d                     bne nbr4
14f3 : 3003                     bmi br1         ;branches should be taken
                                trap 
14f5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
14f8 : 7003             br1     bvs br2
                                trap 
14fa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
14fd : b003             br2     bcs br3
                                trap 
14ff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1502 : f00f             br3     beq br4
                                trap 
1504 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1507 :                  nbr1
                                trap            ;previous bpl taken 
1507 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
150a :                  nbr2
                                trap            ;previous bvc taken
150a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
150d :                  nbr3
                                trap            ;previous bcc taken
150d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1510 :                  nbr4
                                trap            ;previous bne taken
1510 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1513 : 08               br4     php
1514 : ba                       tsx
1515 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
1517 : f003            >        beq skip0093
                       >        trap            ;failed not equal (non zero)
1519 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
151c :                 >skip0093
                        
151c : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
151d : c9ff            >            cmp #($ff    |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
151f : f003            >        beq skip0096
                       >        trap            ;failed not equal (non zero)
1521 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1524 :                 >skip0096
                        
1524 : ba                       tsx
1525 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
1527 : f003            >        beq skip0098
                       >        trap            ;failed not equal (non zero)
1529 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
152c :                 >skip0098
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
152c : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
152e : 48              >            pha         ;use stack to load status
152f : 28              >            plp
                        
1530 : 301a                     bmi nbr11       ;branches should not be taken
1532 : 701b                     bvs nbr12
1534 : b01c                     bcs nbr13
1536 : f01d                     beq nbr14
1538 : 1003                     bpl br11        ;branches should be taken
                                trap 
153a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
153d : 5003             br11    bvc br12
                                trap 
153f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1542 : 9003             br12    bcc br13
                                trap 
1544 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1547 : d00f             br13    bne br14
                                trap 
1549 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
154c :                  nbr11
                                trap            ;previous bmi taken 
154c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
154f :                  nbr12
                                trap            ;previous bvs taken 
154f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1552 :                  nbr13
                                trap            ;previous bcs taken 
1552 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1555 :                  nbr14
                                trap            ;previous beq taken 
1555 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1558 : 08               br14    php
1559 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
155a : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
155c : f003            >        beq skip0111
                       >        trap            ;failed not equal (non zero)
155e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1561 :                 >skip0111
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
1561 : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
1563 : 48              >            pha         ;use stack to load status
1564 : 28              >            plp
                        
1565 : d002                     bne brzs1
1567 : f003                     beq brzs2
1569 :                  brzs1
                                trap            ;branch zero/non zero
1569 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
156c : b002             brzs2   bcs brzs3
156e : 9003                     bcc brzs4
1570 :                  brzs3
                                trap            ;branch carry/no carry
1570 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1573 : 3002             brzs4   bmi brzs5
1575 : 1003                     bpl brzs6
1577 :                  brzs5
                                trap            ;branch minus/plus
1577 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
157a : 7002             brzs6   bvs brzs7
157c : 5003                     bvc brzs8
157e :                  brzs7
                                trap            ;branch overflow/no overflow
157e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1581 :                  brzs8
                                set_stat carry
                       >            load_flag carry
1581 : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
1583 : 48              >            pha         ;use stack to load status
1584 : 28              >            plp
                        
1585 : f002                     beq brcs1
1587 : d003                     bne brcs2
1589 :                  brcs1
                                trap            ;branch zero/non zero
1589 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
158c : 9002             brcs2   bcc brcs3
158e : b003                     bcs brcs4
1590 :                  brcs3
                                trap            ;branch carry/no carry
1590 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1593 : 3002             brcs4   bmi brcs5
1595 : 1003                     bpl brcs6
1597 :                  brcs5
                                trap            ;branch minus/plus
1597 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
159a : 7002             brcs6   bvs brcs7
159c : 5003                     bvc brcs8
159e :                  brcs7
                                trap            ;branch overflow/no overflow
159e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
                        
15a1 :                  brcs8
                                set_stat minus
                       >            load_flag minus
15a1 : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
15a3 : 48              >            pha         ;use stack to load status
15a4 : 28              >            plp
                        
15a5 : f002                     beq brmi1
15a7 : d003                     bne brmi2
15a9 :                  brmi1
                                trap            ;branch zero/non zero
15a9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15ac : b002             brmi2   bcs brmi3
15ae : 9003                     bcc brmi4
15b0 :                  brmi3
                                trap            ;branch carry/no carry
15b0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15b3 : 1002             brmi4   bpl brmi5
15b5 : 3003                     bmi brmi6
15b7 :                  brmi5
                                trap            ;branch minus/plus
15b7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15ba : 7002             brmi6   bvs brmi7
15bc : 5003                     bvc brmi8
15be :                  brmi7
                                trap            ;branch overflow/no overflow
15be : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15c1 :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
15c1 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
15c3 : 48              >            pha         ;use stack to load status
15c4 : 28              >            plp
                        
15c5 : f002                     beq brvs1
15c7 : d003                     bne brvs2
15c9 :                  brvs1
                                trap            ;branch zero/non zero
15c9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15cc : b002             brvs2   bcs brvs3
15ce : 9003                     bcc brvs4
15d0 :                  brvs3
                                trap            ;branch carry/no carry
15d0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15d3 : 3002             brvs4   bmi brvs5
15d5 : 1003                     bpl brvs6
15d7 :                  brvs5
                                trap            ;branch minus/plus
15d7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15da : 5002             brvs6   bvc brvs7
15dc : 7003                     bvs brvs8
15de :                  brvs7
                                trap            ;branch overflow/no overflow
15de : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15e1 :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
15e1 : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
15e3 : 48              >            pha         ;use stack to load status
15e4 : 28              >            plp
                        
15e5 : f002                     beq brzc1
15e7 : d003                     bne brzc2
15e9 :                  brzc1
                                trap            ;branch zero/non zero
15e9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15ec : 9002             brzc2   bcc brzc3
15ee : b003                     bcs brzc4
15f0 :                  brzc3
                                trap            ;branch carry/no carry
15f0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15f3 : 1002             brzc4   bpl brzc5
15f5 : 3003                     bmi brzc6
15f7 :                  brzc5
                                trap            ;branch minus/plus
15f7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
15fa : 5002             brzc6   bvc brzc7
15fc : 7003                     bvs brzc8
15fe :                  brzc7
                                trap            ;branch overflow/no overflow
15fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1601 :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
1601 : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
1603 : 48              >            pha         ;use stack to load status
1604 : 28              >            plp
                        
1605 : d002                     bne brcc1
1607 : f003                     beq brcc2
1609 :                  brcc1
                                trap            ;branch zero/non zero
1609 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
160c : b002             brcc2   bcs brcc3
160e : 9003                     bcc brcc4
1610 :                  brcc3
                                trap            ;branch carry/no carry
1610 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1613 : 1002             brcc4   bpl brcc5
1615 : 3003                     bmi brcc6
1617 :                  brcc5
                                trap            ;branch minus/plus
1617 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
161a : 5002             brcc6   bvc brcc7
161c : 7003                     bvs brcc8
161e :                  brcc7
                                trap            ;branch overflow/no overflow
161e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1621 :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
1621 : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
1623 : 48              >            pha         ;use stack to load status
1624 : 28              >            plp
                        
1625 : d002                     bne brpl1
1627 : f003                     beq brpl2
1629 :                  brpl1
                                trap            ;branch zero/non zero
1629 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
162c : 9002             brpl2   bcc brpl3
162e : b003                     bcs brpl4
1630 :                  brpl3
                                trap            ;branch carry/no carry
1630 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1633 : 3002             brpl4   bmi brpl5
1635 : 1003                     bpl brpl6
1637 :                  brpl5
                                trap            ;branch minus/plus
1637 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
163a : 5002             brpl6   bvc brpl7
163c : 7003                     bvs brpl8
163e :                  brpl7
                                trap            ;branch overflow/no overflow
163e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1641 :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
1641 : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
1643 : 48              >            pha         ;use stack to load status
1644 : 28              >            plp
                        
1645 : d002                     bne brvc1
1647 : f003                     beq brvc2
1649 :                  brvc1
                                trap            ;branch zero/non zero
1649 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
164c : 9002             brvc2   bcc brvc3
164e : b003                     bcs brvc4
1650 :                  brvc3
                                trap            ;branch carry/no carry
1650 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1653 : 1002             brvc4   bpl brvc5
1655 : 3003                     bmi brvc6
1657 :                  brvc5
                                trap            ;branch minus/plus
1657 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
165a : 7002             brvc6   bvs brvc7
165c : 5003                     bvc brvc8
165e :                  brvc7
                                trap            ;branch overflow/no overflow
165e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
1661 :                  brvc8
                                next_test
1661 : ad0002          >            lda test_case   ;previous test
1664 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1666 : f003            >        beq skip0162
                       >        trap            ;failed not equal (non zero)
1668 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
166b :                 >skip0162
                       >
0005 =                 >test_num = test_num + 1
166b : a905            >            lda #test_num   ;*** next tests' number
166d : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1670 : d8              >            cld
1671 : a900            >            lda #0
1673 : 8512            >            sta zpt         ;set low byte of indirect pointer
1675 : 8515            >            sta zpt+3       ;checksum high byte
1677 : 8dbb11          >            sta range_adr   ;reset self modifying code
167a : 8dfb57          >            sta tandi1
167d : 8d2258          >            sta tandi2
1680 : 8dbc5a          >            sta teori1
1683 : 8de35a          >            sta teori2
1686 : 8d7c5d          >            sta torai1
1689 : 8da35d          >            sta torai2
168c : 8dba63          >            sta chkdadi  
168f : 8dd763          >            sta chkdsbi
1692 : 8d6365          >            sta chkadi
1695 : 8d8065          >            sta chksbi
1698 : 18              >            clc
1699 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
169b : 7510            >ccs30164      adc zero_page,x
169d : 9003            >            bcc ccs20164
169f : e615            >            inc zpt+3       ;carry to high byte
16a1 : 18              >            clc
16a2 : e8              >ccs20164      inx
16a3 : d0f6            >            bne ccs30164
16a5 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
16a7 : 8613            >            stx zpt+1
16a9 : a008            >            ldy #lo(data_bss) ;data after write test area
16ab : 7112            >ccs50164      adc (zpt),y
16ad : 9003            >            bcc ccs40164
16af : e615            >            inc zpt+3       ;carry to high byte
16b1 : 18              >            clc
16b2 : c8              >ccs40164      iny
16b3 : d0f6            >            bne ccs50164
16b5 : e8              >            inx             ;advance RAM high address
16b6 : 8613            >            stx zpt+1
16b8 : e0e0            >            cpx #ram_top
16ba : d0ef            >            bne ccs50164
16bc : 8514            >            sta zpt+2       ;checksum low is
16be : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
16c1 : f003            >        beq skip0165
                       >        trap            ;failed not equal (non zero)
16c3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
16c6 :                 >skip0165
                       >
16c6 : a515            >            lda zpt+3       ;checksum high is
16c8 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
16cb : f003            >        beq skip0167
                       >        trap            ;failed not equal (non zero)
16cd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
16d0 :                 >skip0167
                       >
                       >
                        
                        
16d0 : 8d04ef            sta $ef04
16d3 : 74657374205048..  db "test PHA does not alter flags or accumulator but PLA does", 10, 0
170e : a255                     ldx #$55        ;x & y protected
1710 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
1712 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
1714 : 48              >            pha         ;use stack to load status
1715 : a901            >            lda #1     ;precharge accu
1717 : 28              >            plp
                        
1718 : 48                       pha
                                tst_a 1,$ff
1719 : 08              >            php         ;save flags
171a : c901            >            cmp #1     ;test result
                       >            trap_ne
171c : f003            >        beq skip0172
                       >        trap            ;failed not equal (non zero)
171e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1721 :                 >skip0172
                       >
1721 : 68              >            pla         ;load status
1722 : 48              >            pha
                       >            cmp_flag $ff
1723 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1725 : f003            >        beq skip0175
                       >        trap            ;failed not equal (non zero)
1727 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
172a :                 >skip0175
                       >
172a : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
172b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
172d : 48              >            pha         ;use stack to load status
172e : a900            >            lda #0     ;precharge accu
1730 : 28              >            plp
                        
1731 : 48                       pha
                                tst_a 0,0
1732 : 08              >            php         ;save flags
1733 : c900            >            cmp #0     ;test result
                       >            trap_ne
1735 : f003            >        beq skip0180
                       >        trap            ;failed not equal (non zero)
1737 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
173a :                 >skip0180
                       >
173a : 68              >            pla         ;load status
173b : 48              >            pha
                       >            cmp_flag 0
173c : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
173e : f003            >        beq skip0183
                       >        trap            ;failed not equal (non zero)
1740 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1743 :                 >skip0183
                       >
1743 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
1744 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1746 : 48              >            pha         ;use stack to load status
1747 : a9ff            >            lda #$ff     ;precharge accu
1749 : 28              >            plp
                        
174a : 48                       pha
                                tst_a $ff,$ff
174b : 08              >            php         ;save flags
174c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
174e : f003            >        beq skip0188
                       >        trap            ;failed not equal (non zero)
1750 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1753 :                 >skip0188
                       >
1753 : 68              >            pla         ;load status
1754 : 48              >            pha
                       >            cmp_flag $ff
1755 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1757 : f003            >        beq skip0191
                       >        trap            ;failed not equal (non zero)
1759 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
175c :                 >skip0191
                       >
175c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
175d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
175f : 48              >            pha         ;use stack to load status
1760 : a901            >            lda #1     ;precharge accu
1762 : 28              >            plp
                        
1763 : 48                       pha
                                tst_a 1,0
1764 : 08              >            php         ;save flags
1765 : c901            >            cmp #1     ;test result
                       >            trap_ne
1767 : f003            >        beq skip0196
                       >        trap            ;failed not equal (non zero)
1769 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
176c :                 >skip0196
                       >
176c : 68              >            pla         ;load status
176d : 48              >            pha
                       >            cmp_flag 0
176e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1770 : f003            >        beq skip0199
                       >        trap            ;failed not equal (non zero)
1772 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1775 :                 >skip0199
                       >
1775 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
1776 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1778 : 48              >            pha         ;use stack to load status
1779 : a900            >            lda #0     ;precharge accu
177b : 28              >            plp
                        
177c : 48                       pha
                                tst_a 0,$ff
177d : 08              >            php         ;save flags
177e : c900            >            cmp #0     ;test result
                       >            trap_ne
1780 : f003            >        beq skip0204
                       >        trap            ;failed not equal (non zero)
1782 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1785 :                 >skip0204
                       >
1785 : 68              >            pla         ;load status
1786 : 48              >            pha
                       >            cmp_flag $ff
1787 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1789 : f003            >        beq skip0207
                       >        trap            ;failed not equal (non zero)
178b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
178e :                 >skip0207
                       >
178e : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
178f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1791 : 48              >            pha         ;use stack to load status
1792 : a9ff            >            lda #$ff     ;precharge accu
1794 : 28              >            plp
                        
1795 : 48                       pha
                                tst_a $ff,0
1796 : 08              >            php         ;save flags
1797 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1799 : f003            >        beq skip0212
                       >        trap            ;failed not equal (non zero)
179b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
179e :                 >skip0212
                       >
179e : 68              >            pla         ;load status
179f : 48              >            pha
                       >            cmp_flag 0
17a0 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17a2 : f003            >        beq skip0215
                       >        trap            ;failed not equal (non zero)
17a4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17a7 :                 >skip0215
                       >
17a7 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
17a8 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
17aa : 48              >            pha         ;use stack to load status
17ab : a900            >            lda #0     ;precharge accu
17ad : 28              >            plp
                        
17ae : 68                       pla
                                tst_a $ff,$ff-zero
17af : 08              >            php         ;save flags
17b0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
17b2 : f003            >        beq skip0220
                       >        trap            ;failed not equal (non zero)
17b4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17b7 :                 >skip0220
                       >
17b7 : 68              >            pla         ;load status
17b8 : 48              >            pha
                       >            cmp_flag $ff-zero
17b9 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17bb : f003            >        beq skip0223
                       >        trap            ;failed not equal (non zero)
17bd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17c0 :                 >skip0223
                       >
17c0 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
17c1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17c3 : 48              >            pha         ;use stack to load status
17c4 : a9ff            >            lda #$ff     ;precharge accu
17c6 : 28              >            plp
                        
17c7 : 68                       pla
                                tst_a 0,zero
17c8 : 08              >            php         ;save flags
17c9 : c900            >            cmp #0     ;test result
                       >            trap_ne
17cb : f003            >        beq skip0228
                       >        trap            ;failed not equal (non zero)
17cd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17d0 :                 >skip0228
                       >
17d0 : 68              >            pla         ;load status
17d1 : 48              >            pha
                       >            cmp_flag zero
17d2 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17d4 : f003            >        beq skip0231
                       >        trap            ;failed not equal (non zero)
17d6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17d9 :                 >skip0231
                       >
17d9 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
17da : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17dc : 48              >            pha         ;use stack to load status
17dd : a9fe            >            lda #$fe     ;precharge accu
17df : 28              >            plp
                        
17e0 : 68                       pla
                                tst_a 1,$ff-zero-minus
17e1 : 08              >            php         ;save flags
17e2 : c901            >            cmp #1     ;test result
                       >            trap_ne
17e4 : f003            >        beq skip0236
                       >        trap            ;failed not equal (non zero)
17e6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17e9 :                 >skip0236
                       >
17e9 : 68              >            pla         ;load status
17ea : 48              >            pha
                       >            cmp_flag $ff-zero-minus
17eb : c97d            >            cmp #($ff-zero-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
17ed : f003            >        beq skip0239
                       >        trap            ;failed not equal (non zero)
17ef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
17f2 :                 >skip0239
                       >
17f2 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
17f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17f5 : 48              >            pha         ;use stack to load status
17f6 : a900            >            lda #0     ;precharge accu
17f8 : 28              >            plp
                        
17f9 : 68                       pla
                                tst_a $ff,minus
17fa : 08              >            php         ;save flags
17fb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
17fd : f003            >        beq skip0244
                       >        trap            ;failed not equal (non zero)
17ff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1802 :                 >skip0244
                       >
1802 : 68              >            pla         ;load status
1803 : 48              >            pha
                       >            cmp_flag minus
1804 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1806 : f003            >        beq skip0247
                       >        trap            ;failed not equal (non zero)
1808 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
180b :                 >skip0247
                       >
180b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
180c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
180e : 48              >            pha         ;use stack to load status
180f : a9ff            >            lda #$ff     ;precharge accu
1811 : 28              >            plp
                        
1812 : 68                       pla
                                tst_a 0,$ff-minus
1813 : 08              >            php         ;save flags
1814 : c900            >            cmp #0     ;test result
                       >            trap_ne
1816 : f003            >        beq skip0252
                       >        trap            ;failed not equal (non zero)
1818 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
181b :                 >skip0252
                       >
181b : 68              >            pla         ;load status
181c : 48              >            pha
                       >            cmp_flag $ff-minus
181d : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
181f : f003            >        beq skip0255
                       >        trap            ;failed not equal (non zero)
1821 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1824 :                 >skip0255
                       >
1824 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
1825 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1827 : 48              >            pha         ;use stack to load status
1828 : a9fe            >            lda #$fe     ;precharge accu
182a : 28              >            plp
                        
182b : 68                       pla
                                tst_a 1,0
182c : 08              >            php         ;save flags
182d : c901            >            cmp #1     ;test result
                       >            trap_ne
182f : f003            >        beq skip0260
                       >        trap            ;failed not equal (non zero)
1831 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1834 :                 >skip0260
                       >
1834 : 68              >            pla         ;load status
1835 : 48              >            pha
                       >            cmp_flag 0
1836 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1838 : f003            >        beq skip0263
                       >        trap            ;failed not equal (non zero)
183a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
183d :                 >skip0263
                       >
183d : 28              >            plp         ;restore status
                        
183e : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
1840 : f003            >        beq skip0265
                       >        trap            ;failed not equal (non zero)
1842 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1845 :                 >skip0265
                        
1845 : c0aa                     cpy #$aa
                                trap_ne
1847 : f003            >        beq skip0267
                       >        trap            ;failed not equal (non zero)
1849 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
184c :                 >skip0267
                        
                                next_test
184c : ad0002          >            lda test_case   ;previous test
184f : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1851 : f003            >        beq skip0270
                       >        trap            ;failed not equal (non zero)
1853 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1856 :                 >skip0270
                       >
0006 =                 >test_num = test_num + 1
1856 : a906            >            lda #test_num   ;*** next tests' number
1858 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
185b : d8              >            cld
185c : a900            >            lda #0
185e : 8512            >            sta zpt         ;set low byte of indirect pointer
1860 : 8515            >            sta zpt+3       ;checksum high byte
1862 : 8dbb11          >            sta range_adr   ;reset self modifying code
1865 : 8dfb57          >            sta tandi1
1868 : 8d2258          >            sta tandi2
186b : 8dbc5a          >            sta teori1
186e : 8de35a          >            sta teori2
1871 : 8d7c5d          >            sta torai1
1874 : 8da35d          >            sta torai2
1877 : 8dba63          >            sta chkdadi  
187a : 8dd763          >            sta chkdsbi
187d : 8d6365          >            sta chkadi
1880 : 8d8065          >            sta chksbi
1883 : 18              >            clc
1884 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1886 : 7510            >ccs30272      adc zero_page,x
1888 : 9003            >            bcc ccs20272
188a : e615            >            inc zpt+3       ;carry to high byte
188c : 18              >            clc
188d : e8              >ccs20272      inx
188e : d0f6            >            bne ccs30272
1890 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1892 : 8613            >            stx zpt+1
1894 : a008            >            ldy #lo(data_bss) ;data after write test area
1896 : 7112            >ccs50272      adc (zpt),y
1898 : 9003            >            bcc ccs40272
189a : e615            >            inc zpt+3       ;carry to high byte
189c : 18              >            clc
189d : c8              >ccs40272      iny
189e : d0f6            >            bne ccs50272
18a0 : e8              >            inx             ;advance RAM high address
18a1 : 8613            >            stx zpt+1
18a3 : e0e0            >            cpx #ram_top
18a5 : d0ef            >            bne ccs50272
18a7 : 8514            >            sta zpt+2       ;checksum low is
18a9 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
18ac : f003            >        beq skip0273
                       >        trap            ;failed not equal (non zero)
18ae : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
18b1 :                 >skip0273
                       >
18b1 : a515            >            lda zpt+3       ;checksum high is
18b3 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
18b6 : f003            >        beq skip0275
                       >        trap            ;failed not equal (non zero)
18b8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
18bb :                 >skip0275
                       >
                       >
                        
                         
18bb : 8d04ef            sta $ef04
18be : 7061727469616c..  db "partial pretest EOR #", 10, 0
                                set_a $3c,0
                       >            load_flag 0
18d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18d7 : 48              >            pha         ;use stack to load status
18d8 : a93c            >            lda #$3c     ;precharge accu
18da : 28              >            plp
                        
18db : 49c3                     eor #$c3
                                tst_a $ff,fn
18dd : 08              >            php         ;save flags
18de : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
18e0 : f003            >        beq skip0280
                       >        trap            ;failed not equal (non zero)
18e2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
18e5 :                 >skip0280
                       >
18e5 : 68              >            pla         ;load status
18e6 : 48              >            pha
                       >            cmp_flag fn
18e7 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
18e9 : f003            >        beq skip0283
                       >        trap            ;failed not equal (non zero)
18eb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
18ee :                 >skip0283
                       >
18ee : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
18ef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18f1 : 48              >            pha         ;use stack to load status
18f2 : a9c3            >            lda #$c3     ;precharge accu
18f4 : 28              >            plp
                        
18f5 : 49c3                     eor #$c3
                                tst_a 0,fz
18f7 : 08              >            php         ;save flags
18f8 : c900            >            cmp #0     ;test result
                       >            trap_ne
18fa : f003            >        beq skip0288
                       >        trap            ;failed not equal (non zero)
18fc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
18ff :                 >skip0288
                       >
18ff : 68              >            pla         ;load status
1900 : 48              >            pha
                       >            cmp_flag fz
1901 : c932            >            cmp #(fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1903 : f003            >        beq skip0291
                       >        trap            ;failed not equal (non zero)
1905 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1908 :                 >skip0291
                       >
1908 : 28              >            plp         ;restore status
                        
                                next_test
1909 : ad0002          >            lda test_case   ;previous test
190c : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
190e : f003            >        beq skip0294
                       >        trap            ;failed not equal (non zero)
1910 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1913 :                 >skip0294
                       >
0007 =                 >test_num = test_num + 1
1913 : a907            >            lda #test_num   ;*** next tests' number
1915 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1918 : d8              >            cld
1919 : a900            >            lda #0
191b : 8512            >            sta zpt         ;set low byte of indirect pointer
191d : 8515            >            sta zpt+3       ;checksum high byte
191f : 8dbb11          >            sta range_adr   ;reset self modifying code
1922 : 8dfb57          >            sta tandi1
1925 : 8d2258          >            sta tandi2
1928 : 8dbc5a          >            sta teori1
192b : 8de35a          >            sta teori2
192e : 8d7c5d          >            sta torai1
1931 : 8da35d          >            sta torai2
1934 : 8dba63          >            sta chkdadi  
1937 : 8dd763          >            sta chkdsbi
193a : 8d6365          >            sta chkadi
193d : 8d8065          >            sta chksbi
1940 : 18              >            clc
1941 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1943 : 7510            >ccs30296      adc zero_page,x
1945 : 9003            >            bcc ccs20296
1947 : e615            >            inc zpt+3       ;carry to high byte
1949 : 18              >            clc
194a : e8              >ccs20296      inx
194b : d0f6            >            bne ccs30296
194d : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
194f : 8613            >            stx zpt+1
1951 : a008            >            ldy #lo(data_bss) ;data after write test area
1953 : 7112            >ccs50296      adc (zpt),y
1955 : 9003            >            bcc ccs40296
1957 : e615            >            inc zpt+3       ;carry to high byte
1959 : 18              >            clc
195a : c8              >ccs40296      iny
195b : d0f6            >            bne ccs50296
195d : e8              >            inx             ;advance RAM high address
195e : 8613            >            stx zpt+1
1960 : e0e0            >            cpx #ram_top
1962 : d0ef            >            bne ccs50296
1964 : 8514            >            sta zpt+2       ;checksum low is
1966 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1969 : f003            >        beq skip0297
                       >        trap            ;failed not equal (non zero)
196b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
196e :                 >skip0297
                       >
196e : a515            >            lda zpt+3       ;checksum high is
1970 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1973 : f003            >        beq skip0299
                       >        trap            ;failed not equal (non zero)
1975 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1978 :                 >skip0299
                       >
                       >
                        
                        
1978 : 8d04ef            sta $ef04
197b : 5043206d6f6469..  db "PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)", 10, 0
19c5 : 8d04ef            sta $ef04
19c8 : 74657374696e67..  db "testing NOP", 10, 0
19d5 : a224                     ldx #$24
19d7 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
19d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
19db : 48              >            pha         ;use stack to load status
19dc : a918            >            lda #$18     ;precharge accu
19de : 28              >            plp
                        
19df : ea                       nop
                                tst_a $18,0
19e0 : 08              >            php         ;save flags
19e1 : c918            >            cmp #$18     ;test result
                       >            trap_ne
19e3 : f003            >        beq skip0304
                       >        trap            ;failed not equal (non zero)
19e5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
19e8 :                 >skip0304
                       >
19e8 : 68              >            pla         ;load status
19e9 : 48              >            pha
                       >            cmp_flag 0
19ea : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
19ec : f003            >        beq skip0307
                       >        trap            ;failed not equal (non zero)
19ee : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
19f1 :                 >skip0307
                       >
19f1 : 28              >            plp         ;restore status
                        
19f2 : e024                     cpx #$24
                                trap_ne
19f4 : f003            >        beq skip0309
                       >        trap            ;failed not equal (non zero)
19f6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
19f9 :                 >skip0309
                        
19f9 : c042                     cpy #$42
                                trap_ne
19fb : f003            >        beq skip0311
                       >        trap            ;failed not equal (non zero)
19fd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a00 :                 >skip0311
                        
1a00 : a2db                     ldx #$db
1a02 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
1a04 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a06 : 48              >            pha         ;use stack to load status
1a07 : a9e7            >            lda #$e7     ;precharge accu
1a09 : 28              >            plp
                        
1a0a : ea                       nop
                                tst_a $e7,$ff
1a0b : 08              >            php         ;save flags
1a0c : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
1a0e : f003            >        beq skip0316
                       >        trap            ;failed not equal (non zero)
1a10 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a13 :                 >skip0316
                       >
1a13 : 68              >            pla         ;load status
1a14 : 48              >            pha
                       >            cmp_flag $ff
1a15 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1a17 : f003            >        beq skip0319
                       >        trap            ;failed not equal (non zero)
1a19 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a1c :                 >skip0319
                       >
1a1c : 28              >            plp         ;restore status
                        
1a1d : e0db                     cpx #$db
                                trap_ne
1a1f : f003            >        beq skip0321
                       >        trap            ;failed not equal (non zero)
1a21 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a24 :                 >skip0321
                        
1a24 : c0bd                     cpy #$bd
                                trap_ne
1a26 : f003            >        beq skip0323
                       >        trap            ;failed not equal (non zero)
1a28 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a2b :                 >skip0323
                        
                                next_test
1a2b : ad0002          >            lda test_case   ;previous test
1a2e : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1a30 : f003            >        beq skip0326
                       >        trap            ;failed not equal (non zero)
1a32 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a35 :                 >skip0326
                       >
0008 =                 >test_num = test_num + 1
1a35 : a908            >            lda #test_num   ;*** next tests' number
1a37 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1a3a : d8              >            cld
1a3b : a900            >            lda #0
1a3d : 8512            >            sta zpt         ;set low byte of indirect pointer
1a3f : 8515            >            sta zpt+3       ;checksum high byte
1a41 : 8dbb11          >            sta range_adr   ;reset self modifying code
1a44 : 8dfb57          >            sta tandi1
1a47 : 8d2258          >            sta tandi2
1a4a : 8dbc5a          >            sta teori1
1a4d : 8de35a          >            sta teori2
1a50 : 8d7c5d          >            sta torai1
1a53 : 8da35d          >            sta torai2
1a56 : 8dba63          >            sta chkdadi  
1a59 : 8dd763          >            sta chkdsbi
1a5c : 8d6365          >            sta chkadi
1a5f : 8d8065          >            sta chksbi
1a62 : 18              >            clc
1a63 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1a65 : 7510            >ccs30328      adc zero_page,x
1a67 : 9003            >            bcc ccs20328
1a69 : e615            >            inc zpt+3       ;carry to high byte
1a6b : 18              >            clc
1a6c : e8              >ccs20328      inx
1a6d : d0f6            >            bne ccs30328
1a6f : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1a71 : 8613            >            stx zpt+1
1a73 : a008            >            ldy #lo(data_bss) ;data after write test area
1a75 : 7112            >ccs50328      adc (zpt),y
1a77 : 9003            >            bcc ccs40328
1a79 : e615            >            inc zpt+3       ;carry to high byte
1a7b : 18              >            clc
1a7c : c8              >ccs40328      iny
1a7d : d0f6            >            bne ccs50328
1a7f : e8              >            inx             ;advance RAM high address
1a80 : 8613            >            stx zpt+1
1a82 : e0e0            >            cpx #ram_top
1a84 : d0ef            >            bne ccs50328
1a86 : 8514            >            sta zpt+2       ;checksum low is
1a88 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1a8b : f003            >        beq skip0329
                       >        trap            ;failed not equal (non zero)
1a8d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a90 :                 >skip0329
                       >
1a90 : a515            >            lda zpt+3       ;checksum high is
1a92 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1a95 : f003            >        beq skip0331
                       >        trap            ;failed not equal (non zero)
1a97 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1a9a :                 >skip0331
                       >
                       >
                        
                                
1a9a : 8d04ef            sta $ef04
1a9d : 6a756d70206162..  db "jump absolute", 10, 0
                                set_stat $0
                       >            load_flag $0
1aac : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
1aae : 48              >            pha         ;use stack to load status
1aaf : 28              >            plp
                        
1ab0 : a946                     lda #'F'
1ab2 : a241                     ldx #'A'
1ab4 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
1ab6 : 4c8b66                   jmp test_far
1ab9 : ea                       nop
1aba : ea                       nop
                                trap_ne         ;runover protection
1abb : f003            >        beq skip0335
                       >        trap            ;failed not equal (non zero)
1abd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ac0 :                 >skip0335
                        
1ac0 : e8                       inx
1ac1 : e8                       inx
1ac2 :                  far_ret 
                                trap_eq         ;returned flags OK?
1ac2 : d003            >        bne skip0337
                       >        trap           ;failed equal (zero)
1ac4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ac7 :                 >skip0337
                        
                                trap_pl
1ac7 : 3003            >        bmi skip0339
                       >        trap            ;failed plus (bit 7 clear)
1ac9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1acc :                 >skip0339
                        
                                trap_cc
1acc : b003            >        bcs skip0341
                       >        trap            ;failed carry clear
1ace : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ad1 :                 >skip0341
                        
                                trap_vc
1ad1 : 7003            >        bvs skip0343
                       >        trap            ;failed overflow clear
1ad3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ad6 :                 >skip0343
                        
1ad6 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
1ad8 : f003            >        beq skip0345
                       >        trap            ;failed not equal (non zero)
1ada : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1add :                 >skip0345
                        
1add : e042                     cpx #('A'+1)
                                trap_ne
1adf : f003            >        beq skip0347
                       >        trap            ;failed not equal (non zero)
1ae1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ae4 :                 >skip0347
                        
1ae4 : c04f                     cpy #('R'-3)
                                trap_ne
1ae6 : f003            >        beq skip0349
                       >        trap            ;failed not equal (non zero)
1ae8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1aeb :                 >skip0349
                        
1aeb : ca                       dex
1aec : c8                       iny
1aed : c8                       iny
1aee : c8                       iny
1aef : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
1af1 : 4cfd1a                   jmp test_near
1af4 : ea                       nop
1af5 : ea                       nop
                                trap_ne         ;runover protection
1af6 : f003            >        beq skip0351
                       >        trap            ;failed not equal (non zero)
1af8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1afb :                 >skip0351
                        
1afb : e8                       inx
1afc : e8                       inx
1afd :                  test_near
                                trap_eq         ;passed flags OK?
1afd : d003            >        bne skip0353
                       >        trap           ;failed equal (zero)
1aff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b02 :                 >skip0353
                        
                                trap_mi
1b02 : 1003            >        bpl skip0355
                       >        trap            ;failed minus (bit 7 set)
1b04 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b07 :                 >skip0355
                        
                                trap_cc
1b07 : b003            >        bcs skip0357
                       >        trap            ;failed carry clear
1b09 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b0c :                 >skip0357
                        
                                trap_vc
1b0c : 7003            >        bvs skip0359
                       >        trap            ;failed overflow clear
1b0e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b11 :                 >skip0359
                        
1b11 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
1b13 : f003            >        beq skip0361
                       >        trap            ;failed not equal (non zero)
1b15 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b18 :                 >skip0361
                        
1b18 : e041                     cpx #'A'
                                trap_ne
1b1a : f003            >        beq skip0363
                       >        trap            ;failed not equal (non zero)
1b1c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b1f :                 >skip0363
                        
1b1f : c052                     cpy #'R'
                                trap_ne
1b21 : f003            >        beq skip0365
                       >        trap            ;failed not equal (non zero)
1b23 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b26 :                 >skip0365
                        
                                next_test
1b26 : ad0002          >            lda test_case   ;previous test
1b29 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1b2b : f003            >        beq skip0368
                       >        trap            ;failed not equal (non zero)
1b2d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b30 :                 >skip0368
                       >
0009 =                 >test_num = test_num + 1
1b30 : a909            >            lda #test_num   ;*** next tests' number
1b32 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1b35 : d8              >            cld
1b36 : a900            >            lda #0
1b38 : 8512            >            sta zpt         ;set low byte of indirect pointer
1b3a : 8515            >            sta zpt+3       ;checksum high byte
1b3c : 8dbb11          >            sta range_adr   ;reset self modifying code
1b3f : 8dfb57          >            sta tandi1
1b42 : 8d2258          >            sta tandi2
1b45 : 8dbc5a          >            sta teori1
1b48 : 8de35a          >            sta teori2
1b4b : 8d7c5d          >            sta torai1
1b4e : 8da35d          >            sta torai2
1b51 : 8dba63          >            sta chkdadi  
1b54 : 8dd763          >            sta chkdsbi
1b57 : 8d6365          >            sta chkadi
1b5a : 8d8065          >            sta chksbi
1b5d : 18              >            clc
1b5e : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1b60 : 7510            >ccs30370      adc zero_page,x
1b62 : 9003            >            bcc ccs20370
1b64 : e615            >            inc zpt+3       ;carry to high byte
1b66 : 18              >            clc
1b67 : e8              >ccs20370      inx
1b68 : d0f6            >            bne ccs30370
1b6a : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1b6c : 8613            >            stx zpt+1
1b6e : a008            >            ldy #lo(data_bss) ;data after write test area
1b70 : 7112            >ccs50370      adc (zpt),y
1b72 : 9003            >            bcc ccs40370
1b74 : e615            >            inc zpt+3       ;carry to high byte
1b76 : 18              >            clc
1b77 : c8              >ccs40370      iny
1b78 : d0f6            >            bne ccs50370
1b7a : e8              >            inx             ;advance RAM high address
1b7b : 8613            >            stx zpt+1
1b7d : e0e0            >            cpx #ram_top
1b7f : d0ef            >            bne ccs50370
1b81 : 8514            >            sta zpt+2       ;checksum low is
1b83 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1b86 : f003            >        beq skip0371
                       >        trap            ;failed not equal (non zero)
1b88 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b8b :                 >skip0371
                       >
1b8b : a515            >            lda zpt+3       ;checksum high is
1b8d : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1b90 : f003            >        beq skip0373
                       >        trap            ;failed not equal (non zero)
1b92 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1b95 :                 >skip0373
                       >
                       >
                        
                                
1b95 : 8d04ef            sta $ef04
1b98 : 6a756d7020696e..  db "jump indirect", 10, 0
                                set_stat 0
                       >            load_flag 0
1ba7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ba9 : 48              >            pha         ;use stack to load status
1baa : 28              >            plp
                        
1bab : a949                     lda #'I'
1bad : a24e                     ldx #'N'
1baf : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
1bb1 : 6cd266                   jmp (ptr_tst_ind)
1bb4 : ea                       nop
                                trap_ne         ;runover protection
1bb5 : f003            >        beq skip0377
                       >        trap            ;failed not equal (non zero)
1bb7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bba :                 >skip0377
                        
1bba : 88                       dey
1bbb : 88                       dey
1bbc :                  ind_ret 
1bbc : 08                       php             ;either SP or Y count will fail, if we do not hit
1bbd : 88                       dey
1bbe : 88                       dey
1bbf : 88                       dey
1bc0 : 28                       plp
                                trap_eq         ;returned flags OK?
1bc1 : d003            >        bne skip0379
                       >        trap           ;failed equal (zero)
1bc3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bc6 :                 >skip0379
                        
                                trap_pl
1bc6 : 3003            >        bmi skip0381
                       >        trap            ;failed plus (bit 7 clear)
1bc8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bcb :                 >skip0381
                        
                                trap_cc
1bcb : b003            >        bcs skip0383
                       >        trap            ;failed carry clear
1bcd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bd0 :                 >skip0383
                        
                                trap_vc
1bd0 : 7003            >        bvs skip0385
                       >        trap            ;failed overflow clear
1bd2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bd5 :                 >skip0385
                        
1bd5 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
1bd7 : f003            >        beq skip0387
                       >        trap            ;failed not equal (non zero)
1bd9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bdc :                 >skip0387
                        
1bdc : e04f                     cpx #('N'+1)
                                trap_ne
1bde : f003            >        beq skip0389
                       >        trap            ;failed not equal (non zero)
1be0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1be3 :                 >skip0389
                        
1be3 : c03e                     cpy #('D'-6)
                                trap_ne
1be5 : f003            >        beq skip0391
                       >        trap            ;failed not equal (non zero)
1be7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bea :                 >skip0391
                        
1bea : ba                       tsx             ;SP check
1beb : e0ff                     cpx #$ff
                                trap_ne
1bed : f003            >        beq skip0393
                       >        trap            ;failed not equal (non zero)
1bef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bf2 :                 >skip0393
                        
                                next_test
1bf2 : ad0002          >            lda test_case   ;previous test
1bf5 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1bf7 : f003            >        beq skip0396
                       >        trap            ;failed not equal (non zero)
1bf9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1bfc :                 >skip0396
                       >
000a =                 >test_num = test_num + 1
1bfc : a90a            >            lda #test_num   ;*** next tests' number
1bfe : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1c01 : d8              >            cld
1c02 : a900            >            lda #0
1c04 : 8512            >            sta zpt         ;set low byte of indirect pointer
1c06 : 8515            >            sta zpt+3       ;checksum high byte
1c08 : 8dbb11          >            sta range_adr   ;reset self modifying code
1c0b : 8dfb57          >            sta tandi1
1c0e : 8d2258          >            sta tandi2
1c11 : 8dbc5a          >            sta teori1
1c14 : 8de35a          >            sta teori2
1c17 : 8d7c5d          >            sta torai1
1c1a : 8da35d          >            sta torai2
1c1d : 8dba63          >            sta chkdadi  
1c20 : 8dd763          >            sta chkdsbi
1c23 : 8d6365          >            sta chkadi
1c26 : 8d8065          >            sta chksbi
1c29 : 18              >            clc
1c2a : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1c2c : 7510            >ccs30398      adc zero_page,x
1c2e : 9003            >            bcc ccs20398
1c30 : e615            >            inc zpt+3       ;carry to high byte
1c32 : 18              >            clc
1c33 : e8              >ccs20398      inx
1c34 : d0f6            >            bne ccs30398
1c36 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1c38 : 8613            >            stx zpt+1
1c3a : a008            >            ldy #lo(data_bss) ;data after write test area
1c3c : 7112            >ccs50398      adc (zpt),y
1c3e : 9003            >            bcc ccs40398
1c40 : e615            >            inc zpt+3       ;carry to high byte
1c42 : 18              >            clc
1c43 : c8              >ccs40398      iny
1c44 : d0f6            >            bne ccs50398
1c46 : e8              >            inx             ;advance RAM high address
1c47 : 8613            >            stx zpt+1
1c49 : e0e0            >            cpx #ram_top
1c4b : d0ef            >            bne ccs50398
1c4d : 8514            >            sta zpt+2       ;checksum low is
1c4f : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1c52 : f003            >        beq skip0399
                       >        trap            ;failed not equal (non zero)
1c54 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1c57 :                 >skip0399
                       >
1c57 : a515            >            lda zpt+3       ;checksum high is
1c59 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1c5c : f003            >        beq skip0401
                       >        trap            ;failed not equal (non zero)
1c5e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1c61 :                 >skip0401
                       >
                       >
                        
                        
1c61 : 8d04ef            sta $ef04
1c64 : 6a756d70207375..  db "jump subroutine & return from subroutine", 10, 0
                                set_stat 0
                       >            load_flag 0
1c8e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c90 : 48              >            pha         ;use stack to load status
1c91 : 28              >            plp
                        
1c92 : a94a                     lda #'J'
1c94 : a253                     ldx #'S'
1c96 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
1c98 : 202667                   jsr test_jsr
1c9a =                  jsr_ret = *-1           ;last address of jsr = return address
1c9b : 08                       php             ;either SP or Y count will fail, if we do not hit
1c9c : 88                       dey
1c9d : 88                       dey
1c9e : 88                       dey
1c9f : 28                       plp
                                trap_eq         ;returned flags OK?
1ca0 : d003            >        bne skip0405
                       >        trap           ;failed equal (zero)
1ca2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ca5 :                 >skip0405
                        
                                trap_pl
1ca5 : 3003            >        bmi skip0407
                       >        trap            ;failed plus (bit 7 clear)
1ca7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1caa :                 >skip0407
                        
                                trap_cc
1caa : b003            >        bcs skip0409
                       >        trap            ;failed carry clear
1cac : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1caf :                 >skip0409
                        
                                trap_vc
1caf : 7003            >        bvs skip0411
                       >        trap            ;failed overflow clear
1cb1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cb4 :                 >skip0411
                        
1cb4 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
1cb6 : f003            >        beq skip0413
                       >        trap            ;failed not equal (non zero)
1cb8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cbb :                 >skip0413
                        
1cbb : e054                     cpx #('S'+1)
                                trap_ne
1cbd : f003            >        beq skip0415
                       >        trap            ;failed not equal (non zero)
1cbf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cc2 :                 >skip0415
                        
1cc2 : c04c                     cpy #('R'-6)
                                trap_ne
1cc4 : f003            >        beq skip0417
                       >        trap            ;failed not equal (non zero)
1cc6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cc9 :                 >skip0417
                        
1cc9 : ba                       tsx             ;sp?
1cca : e0ff                     cpx #$ff
                                trap_ne
1ccc : f003            >        beq skip0419
                       >        trap            ;failed not equal (non zero)
1cce : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cd1 :                 >skip0419
                        
                                next_test
1cd1 : ad0002          >            lda test_case   ;previous test
1cd4 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1cd6 : f003            >        beq skip0422
                       >        trap            ;failed not equal (non zero)
1cd8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1cdb :                 >skip0422
                       >
000b =                 >test_num = test_num + 1
1cdb : a90b            >            lda #test_num   ;*** next tests' number
1cdd : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1ce0 : d8              >            cld
1ce1 : a900            >            lda #0
1ce3 : 8512            >            sta zpt         ;set low byte of indirect pointer
1ce5 : 8515            >            sta zpt+3       ;checksum high byte
1ce7 : 8dbb11          >            sta range_adr   ;reset self modifying code
1cea : 8dfb57          >            sta tandi1
1ced : 8d2258          >            sta tandi2
1cf0 : 8dbc5a          >            sta teori1
1cf3 : 8de35a          >            sta teori2
1cf6 : 8d7c5d          >            sta torai1
1cf9 : 8da35d          >            sta torai2
1cfc : 8dba63          >            sta chkdadi  
1cff : 8dd763          >            sta chkdsbi
1d02 : 8d6365          >            sta chkadi
1d05 : 8d8065          >            sta chksbi
1d08 : 18              >            clc
1d09 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1d0b : 7510            >ccs30424      adc zero_page,x
1d0d : 9003            >            bcc ccs20424
1d0f : e615            >            inc zpt+3       ;carry to high byte
1d11 : 18              >            clc
1d12 : e8              >ccs20424      inx
1d13 : d0f6            >            bne ccs30424
1d15 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1d17 : 8613            >            stx zpt+1
1d19 : a008            >            ldy #lo(data_bss) ;data after write test area
1d1b : 7112            >ccs50424      adc (zpt),y
1d1d : 9003            >            bcc ccs40424
1d1f : e615            >            inc zpt+3       ;carry to high byte
1d21 : 18              >            clc
1d22 : c8              >ccs40424      iny
1d23 : d0f6            >            bne ccs50424
1d25 : e8              >            inx             ;advance RAM high address
1d26 : 8613            >            stx zpt+1
1d28 : e0e0            >            cpx #ram_top
1d2a : d0ef            >            bne ccs50424
1d2c : 8514            >            sta zpt+2       ;checksum low is
1d2e : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1d31 : f003            >        beq skip0425
                       >        trap            ;failed not equal (non zero)
1d33 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d36 :                 >skip0425
                       >
1d36 : a515            >            lda zpt+3       ;checksum high is
1d38 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1d3b : f003            >        beq skip0427
                       >        trap            ;failed not equal (non zero)
1d3d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d40 :                 >skip0427
                       >
                       >
                        
                        
1d40 : 8d04ef            sta $ef04
1d43 : 627265616b2026..  db "break & return from interrupt", 10, 0
                            if ROM_vectors = 1
                                set_stat 0
                       >            load_flag 0
1d62 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d64 : 48              >            pha         ;use stack to load status
1d65 : 28              >            plp
                        
1d66 : a942                     lda #'B'
1d68 : a252                     ldx #'R'
1d6a : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
1d6c : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #fao        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
1d6d : 88                       dey             ;should not be executed
1d6e :                  brk_ret                 ;address of break return
1d6e : 08                       php             ;either SP or Y count will fail, if we do not hit
1d6f : 88                       dey
1d70 : 88                       dey
1d71 : 88                       dey
1d72 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
                                trap_ne
1d74 : f003            >        beq skip0431
                       >        trap            ;failed not equal (non zero)
1d76 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d79 :                 >skip0431
                        
1d79 : e053                     cpx #('R'+1)
                                trap_ne
1d7b : f003            >        beq skip0433
                       >        trap            ;failed not equal (non zero)
1d7d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d80 :                 >skip0433
                        
1d80 : c045                     cpy #('K'-6)
                                trap_ne
1d82 : f003            >        beq skip0435
                       >        trap            ;failed not equal (non zero)
1d84 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d87 :                 >skip0435
                        
1d87 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
1d88 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
1d8a : f003            >        beq skip0438
                       >        trap            ;failed not equal (non zero)
1d8c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d8f :                 >skip0438
                        
1d8f : ba                       tsx             ;sp?
1d90 : e0ff                     cpx #$ff
                                trap_ne
1d92 : f003            >        beq skip0440
                       >        trap            ;failed not equal (non zero)
1d94 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1d97 :                 >skip0440
                        
                                next_test
1d97 : ad0002          >            lda test_case   ;previous test
1d9a : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1d9c : f003            >        beq skip0443
                       >        trap            ;failed not equal (non zero)
1d9e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1da1 :                 >skip0443
                       >
000c =                 >test_num = test_num + 1
1da1 : a90c            >            lda #test_num   ;*** next tests' number
1da3 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1da6 : d8              >            cld
1da7 : a900            >            lda #0
1da9 : 8512            >            sta zpt         ;set low byte of indirect pointer
1dab : 8515            >            sta zpt+3       ;checksum high byte
1dad : 8dbb11          >            sta range_adr   ;reset self modifying code
1db0 : 8dfb57          >            sta tandi1
1db3 : 8d2258          >            sta tandi2
1db6 : 8dbc5a          >            sta teori1
1db9 : 8de35a          >            sta teori2
1dbc : 8d7c5d          >            sta torai1
1dbf : 8da35d          >            sta torai2
1dc2 : 8dba63          >            sta chkdadi  
1dc5 : 8dd763          >            sta chkdsbi
1dc8 : 8d6365          >            sta chkadi
1dcb : 8d8065          >            sta chksbi
1dce : 18              >            clc
1dcf : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1dd1 : 7510            >ccs30445      adc zero_page,x
1dd3 : 9003            >            bcc ccs20445
1dd5 : e615            >            inc zpt+3       ;carry to high byte
1dd7 : 18              >            clc
1dd8 : e8              >ccs20445      inx
1dd9 : d0f6            >            bne ccs30445
1ddb : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1ddd : 8613            >            stx zpt+1
1ddf : a008            >            ldy #lo(data_bss) ;data after write test area
1de1 : 7112            >ccs50445      adc (zpt),y
1de3 : 9003            >            bcc ccs40445
1de5 : e615            >            inc zpt+3       ;carry to high byte
1de7 : 18              >            clc
1de8 : c8              >ccs40445      iny
1de9 : d0f6            >            bne ccs50445
1deb : e8              >            inx             ;advance RAM high address
1dec : 8613            >            stx zpt+1
1dee : e0e0            >            cpx #ram_top
1df0 : d0ef            >            bne ccs50445
1df2 : 8514            >            sta zpt+2       ;checksum low is
1df4 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1df7 : f003            >        beq skip0446
                       >        trap            ;failed not equal (non zero)
1df9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1dfc :                 >skip0446
                       >
1dfc : a515            >            lda zpt+3       ;checksum high is
1dfe : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1e01 : f003            >        beq skip0448
                       >        trap            ;failed not equal (non zero)
1e03 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e06 :                 >skip0448
                       >
                       >
                        
                         
1e06 : 8d04ef            sta $ef04
1e09 : 74657374207365..  db "test set and clear flags CLC CLI CLD CLV SEC SEI SED", 10, 0
                                set_stat $ff
                       >            load_flag $ff
1e3f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e41 : 48              >            pha         ;use stack to load status
1e42 : 28              >            plp
                        
1e43 : 18                       clc
                                tst_stat $ff-carry
1e44 : 08              >            php         ;save status
1e45 : 68              >            pla         ;use stack to retrieve status
1e46 : 48              >            pha
                       >            cmp_flag $ff-carry
1e47 : c9fe            >            cmp #($ff-carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e49 : f003            >        beq skip0454
                       >        trap            ;failed not equal (non zero)
1e4b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e4e :                 >skip0454
                       >
1e4e : 28              >            plp         ;restore status
                        
1e4f : 38                       sec
                                tst_stat $ff
1e50 : 08              >            php         ;save status
1e51 : 68              >            pla         ;use stack to retrieve status
1e52 : 48              >            pha
                       >            cmp_flag $ff
1e53 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e55 : f003            >        beq skip0458
                       >        trap            ;failed not equal (non zero)
1e57 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e5a :                 >skip0458
                       >
1e5a : 28              >            plp         ;restore status
                        
                            if I_flag = 3
1e5b : 58                       cli
                                tst_stat $ff-intdis
1e5c : 08              >            php         ;save status
1e5d : 68              >            pla         ;use stack to retrieve status
1e5e : 48              >            pha
                       >            cmp_flag $ff-intdis
1e5f : c9fb            >            cmp #($ff-intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e61 : f003            >        beq skip0462
                       >        trap            ;failed not equal (non zero)
1e63 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e66 :                 >skip0462
                       >
1e66 : 28              >            plp         ;restore status
                        
1e67 : 78                       sei
                                tst_stat $ff
1e68 : 08              >            php         ;save status
1e69 : 68              >            pla         ;use stack to retrieve status
1e6a : 48              >            pha
                       >            cmp_flag $ff
1e6b : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e6d : f003            >        beq skip0466
                       >        trap            ;failed not equal (non zero)
1e6f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e72 :                 >skip0466
                       >
1e72 : 28              >            plp         ;restore status
                        
                            endif
1e73 : d8                       cld
                                tst_stat $ff-decmode
1e74 : 08              >            php         ;save status
1e75 : 68              >            pla         ;use stack to retrieve status
1e76 : 48              >            pha
                       >            cmp_flag $ff-decmode
1e77 : c9f7            >            cmp #($ff-decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e79 : f003            >        beq skip0470
                       >        trap            ;failed not equal (non zero)
1e7b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e7e :                 >skip0470
                       >
1e7e : 28              >            plp         ;restore status
                        
1e7f : f8                       sed
                                tst_stat $ff
1e80 : 08              >            php         ;save status
1e81 : 68              >            pla         ;use stack to retrieve status
1e82 : 48              >            pha
                       >            cmp_flag $ff
1e83 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e85 : f003            >        beq skip0474
                       >        trap            ;failed not equal (non zero)
1e87 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e8a :                 >skip0474
                       >
1e8a : 28              >            plp         ;restore status
                        
1e8b : b8                       clv
                                tst_stat $ff-overfl
1e8c : 08              >            php         ;save status
1e8d : 68              >            pla         ;use stack to retrieve status
1e8e : 48              >            pha
                       >            cmp_flag $ff-overfl
1e8f : c9bf            >            cmp #($ff-overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1e91 : f003            >        beq skip0478
                       >        trap            ;failed not equal (non zero)
1e93 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1e96 :                 >skip0478
                       >
1e96 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
1e97 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e99 : 48              >            pha         ;use stack to load status
1e9a : 28              >            plp
                        
                                tst_stat 0
1e9b : 08              >            php         ;save status
1e9c : 68              >            pla         ;use stack to retrieve status
1e9d : 48              >            pha
                       >            cmp_flag 0
1e9e : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ea0 : f003            >        beq skip0484
                       >        trap            ;failed not equal (non zero)
1ea2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ea5 :                 >skip0484
                       >
1ea5 : 28              >            plp         ;restore status
                        
1ea6 : 38                       sec
                                tst_stat carry
1ea7 : 08              >            php         ;save status
1ea8 : 68              >            pla         ;use stack to retrieve status
1ea9 : 48              >            pha
                       >            cmp_flag carry
1eaa : c931            >            cmp #(carry|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1eac : f003            >        beq skip0488
                       >        trap            ;failed not equal (non zero)
1eae : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1eb1 :                 >skip0488
                       >
1eb1 : 28              >            plp         ;restore status
                        
1eb2 : 18                       clc
                                tst_stat 0  
1eb3 : 08              >            php         ;save status
1eb4 : 68              >            pla         ;use stack to retrieve status
1eb5 : 48              >            pha
                       >            cmp_flag 0  
1eb6 : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1eb8 : f003            >        beq skip0492
                       >        trap            ;failed not equal (non zero)
1eba : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ebd :                 >skip0492
                       >
1ebd : 28              >            plp         ;restore status
                        
                            if I_flag = 3
1ebe : 78                       sei
                                tst_stat intdis
1ebf : 08              >            php         ;save status
1ec0 : 68              >            pla         ;use stack to retrieve status
1ec1 : 48              >            pha
                       >            cmp_flag intdis
1ec2 : c934            >            cmp #(intdis|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ec4 : f003            >        beq skip0496
                       >        trap            ;failed not equal (non zero)
1ec6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ec9 :                 >skip0496
                       >
1ec9 : 28              >            plp         ;restore status
                        
1eca : 58                       cli
                                tst_stat 0
1ecb : 08              >            php         ;save status
1ecc : 68              >            pla         ;use stack to retrieve status
1ecd : 48              >            pha
                       >            cmp_flag 0
1ece : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ed0 : f003            >        beq skip0500
                       >        trap            ;failed not equal (non zero)
1ed2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ed5 :                 >skip0500
                       >
1ed5 : 28              >            plp         ;restore status
                        
                            endif  
1ed6 : f8                       sed
                                tst_stat decmode
1ed7 : 08              >            php         ;save status
1ed8 : 68              >            pla         ;use stack to retrieve status
1ed9 : 48              >            pha
                       >            cmp_flag decmode
1eda : c938            >            cmp #(decmode|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1edc : f003            >        beq skip0504
                       >        trap            ;failed not equal (non zero)
1ede : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ee1 :                 >skip0504
                       >
1ee1 : 28              >            plp         ;restore status
                        
1ee2 : d8                       cld
                                tst_stat 0  
1ee3 : 08              >            php         ;save status
1ee4 : 68              >            pla         ;use stack to retrieve status
1ee5 : 48              >            pha
                       >            cmp_flag 0  
1ee6 : c930            >            cmp #(0  |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ee8 : f003            >        beq skip0508
                       >        trap            ;failed not equal (non zero)
1eea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1eed :                 >skip0508
                       >
1eed : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
1eee : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
1ef0 : 48              >            pha         ;use stack to load status
1ef1 : 28              >            plp
                        
                                tst_stat overfl
1ef2 : 08              >            php         ;save status
1ef3 : 68              >            pla         ;use stack to retrieve status
1ef4 : 48              >            pha
                       >            cmp_flag overfl
1ef5 : c970            >            cmp #(overfl|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1ef7 : f003            >        beq skip0514
                       >        trap            ;failed not equal (non zero)
1ef9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1efc :                 >skip0514
                       >
1efc : 28              >            plp         ;restore status
                        
1efd : b8                       clv
                                tst_stat 0
1efe : 08              >            php         ;save status
1eff : 68              >            pla         ;use stack to retrieve status
1f00 : 48              >            pha
                       >            cmp_flag 0
1f01 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1f03 : f003            >        beq skip0518
                       >        trap            ;failed not equal (non zero)
1f05 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1f08 :                 >skip0518
                       >
1f08 : 28              >            plp         ;restore status
                        
                                next_test
1f09 : ad0002          >            lda test_case   ;previous test
1f0c : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f0e : f003            >        beq skip0521
                       >        trap            ;failed not equal (non zero)
1f10 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1f13 :                 >skip0521
                       >
000d =                 >test_num = test_num + 1
1f13 : a90d            >            lda #test_num   ;*** next tests' number
1f15 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
1f18 : d8              >            cld
1f19 : a900            >            lda #0
1f1b : 8512            >            sta zpt         ;set low byte of indirect pointer
1f1d : 8515            >            sta zpt+3       ;checksum high byte
1f1f : 8dbb11          >            sta range_adr   ;reset self modifying code
1f22 : 8dfb57          >            sta tandi1
1f25 : 8d2258          >            sta tandi2
1f28 : 8dbc5a          >            sta teori1
1f2b : 8de35a          >            sta teori2
1f2e : 8d7c5d          >            sta torai1
1f31 : 8da35d          >            sta torai2
1f34 : 8dba63          >            sta chkdadi  
1f37 : 8dd763          >            sta chkdsbi
1f3a : 8d6365          >            sta chkadi
1f3d : 8d8065          >            sta chksbi
1f40 : 18              >            clc
1f41 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
1f43 : 7510            >ccs30523      adc zero_page,x
1f45 : 9003            >            bcc ccs20523
1f47 : e615            >            inc zpt+3       ;carry to high byte
1f49 : 18              >            clc
1f4a : e8              >ccs20523      inx
1f4b : d0f6            >            bne ccs30523
1f4d : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
1f4f : 8613            >            stx zpt+1
1f51 : a008            >            ldy #lo(data_bss) ;data after write test area
1f53 : 7112            >ccs50523      adc (zpt),y
1f55 : 9003            >            bcc ccs40523
1f57 : e615            >            inc zpt+3       ;carry to high byte
1f59 : 18              >            clc
1f5a : c8              >ccs40523      iny
1f5b : d0f6            >            bne ccs50523
1f5d : e8              >            inx             ;advance RAM high address
1f5e : 8613            >            stx zpt+1
1f60 : e0e0            >            cpx #ram_top
1f62 : d0ef            >            bne ccs50523
1f64 : 8514            >            sta zpt+2       ;checksum low is
1f66 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
1f69 : f003            >        beq skip0524
                       >        trap            ;failed not equal (non zero)
1f6b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1f6e :                 >skip0524
                       >
1f6e : a515            >            lda zpt+3       ;checksum high is
1f70 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
1f73 : f003            >        beq skip0526
                       >        trap            ;failed not equal (non zero)
1f75 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1f78 :                 >skip0526
                       >
                       >
                        
1f78 : 8d04ef            sta $ef04
1f7b : 74657374696e67..  db "testing index register increment/decrement and transfer", 10, 0
1fb4 : 8d04ef            sta $ef04
1fb7 : 494e5820494e59..  db "INX INY DEX DEY TAX TXA TAY TYA ", 10, 0
1fd9 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
1fdb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fdd : 48              >            pha         ;use stack to load status
1fde : 28              >            plp
                        
1fdf : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
1fe0 : 08              >            php         ;save flags
1fe1 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
1fe3 : f003            >        beq skip0531
                       >        trap            ;failed not equal (non zero)
1fe5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1fe8 :                 >skip0531
                       >
1fe8 : 68              >            pla         ;load status
1fe9 : 48              >            pha
                       >            cmp_flag $ff-zero
1fea : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1fec : f003            >        beq skip0534
                       >        trap            ;failed not equal (non zero)
1fee : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ff1 :                 >skip0534
                       >
1ff1 : 28              >            plp         ;restore status
                        
1ff2 : e8                       inx             ;00
                                tst_x 0,$ff-minus
1ff3 : 08              >            php         ;save flags
1ff4 : e000            >            cpx #0     ;test result
                       >            trap_ne
1ff6 : f003            >        beq skip0537
                       >        trap            ;failed not equal (non zero)
1ff8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
1ffb :                 >skip0537
                       >
1ffb : 68              >            pla         ;load status
1ffc : 48              >            pha
                       >            cmp_flag $ff-minus
1ffd : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
1fff : f003            >        beq skip0540
                       >        trap            ;failed not equal (non zero)
2001 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2004 :                 >skip0540
                       >
2004 : 28              >            plp         ;restore status
                        
2005 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
2006 : 08              >            php         ;save flags
2007 : e001            >            cpx #1     ;test result
                       >            trap_ne
2009 : f003            >        beq skip0543
                       >        trap            ;failed not equal (non zero)
200b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
200e :                 >skip0543
                       >
200e : 68              >            pla         ;load status
200f : 48              >            pha
                       >            cmp_flag $ff-minus-zero
2010 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2012 : f003            >        beq skip0546
                       >        trap            ;failed not equal (non zero)
2014 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2017 :                 >skip0546
                       >
2017 : 28              >            plp         ;restore status
                        
2018 : ca                       dex             ;00
                                tst_x 0,$ff-minus
2019 : 08              >            php         ;save flags
201a : e000            >            cpx #0     ;test result
                       >            trap_ne
201c : f003            >        beq skip0549
                       >        trap            ;failed not equal (non zero)
201e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2021 :                 >skip0549
                       >
2021 : 68              >            pla         ;load status
2022 : 48              >            pha
                       >            cmp_flag $ff-minus
2023 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2025 : f003            >        beq skip0552
                       >        trap            ;failed not equal (non zero)
2027 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
202a :                 >skip0552
                       >
202a : 28              >            plp         ;restore status
                        
202b : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
202c : 08              >            php         ;save flags
202d : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
202f : f003            >        beq skip0555
                       >        trap            ;failed not equal (non zero)
2031 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2034 :                 >skip0555
                       >
2034 : 68              >            pla         ;load status
2035 : 48              >            pha
                       >            cmp_flag $ff-zero
2036 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2038 : f003            >        beq skip0558
                       >        trap            ;failed not equal (non zero)
203a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
203d :                 >skip0558
                       >
203d : 28              >            plp         ;restore status
                        
203e : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
203f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2041 : 48              >            pha         ;use stack to load status
2042 : 28              >            plp
                        
2043 : e8                       inx             ;ff
                                tst_x $ff,minus
2044 : 08              >            php         ;save flags
2045 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
2047 : f003            >        beq skip0563
                       >        trap            ;failed not equal (non zero)
2049 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
204c :                 >skip0563
                       >
204c : 68              >            pla         ;load status
204d : 48              >            pha
                       >            cmp_flag minus
204e : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2050 : f003            >        beq skip0566
                       >        trap            ;failed not equal (non zero)
2052 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2055 :                 >skip0566
                       >
2055 : 28              >            plp         ;restore status
                        
2056 : e8                       inx             ;00
                                tst_x 0,zero
2057 : 08              >            php         ;save flags
2058 : e000            >            cpx #0     ;test result
                       >            trap_ne
205a : f003            >        beq skip0569
                       >        trap            ;failed not equal (non zero)
205c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
205f :                 >skip0569
                       >
205f : 68              >            pla         ;load status
2060 : 48              >            pha
                       >            cmp_flag zero
2061 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2063 : f003            >        beq skip0572
                       >        trap            ;failed not equal (non zero)
2065 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2068 :                 >skip0572
                       >
2068 : 28              >            plp         ;restore status
                        
2069 : e8                       inx             ;01
                                tst_x 1,0
206a : 08              >            php         ;save flags
206b : e001            >            cpx #1     ;test result
                       >            trap_ne
206d : f003            >        beq skip0575
                       >        trap            ;failed not equal (non zero)
206f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2072 :                 >skip0575
                       >
2072 : 68              >            pla         ;load status
2073 : 48              >            pha
                       >            cmp_flag 0
2074 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2076 : f003            >        beq skip0578
                       >        trap            ;failed not equal (non zero)
2078 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
207b :                 >skip0578
                       >
207b : 28              >            plp         ;restore status
                        
207c : ca                       dex             ;00
                                tst_x 0,zero
207d : 08              >            php         ;save flags
207e : e000            >            cpx #0     ;test result
                       >            trap_ne
2080 : f003            >        beq skip0581
                       >        trap            ;failed not equal (non zero)
2082 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2085 :                 >skip0581
                       >
2085 : 68              >            pla         ;load status
2086 : 48              >            pha
                       >            cmp_flag zero
2087 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2089 : f003            >        beq skip0584
                       >        trap            ;failed not equal (non zero)
208b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
208e :                 >skip0584
                       >
208e : 28              >            plp         ;restore status
                        
208f : ca                       dex             ;ff
                                tst_x $ff,minus
2090 : 08              >            php         ;save flags
2091 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
2093 : f003            >        beq skip0587
                       >        trap            ;failed not equal (non zero)
2095 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2098 :                 >skip0587
                       >
2098 : 68              >            pla         ;load status
2099 : 48              >            pha
                       >            cmp_flag minus
209a : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
209c : f003            >        beq skip0590
                       >        trap            ;failed not equal (non zero)
209e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20a1 :                 >skip0590
                       >
20a1 : 28              >            plp         ;restore status
                        
                        
20a2 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
20a4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20a6 : 48              >            pha         ;use stack to load status
20a7 : 28              >            plp
                        
20a8 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
20a9 : 08              >            php         ;save flags
20aa : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
20ac : f003            >        beq skip0595
                       >        trap            ;failed not equal (non zero)
20ae : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20b1 :                 >skip0595
                       >
20b1 : 68              >            pla         ;load status
20b2 : 48              >            pha
                       >            cmp_flag $ff-zero
20b3 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
20b5 : f003            >        beq skip0598
                       >        trap            ;failed not equal (non zero)
20b7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20ba :                 >skip0598
                       >
20ba : 28              >            plp         ;restore status
                        
20bb : c8                       iny             ;00
                                tst_y 0,$ff-minus
20bc : 08              >            php         ;save flags
20bd : c000            >            cpy #0     ;test result
                       >            trap_ne
20bf : f003            >        beq skip0601
                       >        trap            ;failed not equal (non zero)
20c1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20c4 :                 >skip0601
                       >
20c4 : 68              >            pla         ;load status
20c5 : 48              >            pha
                       >            cmp_flag $ff-minus
20c6 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
20c8 : f003            >        beq skip0604
                       >        trap            ;failed not equal (non zero)
20ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20cd :                 >skip0604
                       >
20cd : 28              >            plp         ;restore status
                        
20ce : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
20cf : 08              >            php         ;save flags
20d0 : c001            >            cpy #1     ;test result
                       >            trap_ne
20d2 : f003            >        beq skip0607
                       >        trap            ;failed not equal (non zero)
20d4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20d7 :                 >skip0607
                       >
20d7 : 68              >            pla         ;load status
20d8 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
20d9 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
20db : f003            >        beq skip0610
                       >        trap            ;failed not equal (non zero)
20dd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20e0 :                 >skip0610
                       >
20e0 : 28              >            plp         ;restore status
                        
20e1 : 88                       dey             ;00
                                tst_y 0,$ff-minus
20e2 : 08              >            php         ;save flags
20e3 : c000            >            cpy #0     ;test result
                       >            trap_ne
20e5 : f003            >        beq skip0613
                       >        trap            ;failed not equal (non zero)
20e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20ea :                 >skip0613
                       >
20ea : 68              >            pla         ;load status
20eb : 48              >            pha
                       >            cmp_flag $ff-minus
20ec : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
20ee : f003            >        beq skip0616
                       >        trap            ;failed not equal (non zero)
20f0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20f3 :                 >skip0616
                       >
20f3 : 28              >            plp         ;restore status
                        
20f4 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
20f5 : 08              >            php         ;save flags
20f6 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
20f8 : f003            >        beq skip0619
                       >        trap            ;failed not equal (non zero)
20fa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
20fd :                 >skip0619
                       >
20fd : 68              >            pla         ;load status
20fe : 48              >            pha
                       >            cmp_flag $ff-zero
20ff : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2101 : f003            >        beq skip0622
                       >        trap            ;failed not equal (non zero)
2103 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2106 :                 >skip0622
                       >
2106 : 28              >            plp         ;restore status
                        
2107 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
2108 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
210a : 48              >            pha         ;use stack to load status
210b : 28              >            plp
                        
210c : c8                       iny             ;ff
                                tst_y $ff,0+minus
210d : 08              >            php         ;save flags
210e : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
2110 : f003            >        beq skip0627
                       >        trap            ;failed not equal (non zero)
2112 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2115 :                 >skip0627
                       >
2115 : 68              >            pla         ;load status
2116 : 48              >            pha
                       >            cmp_flag 0+minus
2117 : c9b0            >            cmp #(0+minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2119 : f003            >        beq skip0630
                       >        trap            ;failed not equal (non zero)
211b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
211e :                 >skip0630
                       >
211e : 28              >            plp         ;restore status
                        
211f : c8                       iny             ;00
                                tst_y 0,zero
2120 : 08              >            php         ;save flags
2121 : c000            >            cpy #0     ;test result
                       >            trap_ne
2123 : f003            >        beq skip0633
                       >        trap            ;failed not equal (non zero)
2125 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2128 :                 >skip0633
                       >
2128 : 68              >            pla         ;load status
2129 : 48              >            pha
                       >            cmp_flag zero
212a : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
212c : f003            >        beq skip0636
                       >        trap            ;failed not equal (non zero)
212e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2131 :                 >skip0636
                       >
2131 : 28              >            plp         ;restore status
                        
2132 : c8                       iny             ;01
                                tst_y 1,0
2133 : 08              >            php         ;save flags
2134 : c001            >            cpy #1     ;test result
                       >            trap_ne
2136 : f003            >        beq skip0639
                       >        trap            ;failed not equal (non zero)
2138 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
213b :                 >skip0639
                       >
213b : 68              >            pla         ;load status
213c : 48              >            pha
                       >            cmp_flag 0
213d : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
213f : f003            >        beq skip0642
                       >        trap            ;failed not equal (non zero)
2141 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2144 :                 >skip0642
                       >
2144 : 28              >            plp         ;restore status
                        
2145 : 88                       dey             ;00
                                tst_y 0,zero
2146 : 08              >            php         ;save flags
2147 : c000            >            cpy #0     ;test result
                       >            trap_ne
2149 : f003            >        beq skip0645
                       >        trap            ;failed not equal (non zero)
214b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
214e :                 >skip0645
                       >
214e : 68              >            pla         ;load status
214f : 48              >            pha
                       >            cmp_flag zero
2150 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2152 : f003            >        beq skip0648
                       >        trap            ;failed not equal (non zero)
2154 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2157 :                 >skip0648
                       >
2157 : 28              >            plp         ;restore status
                        
2158 : 88                       dey             ;ff
                                tst_y $ff,minus
2159 : 08              >            php         ;save flags
215a : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
215c : f003            >        beq skip0651
                       >        trap            ;failed not equal (non zero)
215e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2161 :                 >skip0651
                       >
2161 : 68              >            pla         ;load status
2162 : 48              >            pha
                       >            cmp_flag minus
2163 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2165 : f003            >        beq skip0654
                       >        trap            ;failed not equal (non zero)
2167 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
216a :                 >skip0654
                       >
216a : 28              >            plp         ;restore status
                        
                                        
216b : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
216d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
216f : 48              >            pha         ;use stack to load status
2170 : 28              >            plp
                        
2171 : 8a                       txa
                                tst_a $ff,$ff-zero
2172 : 08              >            php         ;save flags
2173 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
2175 : f003            >        beq skip0659
                       >        trap            ;failed not equal (non zero)
2177 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
217a :                 >skip0659
                       >
217a : 68              >            pla         ;load status
217b : 48              >            pha
                       >            cmp_flag $ff-zero
217c : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
217e : f003            >        beq skip0662
                       >        trap            ;failed not equal (non zero)
2180 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2183 :                 >skip0662
                       >
2183 : 28              >            plp         ;restore status
                        
2184 : 08                       php
2185 : e8                       inx             ;00
2186 : 28                       plp
2187 : 8a                       txa
                                tst_a 0,$ff-minus
2188 : 08              >            php         ;save flags
2189 : c900            >            cmp #0     ;test result
                       >            trap_ne
218b : f003            >        beq skip0665
                       >        trap            ;failed not equal (non zero)
218d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2190 :                 >skip0665
                       >
2190 : 68              >            pla         ;load status
2191 : 48              >            pha
                       >            cmp_flag $ff-minus
2192 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2194 : f003            >        beq skip0668
                       >        trap            ;failed not equal (non zero)
2196 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2199 :                 >skip0668
                       >
2199 : 28              >            plp         ;restore status
                        
219a : 08                       php
219b : e8                       inx             ;01
219c : 28                       plp
219d : 8a                       txa
                                tst_a 1,$ff-minus-zero
219e : 08              >            php         ;save flags
219f : c901            >            cmp #1     ;test result
                       >            trap_ne
21a1 : f003            >        beq skip0671
                       >        trap            ;failed not equal (non zero)
21a3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21a6 :                 >skip0671
                       >
21a6 : 68              >            pla         ;load status
21a7 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
21a8 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21aa : f003            >        beq skip0674
                       >        trap            ;failed not equal (non zero)
21ac : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21af :                 >skip0674
                       >
21af : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
21b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21b2 : 48              >            pha         ;use stack to load status
21b3 : 28              >            plp
                        
21b4 : 8a                       txa
                                tst_a 1,0
21b5 : 08              >            php         ;save flags
21b6 : c901            >            cmp #1     ;test result
                       >            trap_ne
21b8 : f003            >        beq skip0679
                       >        trap            ;failed not equal (non zero)
21ba : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21bd :                 >skip0679
                       >
21bd : 68              >            pla         ;load status
21be : 48              >            pha
                       >            cmp_flag 0
21bf : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21c1 : f003            >        beq skip0682
                       >        trap            ;failed not equal (non zero)
21c3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21c6 :                 >skip0682
                       >
21c6 : 28              >            plp         ;restore status
                        
21c7 : 08                       php
21c8 : ca                       dex             ;00
21c9 : 28                       plp
21ca : 8a                       txa
                                tst_a 0,zero
21cb : 08              >            php         ;save flags
21cc : c900            >            cmp #0     ;test result
                       >            trap_ne
21ce : f003            >        beq skip0685
                       >        trap            ;failed not equal (non zero)
21d0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21d3 :                 >skip0685
                       >
21d3 : 68              >            pla         ;load status
21d4 : 48              >            pha
                       >            cmp_flag zero
21d5 : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21d7 : f003            >        beq skip0688
                       >        trap            ;failed not equal (non zero)
21d9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21dc :                 >skip0688
                       >
21dc : 28              >            plp         ;restore status
                        
21dd : 08                       php
21de : ca                       dex             ;ff
21df : 28                       plp
21e0 : 8a                       txa
                                tst_a $ff,minus
21e1 : 08              >            php         ;save flags
21e2 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
21e4 : f003            >        beq skip0691
                       >        trap            ;failed not equal (non zero)
21e6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21e9 :                 >skip0691
                       >
21e9 : 68              >            pla         ;load status
21ea : 48              >            pha
                       >            cmp_flag minus
21eb : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
21ed : f003            >        beq skip0694
                       >        trap            ;failed not equal (non zero)
21ef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
21f2 :                 >skip0694
                       >
21f2 : 28              >            plp         ;restore status
                        
                                                
21f3 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
21f5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21f7 : 48              >            pha         ;use stack to load status
21f8 : 28              >            plp
                        
21f9 : 98                       tya
                                tst_a $ff,$ff-zero
21fa : 08              >            php         ;save flags
21fb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
21fd : f003            >        beq skip0699
                       >        trap            ;failed not equal (non zero)
21ff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2202 :                 >skip0699
                       >
2202 : 68              >            pla         ;load status
2203 : 48              >            pha
                       >            cmp_flag $ff-zero
2204 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2206 : f003            >        beq skip0702
                       >        trap            ;failed not equal (non zero)
2208 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
220b :                 >skip0702
                       >
220b : 28              >            plp         ;restore status
                        
220c : 08                       php
220d : c8                       iny             ;00
220e : 28                       plp
220f : 98                       tya
                                tst_a 0,$ff-minus
2210 : 08              >            php         ;save flags
2211 : c900            >            cmp #0     ;test result
                       >            trap_ne
2213 : f003            >        beq skip0705
                       >        trap            ;failed not equal (non zero)
2215 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2218 :                 >skip0705
                       >
2218 : 68              >            pla         ;load status
2219 : 48              >            pha
                       >            cmp_flag $ff-minus
221a : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
221c : f003            >        beq skip0708
                       >        trap            ;failed not equal (non zero)
221e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2221 :                 >skip0708
                       >
2221 : 28              >            plp         ;restore status
                        
2222 : 08                       php
2223 : c8                       iny             ;01
2224 : 28                       plp
2225 : 98                       tya
                                tst_a 1,$ff-minus-zero
2226 : 08              >            php         ;save flags
2227 : c901            >            cmp #1     ;test result
                       >            trap_ne
2229 : f003            >        beq skip0711
                       >        trap            ;failed not equal (non zero)
222b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
222e :                 >skip0711
                       >
222e : 68              >            pla         ;load status
222f : 48              >            pha
                       >            cmp_flag $ff-minus-zero
2230 : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2232 : f003            >        beq skip0714
                       >        trap            ;failed not equal (non zero)
2234 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2237 :                 >skip0714
                       >
2237 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
2238 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
223a : 48              >            pha         ;use stack to load status
223b : 28              >            plp
                        
223c : 98                       tya
                                tst_a 1,0
223d : 08              >            php         ;save flags
223e : c901            >            cmp #1     ;test result
                       >            trap_ne
2240 : f003            >        beq skip0719
                       >        trap            ;failed not equal (non zero)
2242 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2245 :                 >skip0719
                       >
2245 : 68              >            pla         ;load status
2246 : 48              >            pha
                       >            cmp_flag 0
2247 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2249 : f003            >        beq skip0722
                       >        trap            ;failed not equal (non zero)
224b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
224e :                 >skip0722
                       >
224e : 28              >            plp         ;restore status
                        
224f : 08                       php
2250 : 88                       dey             ;00
2251 : 28                       plp
2252 : 98                       tya
                                tst_a 0,zero
2253 : 08              >            php         ;save flags
2254 : c900            >            cmp #0     ;test result
                       >            trap_ne
2256 : f003            >        beq skip0725
                       >        trap            ;failed not equal (non zero)
2258 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
225b :                 >skip0725
                       >
225b : 68              >            pla         ;load status
225c : 48              >            pha
                       >            cmp_flag zero
225d : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
225f : f003            >        beq skip0728
                       >        trap            ;failed not equal (non zero)
2261 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2264 :                 >skip0728
                       >
2264 : 28              >            plp         ;restore status
                        
2265 : 08                       php
2266 : 88                       dey             ;ff
2267 : 28                       plp
2268 : 98                       tya
                                tst_a $ff,minus
2269 : 08              >            php         ;save flags
226a : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
226c : f003            >        beq skip0731
                       >        trap            ;failed not equal (non zero)
226e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2271 :                 >skip0731
                       >
2271 : 68              >            pla         ;load status
2272 : 48              >            pha
                       >            cmp_flag minus
2273 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2275 : f003            >        beq skip0734
                       >        trap            ;failed not equal (non zero)
2277 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
227a :                 >skip0734
                       >
227a : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
227b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
227d : 48                       pha
227e : a2ff                     ldx #$ff        ;ff
2280 : 8a                       txa
2281 : 28                       plp             
2282 : a8                       tay
                                tst_y $ff,$ff-zero
2283 : 08              >            php         ;save flags
2284 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
2286 : f003            >        beq skip0738
                       >        trap            ;failed not equal (non zero)
2288 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
228b :                 >skip0738
                       >
228b : 68              >            pla         ;load status
228c : 48              >            pha
                       >            cmp_flag $ff-zero
228d : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
228f : f003            >        beq skip0741
                       >        trap            ;failed not equal (non zero)
2291 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2294 :                 >skip0741
                       >
2294 : 28              >            plp         ;restore status
                        
2295 : 08                       php
2296 : e8                       inx             ;00
2297 : 8a                       txa
2298 : 28                       plp
2299 : a8                       tay
                                tst_y 0,$ff-minus
229a : 08              >            php         ;save flags
229b : c000            >            cpy #0     ;test result
                       >            trap_ne
229d : f003            >        beq skip0744
                       >        trap            ;failed not equal (non zero)
229f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22a2 :                 >skip0744
                       >
22a2 : 68              >            pla         ;load status
22a3 : 48              >            pha
                       >            cmp_flag $ff-minus
22a4 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22a6 : f003            >        beq skip0747
                       >        trap            ;failed not equal (non zero)
22a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22ab :                 >skip0747
                       >
22ab : 28              >            plp         ;restore status
                        
22ac : 08                       php
22ad : e8                       inx             ;01
22ae : 8a                       txa
22af : 28                       plp
22b0 : a8                       tay
                                tst_y 1,$ff-minus-zero
22b1 : 08              >            php         ;save flags
22b2 : c001            >            cpy #1     ;test result
                       >            trap_ne
22b4 : f003            >        beq skip0750
                       >        trap            ;failed not equal (non zero)
22b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22b9 :                 >skip0750
                       >
22b9 : 68              >            pla         ;load status
22ba : 48              >            pha
                       >            cmp_flag $ff-minus-zero
22bb : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22bd : f003            >        beq skip0753
                       >        trap            ;failed not equal (non zero)
22bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22c2 :                 >skip0753
                       >
22c2 : 28              >            plp         ;restore status
                        
                                load_flag 0
22c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
22c5 : 48                       pha
22c6 : a900                     lda #0
22c8 : 8a                       txa
22c9 : 28                       plp
22ca : a8                       tay
                                tst_y 1,0
22cb : 08              >            php         ;save flags
22cc : c001            >            cpy #1     ;test result
                       >            trap_ne
22ce : f003            >        beq skip0757
                       >        trap            ;failed not equal (non zero)
22d0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22d3 :                 >skip0757
                       >
22d3 : 68              >            pla         ;load status
22d4 : 48              >            pha
                       >            cmp_flag 0
22d5 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22d7 : f003            >        beq skip0760
                       >        trap            ;failed not equal (non zero)
22d9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22dc :                 >skip0760
                       >
22dc : 28              >            plp         ;restore status
                        
22dd : 08                       php
22de : ca                       dex             ;00
22df : 8a                       txa
22e0 : 28                       plp
22e1 : a8                       tay
                                tst_y 0,zero
22e2 : 08              >            php         ;save flags
22e3 : c000            >            cpy #0     ;test result
                       >            trap_ne
22e5 : f003            >        beq skip0763
                       >        trap            ;failed not equal (non zero)
22e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22ea :                 >skip0763
                       >
22ea : 68              >            pla         ;load status
22eb : 48              >            pha
                       >            cmp_flag zero
22ec : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
22ee : f003            >        beq skip0766
                       >        trap            ;failed not equal (non zero)
22f0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
22f3 :                 >skip0766
                       >
22f3 : 28              >            plp         ;restore status
                        
22f4 : 08                       php
22f5 : ca                       dex             ;ff
22f6 : 8a                       txa
22f7 : 28                       plp
22f8 : a8                       tay
                                tst_y $ff,minus
22f9 : 08              >            php         ;save flags
22fa : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
22fc : f003            >        beq skip0769
                       >        trap            ;failed not equal (non zero)
22fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2301 :                 >skip0769
                       >
2301 : 68              >            pla         ;load status
2302 : 48              >            pha
                       >            cmp_flag minus
2303 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2305 : f003            >        beq skip0772
                       >        trap            ;failed not equal (non zero)
2307 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
230a :                 >skip0772
                       >
230a : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
230b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
230d : 48                       pha
230e : a0ff                     ldy #$ff        ;ff
2310 : 98                       tya
2311 : 28                       plp
2312 : aa                       tax
                                tst_x $ff,$ff-zero
2313 : 08              >            php         ;save flags
2314 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
2316 : f003            >        beq skip0776
                       >        trap            ;failed not equal (non zero)
2318 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
231b :                 >skip0776
                       >
231b : 68              >            pla         ;load status
231c : 48              >            pha
                       >            cmp_flag $ff-zero
231d : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
231f : f003            >        beq skip0779
                       >        trap            ;failed not equal (non zero)
2321 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2324 :                 >skip0779
                       >
2324 : 28              >            plp         ;restore status
                        
2325 : 08                       php
2326 : c8                       iny             ;00
2327 : 98                       tya
2328 : 28                       plp
2329 : aa                       tax
                                tst_x 0,$ff-minus
232a : 08              >            php         ;save flags
232b : e000            >            cpx #0     ;test result
                       >            trap_ne
232d : f003            >        beq skip0782
                       >        trap            ;failed not equal (non zero)
232f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2332 :                 >skip0782
                       >
2332 : 68              >            pla         ;load status
2333 : 48              >            pha
                       >            cmp_flag $ff-minus
2334 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2336 : f003            >        beq skip0785
                       >        trap            ;failed not equal (non zero)
2338 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
233b :                 >skip0785
                       >
233b : 28              >            plp         ;restore status
                        
233c : 08                       php
233d : c8                       iny             ;01
233e : 98                       tya
233f : 28                       plp
2340 : aa                       tax
                                tst_x 1,$ff-minus-zero
2341 : 08              >            php         ;save flags
2342 : e001            >            cpx #1     ;test result
                       >            trap_ne
2344 : f003            >        beq skip0788
                       >        trap            ;failed not equal (non zero)
2346 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2349 :                 >skip0788
                       >
2349 : 68              >            pla         ;load status
234a : 48              >            pha
                       >            cmp_flag $ff-minus-zero
234b : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
234d : f003            >        beq skip0791
                       >        trap            ;failed not equal (non zero)
234f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2352 :                 >skip0791
                       >
2352 : 28              >            plp         ;restore status
                        
                                load_flag 0
2353 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
2355 : 48                       pha
2356 : a900                     lda #0          ;preset status
2358 : 98                       tya
2359 : 28                       plp
235a : aa                       tax
                                tst_x 1,0
235b : 08              >            php         ;save flags
235c : e001            >            cpx #1     ;test result
                       >            trap_ne
235e : f003            >        beq skip0795
                       >        trap            ;failed not equal (non zero)
2360 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2363 :                 >skip0795
                       >
2363 : 68              >            pla         ;load status
2364 : 48              >            pha
                       >            cmp_flag 0
2365 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2367 : f003            >        beq skip0798
                       >        trap            ;failed not equal (non zero)
2369 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
236c :                 >skip0798
                       >
236c : 28              >            plp         ;restore status
                        
236d : 08                       php
236e : 88                       dey             ;00
236f : 98                       tya
2370 : 28                       plp
2371 : aa                       tax
                                tst_x 0,zero
2372 : 08              >            php         ;save flags
2373 : e000            >            cpx #0     ;test result
                       >            trap_ne
2375 : f003            >        beq skip0801
                       >        trap            ;failed not equal (non zero)
2377 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
237a :                 >skip0801
                       >
237a : 68              >            pla         ;load status
237b : 48              >            pha
                       >            cmp_flag zero
237c : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
237e : f003            >        beq skip0804
                       >        trap            ;failed not equal (non zero)
2380 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2383 :                 >skip0804
                       >
2383 : 28              >            plp         ;restore status
                        
2384 : 08                       php
2385 : 88                       dey             ;ff
2386 : 98                       tya
2387 : 28                       plp
2388 : aa                       tax
                                tst_x $ff,minus
2389 : 08              >            php         ;save flags
238a : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
238c : f003            >        beq skip0807
                       >        trap            ;failed not equal (non zero)
238e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2391 :                 >skip0807
                       >
2391 : 68              >            pla         ;load status
2392 : 48              >            pha
                       >            cmp_flag minus
2393 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
2395 : f003            >        beq skip0810
                       >        trap            ;failed not equal (non zero)
2397 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
239a :                 >skip0810
                       >
239a : 28              >            plp         ;restore status
                        
                                next_test
239b : ad0002          >            lda test_case   ;previous test
239e : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
23a0 : f003            >        beq skip0813
                       >        trap            ;failed not equal (non zero)
23a2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
23a5 :                 >skip0813
                       >
000e =                 >test_num = test_num + 1
23a5 : a90e            >            lda #test_num   ;*** next tests' number
23a7 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
23aa : d8              >            cld
23ab : a900            >            lda #0
23ad : 8512            >            sta zpt         ;set low byte of indirect pointer
23af : 8515            >            sta zpt+3       ;checksum high byte
23b1 : 8dbb11          >            sta range_adr   ;reset self modifying code
23b4 : 8dfb57          >            sta tandi1
23b7 : 8d2258          >            sta tandi2
23ba : 8dbc5a          >            sta teori1
23bd : 8de35a          >            sta teori2
23c0 : 8d7c5d          >            sta torai1
23c3 : 8da35d          >            sta torai2
23c6 : 8dba63          >            sta chkdadi  
23c9 : 8dd763          >            sta chkdsbi
23cc : 8d6365          >            sta chkadi
23cf : 8d8065          >            sta chksbi
23d2 : 18              >            clc
23d3 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
23d5 : 7510            >ccs30815      adc zero_page,x
23d7 : 9003            >            bcc ccs20815
23d9 : e615            >            inc zpt+3       ;carry to high byte
23db : 18              >            clc
23dc : e8              >ccs20815      inx
23dd : d0f6            >            bne ccs30815
23df : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
23e1 : 8613            >            stx zpt+1
23e3 : a008            >            ldy #lo(data_bss) ;data after write test area
23e5 : 7112            >ccs50815      adc (zpt),y
23e7 : 9003            >            bcc ccs40815
23e9 : e615            >            inc zpt+3       ;carry to high byte
23eb : 18              >            clc
23ec : c8              >ccs40815      iny
23ed : d0f6            >            bne ccs50815
23ef : e8              >            inx             ;advance RAM high address
23f0 : 8613            >            stx zpt+1
23f2 : e0e0            >            cpx #ram_top
23f4 : d0ef            >            bne ccs50815
23f6 : 8514            >            sta zpt+2       ;checksum low is
23f8 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
23fb : f003            >        beq skip0816
                       >        trap            ;failed not equal (non zero)
23fd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2400 :                 >skip0816
                       >
2400 : a515            >            lda zpt+3       ;checksum high is
2402 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2405 : f003            >        beq skip0818
                       >        trap            ;failed not equal (non zero)
2407 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
240a :                 >skip0818
                       >
                       >
                        
                             
240a : 8d04ef            sta $ef04
240d : 54535820736574..  db "TSX sets NZ - TXS does not", 10, 0
                        ;  This section also tests for proper stack wrap around.
2429 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
242b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
242d : 48              >            pha         ;use stack to load status
242e : 28              >            plp
                        
242f : 9a                       txs
2430 : 08                       php
2431 : ad0101                   lda $101
                                cmp_flag $ff
2434 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2436 : f003            >        beq skip0823
                       >        trap            ;failed not equal (non zero)
2438 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
243b :                 >skip0823
                        
                                set_stat 0
                       >            load_flag 0
243b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
243d : 48              >            pha         ;use stack to load status
243e : 28              >            plp
                        
243f : 9a                       txs
2440 : 08                       php
2441 : ad0101                   lda $101
                                cmp_flag 0
2444 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2446 : f003            >        beq skip0828
                       >        trap            ;failed not equal (non zero)
2448 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
244b :                 >skip0828
                        
244b : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
244c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
244e : 48              >            pha         ;use stack to load status
244f : 28              >            plp
                        
2450 : 9a                       txs
2451 : 08                       php
2452 : ad0001                   lda $100
                                cmp_flag $ff
2455 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2457 : f003            >        beq skip0833
                       >        trap            ;failed not equal (non zero)
2459 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
245c :                 >skip0833
                        
                                set_stat 0
                       >            load_flag 0
245c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
245e : 48              >            pha         ;use stack to load status
245f : 28              >            plp
                        
2460 : 9a                       txs
2461 : 08                       php
2462 : ad0001                   lda $100
                                cmp_flag 0
2465 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2467 : f003            >        beq skip0838
                       >        trap            ;failed not equal (non zero)
2469 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
246c :                 >skip0838
                        
246c : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
246d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
246f : 48              >            pha         ;use stack to load status
2470 : 28              >            plp
                        
2471 : 9a                       txs
2472 : 08                       php
2473 : adff01                   lda $1ff
                                cmp_flag $ff
2476 : c9ff            >            cmp #($ff|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2478 : f003            >        beq skip0843
                       >        trap            ;failed not equal (non zero)
247a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
247d :                 >skip0843
                        
                                set_stat 0
                       >            load_flag 0
247d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
247f : 48              >            pha         ;use stack to load status
2480 : 28              >            plp
                        
2481 : 9a                       txs
2482 : 08                       php
2483 : adff01                   lda $1ff
                                cmp_flag 0
2486 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                
2488 : a201                     ldx #1
248a : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
248b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
248d : 48              >            pha         ;use stack to load status
248e : 28              >            plp
                        
248f : ba                       tsx             ;clears Z, N
2490 : 08                       php             ;sp=00
2491 : e001                     cpx #1
                                trap_ne
2493 : f003            >        beq skip0850
                       >        trap            ;failed not equal (non zero)
2495 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2498 :                 >skip0850
                        
2498 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
249b : c97d            >            cmp #($ff-minus-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
249d : f003            >        beq skip0853
                       >        trap            ;failed not equal (non zero)
249f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24a2 :                 >skip0853
                        
                                set_stat $ff
                       >            load_flag $ff
24a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24a4 : 48              >            pha         ;use stack to load status
24a5 : 28              >            plp
                        
24a6 : ba                       tsx             ;clears N, sets Z
24a7 : 08                       php             ;sp=ff
24a8 : e000                     cpx #0
                                trap_ne
24aa : f003            >        beq skip0857
                       >        trap            ;failed not equal (non zero)
24ac : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24af :                 >skip0857
                        
24af : ad0001                   lda $100
                                cmp_flag $ff-minus
24b2 : c97f            >            cmp #($ff-minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
24b4 : f003            >        beq skip0860
                       >        trap            ;failed not equal (non zero)
24b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24b9 :                 >skip0860
                        
                                set_stat $ff
                       >            load_flag $ff
24b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24bb : 48              >            pha         ;use stack to load status
24bc : 28              >            plp
                        
24bd : ba                       tsx             ;clears N, sets Z
24be : 08                       php             ;sp=fe
24bf : e0ff                     cpx #$ff
                                trap_ne
24c1 : f003            >        beq skip0864
                       >        trap            ;failed not equal (non zero)
24c3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24c6 :                 >skip0864
                        
24c6 : adff01                   lda $1ff
                                cmp_flag $ff-zero
24c9 : c9fd            >            cmp #($ff-zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
24cb : f003            >        beq skip0867
                       >        trap            ;failed not equal (non zero)
24cd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24d0 :                 >skip0867
                        
                                
24d0 : a201                     ldx #1
24d2 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
24d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24d5 : 48              >            pha         ;use stack to load status
24d6 : 28              >            plp
                        
24d7 : ba                       tsx             ;clears Z, N
24d8 : 08                       php             ;sp=00
24d9 : e001                     cpx #1
                                trap_ne
24db : f003            >        beq skip0871
                       >        trap            ;failed not equal (non zero)
24dd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24e0 :                 >skip0871
                        
24e0 : ad0101                   lda $101
                                cmp_flag 0
24e3 : c930            >            cmp #(0|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
24e5 : f003            >        beq skip0874
                       >        trap            ;failed not equal (non zero)
24e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24ea :                 >skip0874
                        
                                set_stat 0
                       >            load_flag 0
24ea : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24ec : 48              >            pha         ;use stack to load status
24ed : 28              >            plp
                        
24ee : ba                       tsx             ;clears N, sets Z
24ef : 08                       php             ;sp=ff
24f0 : e000                     cpx #0
                                trap_ne
24f2 : f003            >        beq skip0878
                       >        trap            ;failed not equal (non zero)
24f4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
24f7 :                 >skip0878
                        
24f7 : ad0001                   lda $100
                                cmp_flag zero
24fa : c932            >            cmp #(zero|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
24fc : f003            >        beq skip0881
                       >        trap            ;failed not equal (non zero)
24fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2501 :                 >skip0881
                        
                                set_stat 0
                       >            load_flag 0
2501 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2503 : 48              >            pha         ;use stack to load status
2504 : 28              >            plp
                        
2505 : ba                       tsx             ;clears N, sets Z
2506 : 08                       php             ;sp=fe
2507 : e0ff                     cpx #$ff
                                trap_ne
2509 : f003            >        beq skip0885
                       >        trap            ;failed not equal (non zero)
250b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
250e :                 >skip0885
                        
250e : adff01                   lda $1ff
                                cmp_flag minus
2511 : c9b0            >            cmp #(minus|fao)&m8    ;expected flags + always on bits
                        
                                trap_ne
2513 : f003            >        beq skip0888
                       >        trap            ;failed not equal (non zero)
2515 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2518 :                 >skip0888
                        
2518 : 68                       pla             ;sp=ff
                                next_test
2519 : ad0002          >            lda test_case   ;previous test
251c : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
251e : f003            >        beq skip0891
                       >        trap            ;failed not equal (non zero)
2520 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2523 :                 >skip0891
                       >
000f =                 >test_num = test_num + 1
2523 : a90f            >            lda #test_num   ;*** next tests' number
2525 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
2528 : d8              >            cld
2529 : a900            >            lda #0
252b : 8512            >            sta zpt         ;set low byte of indirect pointer
252d : 8515            >            sta zpt+3       ;checksum high byte
252f : 8dbb11          >            sta range_adr   ;reset self modifying code
2532 : 8dfb57          >            sta tandi1
2535 : 8d2258          >            sta tandi2
2538 : 8dbc5a          >            sta teori1
253b : 8de35a          >            sta teori2
253e : 8d7c5d          >            sta torai1
2541 : 8da35d          >            sta torai2
2544 : 8dba63          >            sta chkdadi  
2547 : 8dd763          >            sta chkdsbi
254a : 8d6365          >            sta chkadi
254d : 8d8065          >            sta chksbi
2550 : 18              >            clc
2551 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
2553 : 7510            >ccs30893      adc zero_page,x
2555 : 9003            >            bcc ccs20893
2557 : e615            >            inc zpt+3       ;carry to high byte
2559 : 18              >            clc
255a : e8              >ccs20893      inx
255b : d0f6            >            bne ccs30893
255d : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
255f : 8613            >            stx zpt+1
2561 : a008            >            ldy #lo(data_bss) ;data after write test area
2563 : 7112            >ccs50893      adc (zpt),y
2565 : 9003            >            bcc ccs40893
2567 : e615            >            inc zpt+3       ;carry to high byte
2569 : 18              >            clc
256a : c8              >ccs40893      iny
256b : d0f6            >            bne ccs50893
256d : e8              >            inx             ;advance RAM high address
256e : 8613            >            stx zpt+1
2570 : e0e0            >            cpx #ram_top
2572 : d0ef            >            bne ccs50893
2574 : 8514            >            sta zpt+2       ;checksum low is
2576 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
2579 : f003            >        beq skip0894
                       >        trap            ;failed not equal (non zero)
257b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
257e :                 >skip0894
                       >
257e : a515            >            lda zpt+3       ;checksum high is
2580 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2583 : f003            >        beq skip0896
                       >        trap            ;failed not equal (non zero)
2585 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2588 :                 >skip0896
                       >
                       >
                        
                                
2588 : 8d04ef            sta $ef04
258b : 74657374696e67..  db "testing index register load & store LDY LDX STY STX all addressing modes", 10, 0
25d5 : 8d04ef            sta $ef04
25d8 : 4c4458202f2053..  db "LDX / STX - zp,y / abs,y", 10, 0
25f2 : a003                     ldy #3
25f4 :                  tldx    
                                set_stat 0
                       >            load_flag 0
25f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25f6 : 48              >            pha         ;use stack to load status
25f7 : 28              >            plp
                        
25f8 : b619                     ldx zp1,y
25fa : 08                       php         ;test stores do not alter flags
25fb : 8a                       txa
25fc : 49c3                     eor #$c3
25fe : 28                       plp
25ff : 990302                   sta abst,y
2602 : 08                       php         ;flags after load/store sequence
2603 : 49c3                     eor #$c3
2605 : d90802                   cmp abs1,y  ;test result
                                trap_ne
2608 : f003            >        beq skip0900
                       >        trap            ;failed not equal (non zero)
260a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
260d :                 >skip0900
                        
260d : 68                       pla         ;load status
                                eor_flag 0
260e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2610 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
2613 : f003            >        beq skip0903
                       >        trap            ;failed not equal (non zero)
2615 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2618 :                 >skip0903
                        
2618 : 88                       dey
2619 : 10d9                     bpl tldx                  
                        
261b : a003                     ldy #3
261d :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
261d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
261f : 48              >            pha         ;use stack to load status
2620 : 28              >            plp
                        
2621 : b619                     ldx zp1,y
2623 : 08                       php         ;test stores do not alter flags
2624 : 8a                       txa
2625 : 49c3                     eor #$c3
2627 : 28                       plp
2628 : 990302                   sta abst,y
262b : 08                       php         ;flags after load/store sequence
262c : 49c3                     eor #$c3
262e : d90802                   cmp abs1,y  ;test result
                                trap_ne
2631 : f003            >        beq skip0907
                       >        trap            ;failed not equal (non zero)
2633 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2636 :                 >skip0907
                        
2636 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2637 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2639 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
263c : f003            >        beq skip0910
                       >        trap            ;failed not equal (non zero)
263e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2641 :                 >skip0910
                        
2641 : 88                       dey
2642 : 10d9                     bpl tldx1                  
                        
2644 : a003                     ldy #3
2646 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
2646 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2648 : 48              >            pha         ;use stack to load status
2649 : 28              >            plp
                        
264a : be0802                   ldx abs1,y
264d : 08                       php         ;test stores do not alter flags
264e : 8a                       txa
264f : 49c3                     eor #$c3
2651 : aa                       tax
2652 : 28                       plp
2653 : 9612                     stx zpt,y
2655 : 08                       php         ;flags after load/store sequence
2656 : 49c3                     eor #$c3
2658 : d91900                   cmp zp1,y   ;test result
                                trap_ne
265b : f003            >        beq skip0914
                       >        trap            ;failed not equal (non zero)
265d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2660 :                 >skip0914
                        
2660 : 68                       pla         ;load status
                                eor_flag 0
2661 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2663 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
2666 : f003            >        beq skip0917
                       >        trap            ;failed not equal (non zero)
2668 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
266b :                 >skip0917
                        
266b : 88                       dey
266c : 10d8                     bpl tldx2                  
                        
266e : a003                     ldy #3
2670 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
2670 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2672 : 48              >            pha         ;use stack to load status
2673 : 28              >            plp
                        
2674 : be0802                   ldx abs1,y
2677 : 08                       php         ;test stores do not alter flags
2678 : 8a                       txa
2679 : 49c3                     eor #$c3
267b : aa                       tax
267c : 28                       plp
267d : 9612                     stx zpt,y
267f : 08                       php         ;flags after load/store sequence
2680 : 49c3                     eor #$c3
2682 : d91900                   cmp zp1,y   ;test result
                                trap_ne
2685 : f003            >        beq skip0921
                       >        trap            ;failed not equal (non zero)
2687 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
268a :                 >skip0921
                        
268a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
268b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
268d : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
2690 : f003            >        beq skip0924
                       >        trap            ;failed not equal (non zero)
2692 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2695 :                 >skip0924
                        
2695 : 88                       dey
2696 : 10d8                     bpl tldx3
                                
2698 : a003                     ldy #3      ;testing store result
269a : a200                     ldx #0
269c : b91200           tstx    lda zpt,y
269f : 49c3                     eor #$c3
26a1 : d91900                   cmp zp1,y
                                trap_ne     ;store to zp data
26a4 : f003            >        beq skip0926
                       >        trap            ;failed not equal (non zero)
26a6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
26a9 :                 >skip0926
                        
26a9 : 9612                     stx zpt,y   ;clear                
26ab : b90302                   lda abst,y
26ae : 49c3                     eor #$c3
26b0 : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
26b3 : f003            >        beq skip0928
                       >        trap            ;failed not equal (non zero)
26b5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
26b8 :                 >skip0928
                        
26b8 : 8a                       txa
26b9 : 990302                   sta abst,y  ;clear                
26bc : 88                       dey
26bd : 10dd                     bpl tstx
                                next_test
26bf : ad0002          >            lda test_case   ;previous test
26c2 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
26c4 : f003            >        beq skip0931
                       >        trap            ;failed not equal (non zero)
26c6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
26c9 :                 >skip0931
                       >
0010 =                 >test_num = test_num + 1
26c9 : a910            >            lda #test_num   ;*** next tests' number
26cb : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
26ce : d8              >            cld
26cf : a900            >            lda #0
26d1 : 8512            >            sta zpt         ;set low byte of indirect pointer
26d3 : 8515            >            sta zpt+3       ;checksum high byte
26d5 : 8dbb11          >            sta range_adr   ;reset self modifying code
26d8 : 8dfb57          >            sta tandi1
26db : 8d2258          >            sta tandi2
26de : 8dbc5a          >            sta teori1
26e1 : 8de35a          >            sta teori2
26e4 : 8d7c5d          >            sta torai1
26e7 : 8da35d          >            sta torai2
26ea : 8dba63          >            sta chkdadi  
26ed : 8dd763          >            sta chkdsbi
26f0 : 8d6365          >            sta chkadi
26f3 : 8d8065          >            sta chksbi
26f6 : 18              >            clc
26f7 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
26f9 : 7510            >ccs30933      adc zero_page,x
26fb : 9003            >            bcc ccs20933
26fd : e615            >            inc zpt+3       ;carry to high byte
26ff : 18              >            clc
2700 : e8              >ccs20933      inx
2701 : d0f6            >            bne ccs30933
2703 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
2705 : 8613            >            stx zpt+1
2707 : a008            >            ldy #lo(data_bss) ;data after write test area
2709 : 7112            >ccs50933      adc (zpt),y
270b : 9003            >            bcc ccs40933
270d : e615            >            inc zpt+3       ;carry to high byte
270f : 18              >            clc
2710 : c8              >ccs40933      iny
2711 : d0f6            >            bne ccs50933
2713 : e8              >            inx             ;advance RAM high address
2714 : 8613            >            stx zpt+1
2716 : e0e0            >            cpx #ram_top
2718 : d0ef            >            bne ccs50933
271a : 8514            >            sta zpt+2       ;checksum low is
271c : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
271f : f003            >        beq skip0934
                       >        trap            ;failed not equal (non zero)
2721 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2724 :                 >skip0934
                       >
2724 : a515            >            lda zpt+3       ;checksum high is
2726 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2729 : f003            >        beq skip0936
                       >        trap            ;failed not equal (non zero)
272b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
272e :                 >skip0936
                       >
                       >
                        
                                
272e : 8d04ef            sta $ef04
2731 : 696e6465786564..  db "indexed wraparound test (only zp should wrap)", 10, 0
2760 : a0fd                     ldy #3+$fa
2762 : b61f             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
2764 : 8a                       txa
2765 : 990901                   sta abst-$fa,y      ;no STX abs,y!
2768 : 88                       dey
2769 : c0fa                     cpy #$fa
276b : b0f5                     bcs tldx4                  
276d : a0fd                     ldy #3+$fa
276f : be0e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
2772 : 9618                     stx zpt-$fa&$ff,y
2774 : 88                       dey
2775 : c0fa                     cpy #$fa
2777 : b0f6                     bcs tldx5                  
2779 : a003                     ldy #3      ;testing wraparound result
277b : a200                     ldx #0
277d : b91200           tstx1   lda zpt,y
2780 : d91900                   cmp zp1,y
                                trap_ne     ;store to zp data
2783 : f003            >        beq skip0938
                       >        trap            ;failed not equal (non zero)
2785 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2788 :                 >skip0938
                        
2788 : 9612                     stx zpt,y   ;clear                
278a : b90302                   lda abst,y
278d : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
2790 : f003            >        beq skip0940
                       >        trap            ;failed not equal (non zero)
2792 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2795 :                 >skip0940
                        
2795 : 8a                       txa
2796 : 990302                   sta abst,y  ;clear                
2799 : 88                       dey
279a : 10e1                     bpl tstx1
                                next_test
279c : ad0002          >            lda test_case   ;previous test
279f : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
27a1 : f003            >        beq skip0943
                       >        trap            ;failed not equal (non zero)
27a3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
27a6 :                 >skip0943
                       >
0011 =                 >test_num = test_num + 1
27a6 : a911            >            lda #test_num   ;*** next tests' number
27a8 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
27ab : d8              >            cld
27ac : a900            >            lda #0
27ae : 8512            >            sta zpt         ;set low byte of indirect pointer
27b0 : 8515            >            sta zpt+3       ;checksum high byte
27b2 : 8dbb11          >            sta range_adr   ;reset self modifying code
27b5 : 8dfb57          >            sta tandi1
27b8 : 8d2258          >            sta tandi2
27bb : 8dbc5a          >            sta teori1
27be : 8de35a          >            sta teori2
27c1 : 8d7c5d          >            sta torai1
27c4 : 8da35d          >            sta torai2
27c7 : 8dba63          >            sta chkdadi  
27ca : 8dd763          >            sta chkdsbi
27cd : 8d6365          >            sta chkadi
27d0 : 8d8065          >            sta chksbi
27d3 : 18              >            clc
27d4 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
27d6 : 7510            >ccs30945      adc zero_page,x
27d8 : 9003            >            bcc ccs20945
27da : e615            >            inc zpt+3       ;carry to high byte
27dc : 18              >            clc
27dd : e8              >ccs20945      inx
27de : d0f6            >            bne ccs30945
27e0 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
27e2 : 8613            >            stx zpt+1
27e4 : a008            >            ldy #lo(data_bss) ;data after write test area
27e6 : 7112            >ccs50945      adc (zpt),y
27e8 : 9003            >            bcc ccs40945
27ea : e615            >            inc zpt+3       ;carry to high byte
27ec : 18              >            clc
27ed : c8              >ccs40945      iny
27ee : d0f6            >            bne ccs50945
27f0 : e8              >            inx             ;advance RAM high address
27f1 : 8613            >            stx zpt+1
27f3 : e0e0            >            cpx #ram_top
27f5 : d0ef            >            bne ccs50945
27f7 : 8514            >            sta zpt+2       ;checksum low is
27f9 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
27fc : f003            >        beq skip0946
                       >        trap            ;failed not equal (non zero)
27fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2801 :                 >skip0946
                       >
2801 : a515            >            lda zpt+3       ;checksum high is
2803 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2806 : f003            >        beq skip0948
                       >        trap            ;failed not equal (non zero)
2808 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
280b :                 >skip0948
                       >
                       >
                        
                                
280b : 8d04ef            sta $ef04
280e : 4c4459202f2053..  db "LDY / STY - zp,x / abs,x", 10, 0
2828 : a203                     ldx #3
282a :                  tldy    
                                set_stat 0
                       >            load_flag 0
282a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
282c : 48              >            pha         ;use stack to load status
282d : 28              >            plp
                        
282e : b419                     ldy zp1,x
2830 : 08                       php         ;test stores do not alter flags
2831 : 98                       tya
2832 : 49c3                     eor #$c3
2834 : 28                       plp
2835 : 9d0302                   sta abst,x
2838 : 08                       php         ;flags after load/store sequence
2839 : 49c3                     eor #$c3
283b : dd0802                   cmp abs1,x  ;test result
                                trap_ne
283e : f003            >        beq skip0952
                       >        trap            ;failed not equal (non zero)
2840 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2843 :                 >skip0952
                        
2843 : 68                       pla         ;load status
                                eor_flag 0
2844 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2846 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
2849 : f003            >        beq skip0955
                       >        trap            ;failed not equal (non zero)
284b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
284e :                 >skip0955
                        
284e : ca                       dex
284f : 10d9                     bpl tldy                  
                        
2851 : a203                     ldx #3
2853 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
2853 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2855 : 48              >            pha         ;use stack to load status
2856 : 28              >            plp
                        
2857 : b419                     ldy zp1,x
2859 : 08                       php         ;test stores do not alter flags
285a : 98                       tya
285b : 49c3                     eor #$c3
285d : 28                       plp
285e : 9d0302                   sta abst,x
2861 : 08                       php         ;flags after load/store sequence
2862 : 49c3                     eor #$c3
2864 : dd0802                   cmp abs1,x  ;test result
                                trap_ne
2867 : f003            >        beq skip0959
                       >        trap            ;failed not equal (non zero)
2869 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
286c :                 >skip0959
                        
286c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
286d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
286f : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
2872 : f003            >        beq skip0962
                       >        trap            ;failed not equal (non zero)
2874 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2877 :                 >skip0962
                        
2877 : ca                       dex
2878 : 10d9                     bpl tldy1                  
                        
287a : a203                     ldx #3
287c :                  tldy2   
                                set_stat 0
                       >            load_flag 0
287c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
287e : 48              >            pha         ;use stack to load status
287f : 28              >            plp
                        
2880 : bc0802                   ldy abs1,x
2883 : 08                       php         ;test stores do not alter flags
2884 : 98                       tya
2885 : 49c3                     eor #$c3
2887 : a8                       tay
2888 : 28                       plp
2889 : 9412                     sty zpt,x
288b : 08                       php         ;flags after load/store sequence
288c : 49c3                     eor #$c3
288e : d519                     cmp zp1,x   ;test result
                                trap_ne
2890 : f003            >        beq skip0966
                       >        trap            ;failed not equal (non zero)
2892 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2895 :                 >skip0966
                        
2895 : 68                       pla         ;load status
                                eor_flag 0
2896 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2898 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
289b : f003            >        beq skip0969
                       >        trap            ;failed not equal (non zero)
289d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28a0 :                 >skip0969
                        
28a0 : ca                       dex
28a1 : 10d9                     bpl tldy2                  
                        
28a3 : a203                     ldx #3
28a5 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
28a5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28a7 : 48              >            pha         ;use stack to load status
28a8 : 28              >            plp
                        
28a9 : bc0802                   ldy abs1,x
28ac : 08                       php         ;test stores do not alter flags
28ad : 98                       tya
28ae : 49c3                     eor #$c3
28b0 : a8                       tay
28b1 : 28                       plp
28b2 : 9412                     sty zpt,x
28b4 : 08                       php         ;flags after load/store sequence
28b5 : 49c3                     eor #$c3
28b7 : d519                     cmp zp1,x   ;test result
                                trap_ne
28b9 : f003            >        beq skip0973
                       >        trap            ;failed not equal (non zero)
28bb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28be :                 >skip0973
                        
28be : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
28bf : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
28c1 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
28c4 : f003            >        beq skip0976
                       >        trap            ;failed not equal (non zero)
28c6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28c9 :                 >skip0976
                        
28c9 : ca                       dex
28ca : 10d9                     bpl tldy3
                        
28cc : a203                     ldx #3      ;testing store result
28ce : a000                     ldy #0
28d0 : b512             tsty    lda zpt,x
28d2 : 49c3                     eor #$c3
28d4 : d519                     cmp zp1,x
                                trap_ne     ;store to zp,x data
28d6 : f003            >        beq skip0978
                       >        trap            ;failed not equal (non zero)
28d8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28db :                 >skip0978
                        
28db : 9412                     sty zpt,x   ;clear                
28dd : bd0302                   lda abst,x
28e0 : 49c3                     eor #$c3
28e2 : dd0802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
28e5 : f003            >        beq skip0980
                       >        trap            ;failed not equal (non zero)
28e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28ea :                 >skip0980
                        
28ea : 8a                       txa
28eb : 9d0302                   sta abst,x  ;clear                
28ee : ca                       dex
28ef : 10df                     bpl tsty
                                next_test
28f1 : ad0002          >            lda test_case   ;previous test
28f4 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
28f6 : f003            >        beq skip0983
                       >        trap            ;failed not equal (non zero)
28f8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
28fb :                 >skip0983
                       >
0012 =                 >test_num = test_num + 1
28fb : a912            >            lda #test_num   ;*** next tests' number
28fd : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
2900 : d8              >            cld
2901 : a900            >            lda #0
2903 : 8512            >            sta zpt         ;set low byte of indirect pointer
2905 : 8515            >            sta zpt+3       ;checksum high byte
2907 : 8dbb11          >            sta range_adr   ;reset self modifying code
290a : 8dfb57          >            sta tandi1
290d : 8d2258          >            sta tandi2
2910 : 8dbc5a          >            sta teori1
2913 : 8de35a          >            sta teori2
2916 : 8d7c5d          >            sta torai1
2919 : 8da35d          >            sta torai2
291c : 8dba63          >            sta chkdadi  
291f : 8dd763          >            sta chkdsbi
2922 : 8d6365          >            sta chkadi
2925 : 8d8065          >            sta chksbi
2928 : 18              >            clc
2929 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
292b : 7510            >ccs30985      adc zero_page,x
292d : 9003            >            bcc ccs20985
292f : e615            >            inc zpt+3       ;carry to high byte
2931 : 18              >            clc
2932 : e8              >ccs20985      inx
2933 : d0f6            >            bne ccs30985
2935 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
2937 : 8613            >            stx zpt+1
2939 : a008            >            ldy #lo(data_bss) ;data after write test area
293b : 7112            >ccs50985      adc (zpt),y
293d : 9003            >            bcc ccs40985
293f : e615            >            inc zpt+3       ;carry to high byte
2941 : 18              >            clc
2942 : c8              >ccs40985      iny
2943 : d0f6            >            bne ccs50985
2945 : e8              >            inx             ;advance RAM high address
2946 : 8613            >            stx zpt+1
2948 : e0e0            >            cpx #ram_top
294a : d0ef            >            bne ccs50985
294c : 8514            >            sta zpt+2       ;checksum low is
294e : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
2951 : f003            >        beq skip0986
                       >        trap            ;failed not equal (non zero)
2953 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2956 :                 >skip0986
                       >
2956 : a515            >            lda zpt+3       ;checksum high is
2958 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
295b : f003            >        beq skip0988
                       >        trap            ;failed not equal (non zero)
295d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2960 :                 >skip0988
                       >
                       >
                        
                        
2960 : 8d04ef            sta $ef04
2963 : 696e6465786564..  db "indexed wraparound test (only zp should wrap)", 10, 0
2992 : a2fd                     ldx #3+$fa
2994 : b41f             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
2996 : 98                       tya
2997 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
299a : ca                       dex
299b : e0fa                     cpx #$fa
299d : b0f5                     bcs tldy4                  
299f : a2fd                     ldx #3+$fa
29a1 : bc0e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
29a4 : 9418                     sty zpt-$fa&$ff,x
29a6 : ca                       dex
29a7 : e0fa                     cpx #$fa
29a9 : b0f6                     bcs tldy5                  
29ab : a203                     ldx #3      ;testing wraparound result
29ad : a000                     ldy #0
29af : b512             tsty1   lda zpt,x
29b1 : d519                     cmp zp1,x
                                trap_ne     ;store to zp,x data
29b3 : f003            >        beq skip0990
                       >        trap            ;failed not equal (non zero)
29b5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
29b8 :                 >skip0990
                        
29b8 : 9412                     sty zpt,x   ;clear                
29ba : bd0302                   lda abst,x
29bd : dd0802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
29c0 : f003            >        beq skip0992
                       >        trap            ;failed not equal (non zero)
29c2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
29c5 :                 >skip0992
                        
29c5 : 8a                       txa
29c6 : 9d0302                   sta abst,x  ;clear                
29c9 : ca                       dex
29ca : 10e3                     bpl tsty1
                                next_test
29cc : ad0002          >            lda test_case   ;previous test
29cf : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
29d1 : f003            >        beq skip0995
                       >        trap            ;failed not equal (non zero)
29d3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
29d6 :                 >skip0995
                       >
0013 =                 >test_num = test_num + 1
29d6 : a913            >            lda #test_num   ;*** next tests' number
29d8 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
29db : d8              >            cld
29dc : a900            >            lda #0
29de : 8512            >            sta zpt         ;set low byte of indirect pointer
29e0 : 8515            >            sta zpt+3       ;checksum high byte
29e2 : 8dbb11          >            sta range_adr   ;reset self modifying code
29e5 : 8dfb57          >            sta tandi1
29e8 : 8d2258          >            sta tandi2
29eb : 8dbc5a          >            sta teori1
29ee : 8de35a          >            sta teori2
29f1 : 8d7c5d          >            sta torai1
29f4 : 8da35d          >            sta torai2
29f7 : 8dba63          >            sta chkdadi  
29fa : 8dd763          >            sta chkdsbi
29fd : 8d6365          >            sta chkadi
2a00 : 8d8065          >            sta chksbi
2a03 : 18              >            clc
2a04 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
2a06 : 7510            >ccs30997      adc zero_page,x
2a08 : 9003            >            bcc ccs20997
2a0a : e615            >            inc zpt+3       ;carry to high byte
2a0c : 18              >            clc
2a0d : e8              >ccs20997      inx
2a0e : d0f6            >            bne ccs30997
2a10 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
2a12 : 8613            >            stx zpt+1
2a14 : a008            >            ldy #lo(data_bss) ;data after write test area
2a16 : 7112            >ccs50997      adc (zpt),y
2a18 : 9003            >            bcc ccs40997
2a1a : e615            >            inc zpt+3       ;carry to high byte
2a1c : 18              >            clc
2a1d : c8              >ccs40997      iny
2a1e : d0f6            >            bne ccs50997
2a20 : e8              >            inx             ;advance RAM high address
2a21 : 8613            >            stx zpt+1
2a23 : e0e0            >            cpx #ram_top
2a25 : d0ef            >            bne ccs50997
2a27 : 8514            >            sta zpt+2       ;checksum low is
2a29 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
2a2c : f003            >        beq skip0998
                       >        trap            ;failed not equal (non zero)
2a2e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2a31 :                 >skip0998
                       >
2a31 : a515            >            lda zpt+3       ;checksum high is
2a33 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2a36 : f003            >        beq skip1000
                       >        trap            ;failed not equal (non zero)
2a38 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2a3b :                 >skip1000
                       >
                       >
                        
                        
2a3b : 8d04ef            sta $ef04
2a3e : 4c4458202f2053..  db "LDX / STX - zp / abs / #", 10, 0
                                set_stat 0  
                       >            load_flag 0  
2a58 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
2a5a : 48              >            pha         ;use stack to load status
2a5b : 28              >            plp
                        
2a5c : a619                     ldx zp1
2a5e : 08                       php         ;test stores do not alter flags
2a5f : 8a                       txa
2a60 : 49c3                     eor #$c3
2a62 : aa                       tax
2a63 : 28                       plp
2a64 : 8e0302                   stx abst
2a67 : 08                       php         ;flags after load/store sequence
2a68 : 49c3                     eor #$c3
2a6a : aa                       tax
2a6b : e0c3                     cpx #$c3    ;test result
                                trap_ne
2a6d : f003            >        beq skip1004
                       >        trap            ;failed not equal (non zero)
2a6f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2a72 :                 >skip1004
                        
2a72 : 68                       pla         ;load status
                                eor_flag 0
2a73 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2a75 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2a78 : f003            >        beq skip1007
                       >        trap            ;failed not equal (non zero)
2a7a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2a7d :                 >skip1007
                        
                                set_stat 0
                       >            load_flag 0
2a7d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a7f : 48              >            pha         ;use stack to load status
2a80 : 28              >            plp
                        
2a81 : a61a                     ldx zp1+1
2a83 : 08                       php         ;test stores do not alter flags
2a84 : 8a                       txa
2a85 : 49c3                     eor #$c3
2a87 : aa                       tax
2a88 : 28                       plp
2a89 : 8e0402                   stx abst+1
2a8c : 08                       php         ;flags after load/store sequence
2a8d : 49c3                     eor #$c3
2a8f : aa                       tax
2a90 : e082                     cpx #$82    ;test result
                                trap_ne
2a92 : f003            >        beq skip1011
                       >        trap            ;failed not equal (non zero)
2a94 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2a97 :                 >skip1011
                        
2a97 : 68                       pla         ;load status
                                eor_flag 0
2a98 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2a9a : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2a9d : f003            >        beq skip1014
                       >        trap            ;failed not equal (non zero)
2a9f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2aa2 :                 >skip1014
                        
                                set_stat 0
                       >            load_flag 0
2aa2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2aa4 : 48              >            pha         ;use stack to load status
2aa5 : 28              >            plp
                        
2aa6 : a61b                     ldx zp1+2
2aa8 : 08                       php         ;test stores do not alter flags
2aa9 : 8a                       txa
2aaa : 49c3                     eor #$c3
2aac : aa                       tax
2aad : 28                       plp
2aae : 8e0502                   stx abst+2
2ab1 : 08                       php         ;flags after load/store sequence
2ab2 : 49c3                     eor #$c3
2ab4 : aa                       tax
2ab5 : e041                     cpx #$41    ;test result
                                trap_ne
2ab7 : f003            >        beq skip1018
                       >        trap            ;failed not equal (non zero)
2ab9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2abc :                 >skip1018
                        
2abc : 68                       pla         ;load status
                                eor_flag 0
2abd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2abf : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2ac2 : f003            >        beq skip1021
                       >        trap            ;failed not equal (non zero)
2ac4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ac7 :                 >skip1021
                        
                                set_stat 0
                       >            load_flag 0
2ac7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ac9 : 48              >            pha         ;use stack to load status
2aca : 28              >            plp
                        
2acb : a61c                     ldx zp1+3
2acd : 08                       php         ;test stores do not alter flags
2ace : 8a                       txa
2acf : 49c3                     eor #$c3
2ad1 : aa                       tax
2ad2 : 28                       plp
2ad3 : 8e0602                   stx abst+3
2ad6 : 08                       php         ;flags after load/store sequence
2ad7 : 49c3                     eor #$c3
2ad9 : aa                       tax
2ada : e000                     cpx #0      ;test result
                                trap_ne
2adc : f003            >        beq skip1025
                       >        trap            ;failed not equal (non zero)
2ade : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ae1 :                 >skip1025
                        
2ae1 : 68                       pla         ;load status
                                eor_flag 0
2ae2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2ae4 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2ae7 : f003            >        beq skip1028
                       >        trap            ;failed not equal (non zero)
2ae9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2aec :                 >skip1028
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2aec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2aee : 48              >            pha         ;use stack to load status
2aef : 28              >            plp
                        
2af0 : a619                     ldx zp1  
2af2 : 08                       php         ;test stores do not alter flags
2af3 : 8a                       txa
2af4 : 49c3                     eor #$c3
2af6 : aa                       tax
2af7 : 28                       plp
2af8 : 8e0302                   stx abst  
2afb : 08                       php         ;flags after load/store sequence
2afc : 49c3                     eor #$c3
2afe : aa                       tax
2aff : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
2b01 : f003            >        beq skip1032
                       >        trap            ;failed not equal (non zero)
2b03 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b06 :                 >skip1032
                        
2b06 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2b07 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2b09 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2b0c : f003            >        beq skip1035
                       >        trap            ;failed not equal (non zero)
2b0e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b11 :                 >skip1035
                        
                                set_stat $ff
                       >            load_flag $ff
2b11 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b13 : 48              >            pha         ;use stack to load status
2b14 : 28              >            plp
                        
2b15 : a61a                     ldx zp1+1
2b17 : 08                       php         ;test stores do not alter flags
2b18 : 8a                       txa
2b19 : 49c3                     eor #$c3
2b1b : aa                       tax
2b1c : 28                       plp
2b1d : 8e0402                   stx abst+1
2b20 : 08                       php         ;flags after load/store sequence
2b21 : 49c3                     eor #$c3
2b23 : aa                       tax
2b24 : e082                     cpx #$82    ;test result
                                trap_ne
2b26 : f003            >        beq skip1039
                       >        trap            ;failed not equal (non zero)
2b28 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b2b :                 >skip1039
                        
2b2b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2b2c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2b2e : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2b31 : f003            >        beq skip1042
                       >        trap            ;failed not equal (non zero)
2b33 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b36 :                 >skip1042
                        
                                set_stat $ff
                       >            load_flag $ff
2b36 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b38 : 48              >            pha         ;use stack to load status
2b39 : 28              >            plp
                        
2b3a : a61b                     ldx zp1+2
2b3c : 08                       php         ;test stores do not alter flags
2b3d : 8a                       txa
2b3e : 49c3                     eor #$c3
2b40 : aa                       tax
2b41 : 28                       plp
2b42 : 8e0502                   stx abst+2
2b45 : 08                       php         ;flags after load/store sequence
2b46 : 49c3                     eor #$c3
2b48 : aa                       tax
2b49 : e041                     cpx #$41    ;test result
                                trap_ne     ;
2b4b : f003            >        beq skip1046
                       >        trap            ;failed not equal (non zero)
2b4d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b50 :                 >skip1046
                        
2b50 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2b51 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2b53 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2b56 : f003            >        beq skip1049
                       >        trap            ;failed not equal (non zero)
2b58 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b5b :                 >skip1049
                        
                                set_stat $ff
                       >            load_flag $ff
2b5b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b5d : 48              >            pha         ;use stack to load status
2b5e : 28              >            plp
                        
2b5f : a61c                     ldx zp1+3
2b61 : 08                       php         ;test stores do not alter flags
2b62 : 8a                       txa
2b63 : 49c3                     eor #$c3
2b65 : aa                       tax
2b66 : 28                       plp
2b67 : 8e0602                   stx abst+3
2b6a : 08                       php         ;flags after load/store sequence
2b6b : 49c3                     eor #$c3
2b6d : aa                       tax
2b6e : e000                     cpx #0      ;test result
                                trap_ne
2b70 : f003            >        beq skip1053
                       >        trap            ;failed not equal (non zero)
2b72 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b75 :                 >skip1053
                        
2b75 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2b76 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2b78 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2b7b : f003            >        beq skip1056
                       >        trap            ;failed not equal (non zero)
2b7d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b80 :                 >skip1056
                        
                        
                                set_stat 0
                       >            load_flag 0
2b80 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b82 : 48              >            pha         ;use stack to load status
2b83 : 28              >            plp
                        
2b84 : ae0802                   ldx abs1  
2b87 : 08                       php         ;test stores do not alter flags
2b88 : 8a                       txa
2b89 : 49c3                     eor #$c3
2b8b : aa                       tax
2b8c : 28                       plp
2b8d : 8612                     stx zpt  
2b8f : 08                       php         ;flags after load/store sequence
2b90 : 49c3                     eor #$c3
2b92 : c519                     cmp zp1     ;test result
                                trap_ne
2b94 : f003            >        beq skip1060
                       >        trap            ;failed not equal (non zero)
2b96 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2b99 :                 >skip1060
                        
2b99 : 68                       pla         ;load status
                                eor_flag 0
2b9a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2b9c : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2b9f : f003            >        beq skip1063
                       >        trap            ;failed not equal (non zero)
2ba1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ba4 :                 >skip1063
                        
                                set_stat 0
                       >            load_flag 0
2ba4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ba6 : 48              >            pha         ;use stack to load status
2ba7 : 28              >            plp
                        
2ba8 : ae0902                   ldx abs1+1
2bab : 08                       php         ;test stores do not alter flags
2bac : 8a                       txa
2bad : 49c3                     eor #$c3
2baf : aa                       tax
2bb0 : 28                       plp
2bb1 : 8613                     stx zpt+1
2bb3 : 08                       php         ;flags after load/store sequence
2bb4 : 49c3                     eor #$c3
2bb6 : c51a                     cmp zp1+1   ;test result
                                trap_ne
2bb8 : f003            >        beq skip1067
                       >        trap            ;failed not equal (non zero)
2bba : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2bbd :                 >skip1067
                        
2bbd : 68                       pla         ;load status
                                eor_flag 0
2bbe : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2bc0 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2bc3 : f003            >        beq skip1070
                       >        trap            ;failed not equal (non zero)
2bc5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2bc8 :                 >skip1070
                        
                                set_stat 0
                       >            load_flag 0
2bc8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bca : 48              >            pha         ;use stack to load status
2bcb : 28              >            plp
                        
2bcc : ae0a02                   ldx abs1+2
2bcf : 08                       php         ;test stores do not alter flags
2bd0 : 8a                       txa
2bd1 : 49c3                     eor #$c3
2bd3 : aa                       tax
2bd4 : 28                       plp
2bd5 : 8614                     stx zpt+2
2bd7 : 08                       php         ;flags after load/store sequence
2bd8 : 49c3                     eor #$c3
2bda : c51b                     cmp zp1+2   ;test result
                                trap_ne
2bdc : f003            >        beq skip1074
                       >        trap            ;failed not equal (non zero)
2bde : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2be1 :                 >skip1074
                        
2be1 : 68                       pla         ;load status
                                eor_flag 0
2be2 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2be4 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2be7 : f003            >        beq skip1077
                       >        trap            ;failed not equal (non zero)
2be9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2bec :                 >skip1077
                        
                                set_stat 0
                       >            load_flag 0
2bec : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bee : 48              >            pha         ;use stack to load status
2bef : 28              >            plp
                        
2bf0 : ae0b02                   ldx abs1+3
2bf3 : 08                       php         ;test stores do not alter flags
2bf4 : 8a                       txa
2bf5 : 49c3                     eor #$c3
2bf7 : aa                       tax
2bf8 : 28                       plp
2bf9 : 8615                     stx zpt+3
2bfb : 08                       php         ;flags after load/store sequence
2bfc : 49c3                     eor #$c3
2bfe : c51c                     cmp zp1+3   ;test result
                                trap_ne
2c00 : f003            >        beq skip1081
                       >        trap            ;failed not equal (non zero)
2c02 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c05 :                 >skip1081
                        
2c05 : 68                       pla         ;load status
                                eor_flag 0
2c06 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2c08 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2c0b : f003            >        beq skip1084
                       >        trap            ;failed not equal (non zero)
2c0d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c10 :                 >skip1084
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2c10 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c12 : 48              >            pha         ;use stack to load status
2c13 : 28              >            plp
                        
2c14 : ae0802                   ldx abs1  
2c17 : 08                       php         ;test stores do not alter flags
2c18 : 8a                       txa
2c19 : 49c3                     eor #$c3
2c1b : aa                       tax
2c1c : 28                       plp
2c1d : 8612                     stx zpt  
2c1f : 08                       php         ;flags after load/store sequence
2c20 : 49c3                     eor #$c3
2c22 : aa                       tax
2c23 : e419                     cpx zp1     ;test result
                                trap_ne
2c25 : f003            >        beq skip1088
                       >        trap            ;failed not equal (non zero)
2c27 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c2a :                 >skip1088
                        
2c2a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2c2b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2c2d : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2c30 : f003            >        beq skip1091
                       >        trap            ;failed not equal (non zero)
2c32 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c35 :                 >skip1091
                        
                                set_stat $ff
                       >            load_flag $ff
2c35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c37 : 48              >            pha         ;use stack to load status
2c38 : 28              >            plp
                        
2c39 : ae0902                   ldx abs1+1
2c3c : 08                       php         ;test stores do not alter flags
2c3d : 8a                       txa
2c3e : 49c3                     eor #$c3
2c40 : aa                       tax
2c41 : 28                       plp
2c42 : 8613                     stx zpt+1
2c44 : 08                       php         ;flags after load/store sequence
2c45 : 49c3                     eor #$c3
2c47 : aa                       tax
2c48 : e41a                     cpx zp1+1   ;test result
                                trap_ne
2c4a : f003            >        beq skip1095
                       >        trap            ;failed not equal (non zero)
2c4c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c4f :                 >skip1095
                        
2c4f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2c50 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2c52 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2c55 : f003            >        beq skip1098
                       >        trap            ;failed not equal (non zero)
2c57 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c5a :                 >skip1098
                        
                                set_stat $ff
                       >            load_flag $ff
2c5a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c5c : 48              >            pha         ;use stack to load status
2c5d : 28              >            plp
                        
2c5e : ae0a02                   ldx abs1+2
2c61 : 08                       php         ;test stores do not alter flags
2c62 : 8a                       txa
2c63 : 49c3                     eor #$c3
2c65 : aa                       tax
2c66 : 28                       plp
2c67 : 8614                     stx zpt+2
2c69 : 08                       php         ;flags after load/store sequence
2c6a : 49c3                     eor #$c3
2c6c : aa                       tax
2c6d : e41b                     cpx zp1+2   ;test result
                                trap_ne
2c6f : f003            >        beq skip1102
                       >        trap            ;failed not equal (non zero)
2c71 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c74 :                 >skip1102
                        
2c74 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2c75 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2c77 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2c7a : f003            >        beq skip1105
                       >        trap            ;failed not equal (non zero)
2c7c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c7f :                 >skip1105
                        
                                set_stat $ff
                       >            load_flag $ff
2c7f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c81 : 48              >            pha         ;use stack to load status
2c82 : 28              >            plp
                        
2c83 : ae0b02                   ldx abs1+3
2c86 : 08                       php         ;test stores do not alter flags
2c87 : 8a                       txa
2c88 : 49c3                     eor #$c3
2c8a : aa                       tax
2c8b : 28                       plp
2c8c : 8615                     stx zpt+3
2c8e : 08                       php         ;flags after load/store sequence
2c8f : 49c3                     eor #$c3
2c91 : aa                       tax
2c92 : e41c                     cpx zp1+3   ;test result
                                trap_ne
2c94 : f003            >        beq skip1109
                       >        trap            ;failed not equal (non zero)
2c96 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2c99 :                 >skip1109
                        
2c99 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2c9a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2c9c : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2c9f : f003            >        beq skip1112
                       >        trap            ;failed not equal (non zero)
2ca1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ca4 :                 >skip1112
                        
                        
                                set_stat 0  
                       >            load_flag 0  
2ca4 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
2ca6 : 48              >            pha         ;use stack to load status
2ca7 : 28              >            plp
                        
2ca8 : a2c3                     ldx #$c3
2caa : 08                       php
2cab : ec0802                   cpx abs1    ;test result
                                trap_ne
2cae : f003            >        beq skip1116
                       >        trap            ;failed not equal (non zero)
2cb0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2cb3 :                 >skip1116
                        
2cb3 : 68                       pla         ;load status
                                eor_flag 0
2cb4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2cb6 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2cb9 : f003            >        beq skip1119
                       >        trap            ;failed not equal (non zero)
2cbb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2cbe :                 >skip1119
                        
                                set_stat 0
                       >            load_flag 0
2cbe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cc0 : 48              >            pha         ;use stack to load status
2cc1 : 28              >            plp
                        
2cc2 : a282                     ldx #$82
2cc4 : 08                       php
2cc5 : ec0902                   cpx abs1+1  ;test result
                                trap_ne
2cc8 : f003            >        beq skip1123
                       >        trap            ;failed not equal (non zero)
2cca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ccd :                 >skip1123
                        
2ccd : 68                       pla         ;load status
                                eor_flag 0
2cce : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2cd0 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2cd3 : f003            >        beq skip1126
                       >        trap            ;failed not equal (non zero)
2cd5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2cd8 :                 >skip1126
                        
                                set_stat 0
                       >            load_flag 0
2cd8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cda : 48              >            pha         ;use stack to load status
2cdb : 28              >            plp
                        
2cdc : a241                     ldx #$41
2cde : 08                       php
2cdf : ec0a02                   cpx abs1+2  ;test result
                                trap_ne
2ce2 : f003            >        beq skip1130
                       >        trap            ;failed not equal (non zero)
2ce4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ce7 :                 >skip1130
                        
2ce7 : 68                       pla         ;load status
                                eor_flag 0
2ce8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2cea : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2ced : f003            >        beq skip1133
                       >        trap            ;failed not equal (non zero)
2cef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2cf2 :                 >skip1133
                        
                                set_stat 0
                       >            load_flag 0
2cf2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2cf4 : 48              >            pha         ;use stack to load status
2cf5 : 28              >            plp
                        
2cf6 : a200                     ldx #0
2cf8 : 08                       php
2cf9 : ec0b02                   cpx abs1+3  ;test result
                                trap_ne
2cfc : f003            >        beq skip1137
                       >        trap            ;failed not equal (non zero)
2cfe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d01 :                 >skip1137
                        
2d01 : 68                       pla         ;load status
                                eor_flag 0
2d02 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2d04 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2d07 : f003            >        beq skip1140
                       >        trap            ;failed not equal (non zero)
2d09 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d0c :                 >skip1140
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2d0c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d0e : 48              >            pha         ;use stack to load status
2d0f : 28              >            plp
                        
2d10 : a2c3                     ldx #$c3  
2d12 : 08                       php
2d13 : ec0802                   cpx abs1    ;test result
                                trap_ne
2d16 : f003            >        beq skip1144
                       >        trap            ;failed not equal (non zero)
2d18 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d1b :                 >skip1144
                        
2d1b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2d1c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2d1e : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2d21 : f003            >        beq skip1147
                       >        trap            ;failed not equal (non zero)
2d23 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d26 :                 >skip1147
                        
                                set_stat $ff
                       >            load_flag $ff
2d26 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d28 : 48              >            pha         ;use stack to load status
2d29 : 28              >            plp
                        
2d2a : a282                     ldx #$82
2d2c : 08                       php
2d2d : ec0902                   cpx abs1+1  ;test result
                                trap_ne
2d30 : f003            >        beq skip1151
                       >        trap            ;failed not equal (non zero)
2d32 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d35 :                 >skip1151
                        
2d35 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2d36 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2d38 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2d3b : f003            >        beq skip1154
                       >        trap            ;failed not equal (non zero)
2d3d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d40 :                 >skip1154
                        
                                set_stat $ff
                       >            load_flag $ff
2d40 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d42 : 48              >            pha         ;use stack to load status
2d43 : 28              >            plp
                        
2d44 : a241                     ldx #$41
2d46 : 08                       php
2d47 : ec0a02                   cpx abs1+2  ;test result
                                trap_ne
2d4a : f003            >        beq skip1158
                       >        trap            ;failed not equal (non zero)
2d4c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d4f :                 >skip1158
                        
2d4f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2d50 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2d52 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2d55 : f003            >        beq skip1161
                       >        trap            ;failed not equal (non zero)
2d57 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d5a :                 >skip1161
                        
                                set_stat $ff
                       >            load_flag $ff
2d5a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d5c : 48              >            pha         ;use stack to load status
2d5d : 28              >            plp
                        
2d5e : a200                     ldx #0
2d60 : 08                       php
2d61 : ec0b02                   cpx abs1+3  ;test result
                                trap_ne
2d64 : f003            >        beq skip1165
                       >        trap            ;failed not equal (non zero)
2d66 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d69 :                 >skip1165
                        
2d69 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2d6a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2d6c : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2d6f : f003            >        beq skip1168
                       >        trap            ;failed not equal (non zero)
2d71 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d74 :                 >skip1168
                        
                        
2d74 : a200                     ldx #0
2d76 : a512                     lda zpt  
2d78 : 49c3                     eor #$c3
2d7a : c519                     cmp zp1  
                                trap_ne     ;store to zp data
2d7c : f003            >        beq skip1170
                       >        trap            ;failed not equal (non zero)
2d7e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d81 :                 >skip1170
                        
2d81 : 8612                     stx zpt     ;clear                
2d83 : ad0302                   lda abst  
2d86 : 49c3                     eor #$c3
2d88 : cd0802                   cmp abs1  
                                trap_ne     ;store to abs data
2d8b : f003            >        beq skip1172
                       >        trap            ;failed not equal (non zero)
2d8d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d90 :                 >skip1172
                        
2d90 : 8e0302                   stx abst    ;clear                
2d93 : a513                     lda zpt+1
2d95 : 49c3                     eor #$c3
2d97 : c51a                     cmp zp1+1
                                trap_ne     ;store to zp data
2d99 : f003            >        beq skip1174
                       >        trap            ;failed not equal (non zero)
2d9b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2d9e :                 >skip1174
                        
2d9e : 8613                     stx zpt+1   ;clear                
2da0 : ad0402                   lda abst+1
2da3 : 49c3                     eor #$c3
2da5 : cd0902                   cmp abs1+1
                                trap_ne     ;store to abs data
2da8 : f003            >        beq skip1176
                       >        trap            ;failed not equal (non zero)
2daa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2dad :                 >skip1176
                        
2dad : 8e0402                   stx abst+1  ;clear                
2db0 : a514                     lda zpt+2
2db2 : 49c3                     eor #$c3
2db4 : c51b                     cmp zp1+2
                                trap_ne     ;store to zp data
2db6 : f003            >        beq skip1178
                       >        trap            ;failed not equal (non zero)
2db8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2dbb :                 >skip1178
                        
2dbb : 8614                     stx zpt+2   ;clear                
2dbd : ad0502                   lda abst+2
2dc0 : 49c3                     eor #$c3
2dc2 : cd0a02                   cmp abs1+2
                                trap_ne     ;store to abs data
2dc5 : f003            >        beq skip1180
                       >        trap            ;failed not equal (non zero)
2dc7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2dca :                 >skip1180
                        
2dca : 8e0502                   stx abst+2  ;clear                
2dcd : a515                     lda zpt+3
2dcf : 49c3                     eor #$c3
2dd1 : c51c                     cmp zp1+3
                                trap_ne     ;store to zp data
2dd3 : f003            >        beq skip1182
                       >        trap            ;failed not equal (non zero)
2dd5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2dd8 :                 >skip1182
                        
2dd8 : 8615                     stx zpt+3   ;clear                
2dda : ad0602                   lda abst+3
2ddd : 49c3                     eor #$c3
2ddf : cd0b02                   cmp abs1+3
                                trap_ne     ;store to abs data
2de2 : f003            >        beq skip1184
                       >        trap            ;failed not equal (non zero)
2de4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2de7 :                 >skip1184
                        
2de7 : 8e0602                   stx abst+3  ;clear                
                                next_test
2dea : ad0002          >            lda test_case   ;previous test
2ded : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2def : f003            >        beq skip1187
                       >        trap            ;failed not equal (non zero)
2df1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2df4 :                 >skip1187
                       >
0014 =                 >test_num = test_num + 1
2df4 : a914            >            lda #test_num   ;*** next tests' number
2df6 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
2df9 : d8              >            cld
2dfa : a900            >            lda #0
2dfc : 8512            >            sta zpt         ;set low byte of indirect pointer
2dfe : 8515            >            sta zpt+3       ;checksum high byte
2e00 : 8dbb11          >            sta range_adr   ;reset self modifying code
2e03 : 8dfb57          >            sta tandi1
2e06 : 8d2258          >            sta tandi2
2e09 : 8dbc5a          >            sta teori1
2e0c : 8de35a          >            sta teori2
2e0f : 8d7c5d          >            sta torai1
2e12 : 8da35d          >            sta torai2
2e15 : 8dba63          >            sta chkdadi  
2e18 : 8dd763          >            sta chkdsbi
2e1b : 8d6365          >            sta chkadi
2e1e : 8d8065          >            sta chksbi
2e21 : 18              >            clc
2e22 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
2e24 : 7510            >ccs31189      adc zero_page,x
2e26 : 9003            >            bcc ccs21189
2e28 : e615            >            inc zpt+3       ;carry to high byte
2e2a : 18              >            clc
2e2b : e8              >ccs21189      inx
2e2c : d0f6            >            bne ccs31189
2e2e : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
2e30 : 8613            >            stx zpt+1
2e32 : a008            >            ldy #lo(data_bss) ;data after write test area
2e34 : 7112            >ccs51189      adc (zpt),y
2e36 : 9003            >            bcc ccs41189
2e38 : e615            >            inc zpt+3       ;carry to high byte
2e3a : 18              >            clc
2e3b : c8              >ccs41189      iny
2e3c : d0f6            >            bne ccs51189
2e3e : e8              >            inx             ;advance RAM high address
2e3f : 8613            >            stx zpt+1
2e41 : e0e0            >            cpx #ram_top
2e43 : d0ef            >            bne ccs51189
2e45 : 8514            >            sta zpt+2       ;checksum low is
2e47 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
2e4a : f003            >        beq skip1190
                       >        trap            ;failed not equal (non zero)
2e4c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2e4f :                 >skip1190
                       >
2e4f : a515            >            lda zpt+3       ;checksum high is
2e51 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
2e54 : f003            >        beq skip1192
                       >        trap            ;failed not equal (non zero)
2e56 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2e59 :                 >skip1192
                       >
                       >
                        
                        
2e59 : 8d04ef            sta $ef04
2e5c : 4c4459202f2053..  db "LDY / STY - zp / abs / #", 10, 0
                                set_stat 0
                       >            load_flag 0
2e76 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e78 : 48              >            pha         ;use stack to load status
2e79 : 28              >            plp
                        
2e7a : a419                     ldy zp1  
2e7c : 08                       php         ;test stores do not alter flags
2e7d : 98                       tya
2e7e : 49c3                     eor #$c3
2e80 : a8                       tay
2e81 : 28                       plp
2e82 : 8c0302                   sty abst  
2e85 : 08                       php         ;flags after load/store sequence
2e86 : 49c3                     eor #$c3
2e88 : a8                       tay
2e89 : c0c3                     cpy #$c3    ;test result
                                trap_ne
2e8b : f003            >        beq skip1196
                       >        trap            ;failed not equal (non zero)
2e8d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2e90 :                 >skip1196
                        
2e90 : 68                       pla         ;load status
                                eor_flag 0
2e91 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2e93 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2e96 : f003            >        beq skip1199
                       >        trap            ;failed not equal (non zero)
2e98 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2e9b :                 >skip1199
                        
                                set_stat 0
                       >            load_flag 0
2e9b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e9d : 48              >            pha         ;use stack to load status
2e9e : 28              >            plp
                        
2e9f : a41a                     ldy zp1+1
2ea1 : 08                       php         ;test stores do not alter flags
2ea2 : 98                       tya
2ea3 : 49c3                     eor #$c3
2ea5 : a8                       tay
2ea6 : 28                       plp
2ea7 : 8c0402                   sty abst+1
2eaa : 08                       php         ;flags after load/store sequence
2eab : 49c3                     eor #$c3
2ead : a8                       tay
2eae : c082                     cpy #$82    ;test result
                                trap_ne
2eb0 : f003            >        beq skip1203
                       >        trap            ;failed not equal (non zero)
2eb2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2eb5 :                 >skip1203
                        
2eb5 : 68                       pla         ;load status
                                eor_flag 0
2eb6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2eb8 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2ebb : f003            >        beq skip1206
                       >        trap            ;failed not equal (non zero)
2ebd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ec0 :                 >skip1206
                        
                                set_stat 0
                       >            load_flag 0
2ec0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ec2 : 48              >            pha         ;use stack to load status
2ec3 : 28              >            plp
                        
2ec4 : a41b                     ldy zp1+2
2ec6 : 08                       php         ;test stores do not alter flags
2ec7 : 98                       tya
2ec8 : 49c3                     eor #$c3
2eca : a8                       tay
2ecb : 28                       plp
2ecc : 8c0502                   sty abst+2
2ecf : 08                       php         ;flags after load/store sequence
2ed0 : 49c3                     eor #$c3
2ed2 : a8                       tay
2ed3 : c041                     cpy #$41    ;test result
                                trap_ne
2ed5 : f003            >        beq skip1210
                       >        trap            ;failed not equal (non zero)
2ed7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2eda :                 >skip1210
                        
2eda : 68                       pla         ;load status
                                eor_flag 0
2edb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2edd : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2ee0 : f003            >        beq skip1213
                       >        trap            ;failed not equal (non zero)
2ee2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2ee5 :                 >skip1213
                        
                                set_stat 0
                       >            load_flag 0
2ee5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ee7 : 48              >            pha         ;use stack to load status
2ee8 : 28              >            plp
                        
2ee9 : a41c                     ldy zp1+3
2eeb : 08                       php         ;test stores do not alter flags
2eec : 98                       tya
2eed : 49c3                     eor #$c3
2eef : a8                       tay
2ef0 : 28                       plp
2ef1 : 8c0602                   sty abst+3
2ef4 : 08                       php         ;flags after load/store sequence
2ef5 : 49c3                     eor #$c3
2ef7 : a8                       tay
2ef8 : c000                     cpy #0      ;test result
                                trap_ne
2efa : f003            >        beq skip1217
                       >        trap            ;failed not equal (non zero)
2efc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2eff :                 >skip1217
                        
2eff : 68                       pla         ;load status
                                eor_flag 0
2f00 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2f02 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2f05 : f003            >        beq skip1220
                       >        trap            ;failed not equal (non zero)
2f07 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f0a :                 >skip1220
                        
                        
                                set_stat $ff
                       >            load_flag $ff
2f0a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f0c : 48              >            pha         ;use stack to load status
2f0d : 28              >            plp
                        
2f0e : a419                     ldy zp1  
2f10 : 08                       php         ;test stores do not alter flags
2f11 : 98                       tya
2f12 : 49c3                     eor #$c3
2f14 : a8                       tay
2f15 : 28                       plp
2f16 : 8c0302                   sty abst  
2f19 : 08                       php         ;flags after load/store sequence
2f1a : 49c3                     eor #$c3
2f1c : a8                       tay
2f1d : c0c3                     cpy #$c3    ;test result
                                trap_ne
2f1f : f003            >        beq skip1224
                       >        trap            ;failed not equal (non zero)
2f21 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f24 :                 >skip1224
                        
2f24 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2f25 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2f27 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2f2a : f003            >        beq skip1227
                       >        trap            ;failed not equal (non zero)
2f2c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f2f :                 >skip1227
                        
                                set_stat $ff
                       >            load_flag $ff
2f2f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f31 : 48              >            pha         ;use stack to load status
2f32 : 28              >            plp
                        
2f33 : a41a                     ldy zp1+1
2f35 : 08                       php         ;test stores do not alter flags
2f36 : 98                       tya
2f37 : 49c3                     eor #$c3
2f39 : a8                       tay
2f3a : 28                       plp
2f3b : 8c0402                   sty abst+1
2f3e : 08                       php         ;flags after load/store sequence
2f3f : 49c3                     eor #$c3
2f41 : a8                       tay
2f42 : c082                     cpy #$82   ;test result
                                trap_ne
2f44 : f003            >        beq skip1231
                       >        trap            ;failed not equal (non zero)
2f46 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f49 :                 >skip1231
                        
2f49 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2f4a : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2f4c : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2f4f : f003            >        beq skip1234
                       >        trap            ;failed not equal (non zero)
2f51 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f54 :                 >skip1234
                        
                                set_stat $ff
                       >            load_flag $ff
2f54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f56 : 48              >            pha         ;use stack to load status
2f57 : 28              >            plp
                        
2f58 : a41b                     ldy zp1+2
2f5a : 08                       php         ;test stores do not alter flags
2f5b : 98                       tya
2f5c : 49c3                     eor #$c3
2f5e : a8                       tay
2f5f : 28                       plp
2f60 : 8c0502                   sty abst+2
2f63 : 08                       php         ;flags after load/store sequence
2f64 : 49c3                     eor #$c3
2f66 : a8                       tay
2f67 : c041                     cpy #$41    ;test result
                                trap_ne
2f69 : f003            >        beq skip1238
                       >        trap            ;failed not equal (non zero)
2f6b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f6e :                 >skip1238
                        
2f6e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2f6f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2f71 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
2f74 : f003            >        beq skip1241
                       >        trap            ;failed not equal (non zero)
2f76 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f79 :                 >skip1241
                        
                                set_stat $ff
                       >            load_flag $ff
2f79 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f7b : 48              >            pha         ;use stack to load status
2f7c : 28              >            plp
                        
2f7d : a41c                     ldy zp1+3
2f7f : 08                       php         ;test stores do not alter flags
2f80 : 98                       tya
2f81 : 49c3                     eor #$c3
2f83 : a8                       tay
2f84 : 28                       plp
2f85 : 8c0602                   sty abst+3
2f88 : 08                       php         ;flags after load/store sequence
2f89 : 49c3                     eor #$c3
2f8b : a8                       tay
2f8c : c000                     cpy #0      ;test result
                                trap_ne
2f8e : f003            >        beq skip1245
                       >        trap            ;failed not equal (non zero)
2f90 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f93 :                 >skip1245
                        
2f93 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
2f94 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
2f96 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
2f99 : f003            >        beq skip1248
                       >        trap            ;failed not equal (non zero)
2f9b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2f9e :                 >skip1248
                        
                                
                                set_stat 0
                       >            load_flag 0
2f9e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fa0 : 48              >            pha         ;use stack to load status
2fa1 : 28              >            plp
                        
2fa2 : ac0802                   ldy abs1  
2fa5 : 08                       php         ;test stores do not alter flags
2fa6 : 98                       tya
2fa7 : 49c3                     eor #$c3
2fa9 : a8                       tay
2faa : 28                       plp
2fab : 8412                     sty zpt  
2fad : 08                       php         ;flags after load/store sequence
2fae : 49c3                     eor #$c3
2fb0 : a8                       tay
2fb1 : c419                     cpy zp1     ;test result
                                trap_ne
2fb3 : f003            >        beq skip1252
                       >        trap            ;failed not equal (non zero)
2fb5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2fb8 :                 >skip1252
                        
2fb8 : 68                       pla         ;load status
                                eor_flag 0
2fb9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2fbb : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
2fbe : f003            >        beq skip1255
                       >        trap            ;failed not equal (non zero)
2fc0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2fc3 :                 >skip1255
                        
                                set_stat 0
                       >            load_flag 0
2fc3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fc5 : 48              >            pha         ;use stack to load status
2fc6 : 28              >            plp
                        
2fc7 : ac0902                   ldy abs1+1
2fca : 08                       php         ;test stores do not alter flags
2fcb : 98                       tya
2fcc : 49c3                     eor #$c3
2fce : a8                       tay
2fcf : 28                       plp
2fd0 : 8413                     sty zpt+1
2fd2 : 08                       php         ;flags after load/store sequence
2fd3 : 49c3                     eor #$c3
2fd5 : a8                       tay
2fd6 : c41a                     cpy zp1+1   ;test result
                                trap_ne
2fd8 : f003            >        beq skip1259
                       >        trap            ;failed not equal (non zero)
2fda : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2fdd :                 >skip1259
                        
2fdd : 68                       pla         ;load status
                                eor_flag 0
2fde : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
2fe0 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
2fe3 : f003            >        beq skip1262
                       >        trap            ;failed not equal (non zero)
2fe5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
2fe8 :                 >skip1262
                        
                                set_stat 0
                       >            load_flag 0
2fe8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2fea : 48              >            pha         ;use stack to load status
2feb : 28              >            plp
                        
2fec : ac0a02                   ldy abs1+2
2fef : 08                       php         ;test stores do not alter flags
2ff0 : 98                       tya
2ff1 : 49c3                     eor #$c3
2ff3 : a8                       tay
2ff4 : 28                       plp
2ff5 : 8414                     sty zpt+2
2ff7 : 08                       php         ;flags after load/store sequence
2ff8 : 49c3                     eor #$c3
2ffa : a8                       tay
2ffb : c41b                     cpy zp1+2   ;test result
                                trap_ne
2ffd : f003            >        beq skip1266
                       >        trap            ;failed not equal (non zero)
2fff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3002 :                 >skip1266
                        
3002 : 68                       pla         ;load status
                                eor_flag 0
3003 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3005 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
3008 : f003            >        beq skip1269
                       >        trap            ;failed not equal (non zero)
300a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
300d :                 >skip1269
                        
                                set_stat 0
                       >            load_flag 0
300d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
300f : 48              >            pha         ;use stack to load status
3010 : 28              >            plp
                        
3011 : ac0b02                   ldy abs1+3
3014 : 08                       php         ;test stores do not alter flags
3015 : 98                       tya
3016 : 49c3                     eor #$c3
3018 : a8                       tay
3019 : 28                       plp
301a : 8415                     sty zpt+3
301c : 08                       php         ;flags after load/store sequence
301d : 49c3                     eor #$c3
301f : a8                       tay
3020 : c41c                     cpy zp1+3   ;test result
                                trap_ne
3022 : f003            >        beq skip1273
                       >        trap            ;failed not equal (non zero)
3024 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3027 :                 >skip1273
                        
3027 : 68                       pla         ;load status
                                eor_flag 0
3028 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
302a : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
302d : f003            >        beq skip1276
                       >        trap            ;failed not equal (non zero)
302f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3032 :                 >skip1276
                        
                        
                                set_stat $ff
                       >            load_flag $ff
3032 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3034 : 48              >            pha         ;use stack to load status
3035 : 28              >            plp
                        
3036 : ac0802                   ldy abs1  
3039 : 08                       php         ;test stores do not alter flags
303a : 98                       tya
303b : 49c3                     eor #$c3
303d : a8                       tay
303e : 28                       plp
303f : 8412                     sty zpt  
3041 : 08                       php         ;flags after load/store sequence
3042 : 49c3                     eor #$c3
3044 : a8                       tay
3045 : c519                     cmp zp1     ;test result
                                trap_ne
3047 : f003            >        beq skip1280
                       >        trap            ;failed not equal (non zero)
3049 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
304c :                 >skip1280
                        
304c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
304d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
304f : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
3052 : f003            >        beq skip1283
                       >        trap            ;failed not equal (non zero)
3054 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3057 :                 >skip1283
                        
                                set_stat $ff
                       >            load_flag $ff
3057 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3059 : 48              >            pha         ;use stack to load status
305a : 28              >            plp
                        
305b : ac0902                   ldy abs1+1
305e : 08                       php         ;test stores do not alter flags
305f : 98                       tya
3060 : 49c3                     eor #$c3
3062 : a8                       tay
3063 : 28                       plp
3064 : 8413                     sty zpt+1
3066 : 08                       php         ;flags after load/store sequence
3067 : 49c3                     eor #$c3
3069 : a8                       tay
306a : c51a                     cmp zp1+1   ;test result
                                trap_ne
306c : f003            >        beq skip1287
                       >        trap            ;failed not equal (non zero)
306e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3071 :                 >skip1287
                        
3071 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3072 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3074 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
3077 : f003            >        beq skip1290
                       >        trap            ;failed not equal (non zero)
3079 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
307c :                 >skip1290
                        
                                set_stat $ff
                       >            load_flag $ff
307c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
307e : 48              >            pha         ;use stack to load status
307f : 28              >            plp
                        
3080 : ac0a02                   ldy abs1+2
3083 : 08                       php         ;test stores do not alter flags
3084 : 98                       tya
3085 : 49c3                     eor #$c3
3087 : a8                       tay
3088 : 28                       plp
3089 : 8414                     sty zpt+2
308b : 08                       php         ;flags after load/store sequence
308c : 49c3                     eor #$c3
308e : a8                       tay
308f : c51b                     cmp zp1+2   ;test result
                                trap_ne
3091 : f003            >        beq skip1294
                       >        trap            ;failed not equal (non zero)
3093 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3096 :                 >skip1294
                        
3096 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3097 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3099 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
309c : f003            >        beq skip1297
                       >        trap            ;failed not equal (non zero)
309e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30a1 :                 >skip1297
                        
                                set_stat $ff
                       >            load_flag $ff
30a1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30a3 : 48              >            pha         ;use stack to load status
30a4 : 28              >            plp
                        
30a5 : ac0b02                   ldy abs1+3
30a8 : 08                       php         ;test stores do not alter flags
30a9 : 98                       tya
30aa : 49c3                     eor #$c3
30ac : a8                       tay
30ad : 28                       plp
30ae : 8415                     sty zpt+3
30b0 : 08                       php         ;flags after load/store sequence
30b1 : 49c3                     eor #$c3
30b3 : a8                       tay
30b4 : c51c                     cmp zp1+3   ;test result
                                trap_ne
30b6 : f003            >        beq skip1301
                       >        trap            ;failed not equal (non zero)
30b8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30bb :                 >skip1301
                        
30bb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
30bc : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
30be : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
30c1 : f003            >        beq skip1304
                       >        trap            ;failed not equal (non zero)
30c3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30c6 :                 >skip1304
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
30c6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30c8 : 48              >            pha         ;use stack to load status
30c9 : 28              >            plp
                        
30ca : a0c3                     ldy #$c3  
30cc : 08                       php
30cd : cc0802                   cpy abs1    ;test result
                                trap_ne
30d0 : f003            >        beq skip1308
                       >        trap            ;failed not equal (non zero)
30d2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30d5 :                 >skip1308
                        
30d5 : 68                       pla         ;load status
                                eor_flag 0
30d6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
30d8 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
30db : f003            >        beq skip1311
                       >        trap            ;failed not equal (non zero)
30dd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30e0 :                 >skip1311
                        
                                set_stat 0
                       >            load_flag 0
30e0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30e2 : 48              >            pha         ;use stack to load status
30e3 : 28              >            plp
                        
30e4 : a082                     ldy #$82
30e6 : 08                       php
30e7 : cc0902                   cpy abs1+1  ;test result
                                trap_ne
30ea : f003            >        beq skip1315
                       >        trap            ;failed not equal (non zero)
30ec : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30ef :                 >skip1315
                        
30ef : 68                       pla         ;load status
                                eor_flag 0
30f0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
30f2 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
30f5 : f003            >        beq skip1318
                       >        trap            ;failed not equal (non zero)
30f7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
30fa :                 >skip1318
                        
                                set_stat 0
                       >            load_flag 0
30fa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30fc : 48              >            pha         ;use stack to load status
30fd : 28              >            plp
                        
30fe : a041                     ldy #$41
3100 : 08                       php
3101 : cc0a02                   cpy abs1+2  ;test result
                                trap_ne
3104 : f003            >        beq skip1322
                       >        trap            ;failed not equal (non zero)
3106 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3109 :                 >skip1322
                        
3109 : 68                       pla         ;load status
                                eor_flag 0
310a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
310c : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
310f : f003            >        beq skip1325
                       >        trap            ;failed not equal (non zero)
3111 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3114 :                 >skip1325
                        
                                set_stat 0
                       >            load_flag 0
3114 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3116 : 48              >            pha         ;use stack to load status
3117 : 28              >            plp
                        
3118 : a000                     ldy #0
311a : 08                       php
311b : cc0b02                   cpy abs1+3  ;test result
                                trap_ne
311e : f003            >        beq skip1329
                       >        trap            ;failed not equal (non zero)
3120 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3123 :                 >skip1329
                        
3123 : 68                       pla         ;load status
                                eor_flag 0
3124 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3126 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
3129 : f003            >        beq skip1332
                       >        trap            ;failed not equal (non zero)
312b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
312e :                 >skip1332
                        
                        
                                set_stat $ff
                       >            load_flag $ff
312e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3130 : 48              >            pha         ;use stack to load status
3131 : 28              >            plp
                        
3132 : a0c3                     ldy #$c3  
3134 : 08                       php
3135 : cc0802                   cpy abs1    ;test result
                                trap_ne
3138 : f003            >        beq skip1336
                       >        trap            ;failed not equal (non zero)
313a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
313d :                 >skip1336
                        
313d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
313e : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3140 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
3143 : f003            >        beq skip1339
                       >        trap            ;failed not equal (non zero)
3145 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3148 :                 >skip1339
                        
                                set_stat $ff
                       >            load_flag $ff
3148 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
314a : 48              >            pha         ;use stack to load status
314b : 28              >            plp
                        
314c : a082                     ldy #$82
314e : 08                       php
314f : cc0902                   cpy abs1+1  ;test result
                                trap_ne
3152 : f003            >        beq skip1343
                       >        trap            ;failed not equal (non zero)
3154 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3157 :                 >skip1343
                        
3157 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3158 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
315a : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
315d : f003            >        beq skip1346
                       >        trap            ;failed not equal (non zero)
315f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3162 :                 >skip1346
                        
                                set_stat $ff
                       >            load_flag $ff
3162 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3164 : 48              >            pha         ;use stack to load status
3165 : 28              >            plp
                        
3166 : a041                     ldy #$41
3168 : 08                       php
3169 : cc0a02                   cpy abs1+2   ;test result
                                trap_ne
316c : f003            >        beq skip1350
                       >        trap            ;failed not equal (non zero)
316e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3171 :                 >skip1350
                        
3171 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3172 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3174 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
3177 : f003            >        beq skip1353
                       >        trap            ;failed not equal (non zero)
3179 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
317c :                 >skip1353
                        
                                set_stat $ff
                       >            load_flag $ff
317c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
317e : 48              >            pha         ;use stack to load status
317f : 28              >            plp
                        
3180 : a000                     ldy #0
3182 : 08                       php
3183 : cc0b02                   cpy abs1+3  ;test result
                                trap_ne
3186 : f003            >        beq skip1357
                       >        trap            ;failed not equal (non zero)
3188 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
318b :                 >skip1357
                        
318b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
318c : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
318e : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
3191 : f003            >        beq skip1360
                       >        trap            ;failed not equal (non zero)
3193 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3196 :                 >skip1360
                        
                                
3196 : a000                     ldy #0
3198 : a512                     lda zpt  
319a : 49c3                     eor #$c3
319c : c519                     cmp zp1  
                                trap_ne     ;store to zp   data
319e : f003            >        beq skip1362
                       >        trap            ;failed not equal (non zero)
31a0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31a3 :                 >skip1362
                        
31a3 : 8412                     sty zpt     ;clear                
31a5 : ad0302                   lda abst  
31a8 : 49c3                     eor #$c3
31aa : cd0802                   cmp abs1  
                                trap_ne     ;store to abs   data
31ad : f003            >        beq skip1364
                       >        trap            ;failed not equal (non zero)
31af : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31b2 :                 >skip1364
                        
31b2 : 8c0302                   sty abst    ;clear                
31b5 : a513                     lda zpt+1
31b7 : 49c3                     eor #$c3
31b9 : c51a                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
31bb : f003            >        beq skip1366
                       >        trap            ;failed not equal (non zero)
31bd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31c0 :                 >skip1366
                        
31c0 : 8413                     sty zpt+1   ;clear                
31c2 : ad0402                   lda abst+1
31c5 : 49c3                     eor #$c3
31c7 : cd0902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
31ca : f003            >        beq skip1368
                       >        trap            ;failed not equal (non zero)
31cc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31cf :                 >skip1368
                        
31cf : 8c0402                   sty abst+1  ;clear                
31d2 : a514                     lda zpt+2
31d4 : 49c3                     eor #$c3
31d6 : c51b                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
31d8 : f003            >        beq skip1370
                       >        trap            ;failed not equal (non zero)
31da : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31dd :                 >skip1370
                        
31dd : 8414                     sty zpt+2   ;clear                
31df : ad0502                   lda abst+2
31e2 : 49c3                     eor #$c3
31e4 : cd0a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
31e7 : f003            >        beq skip1372
                       >        trap            ;failed not equal (non zero)
31e9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31ec :                 >skip1372
                        
31ec : 8c0502                   sty abst+2  ;clear                
31ef : a515                     lda zpt+3
31f1 : 49c3                     eor #$c3
31f3 : c51c                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
31f5 : f003            >        beq skip1374
                       >        trap            ;failed not equal (non zero)
31f7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
31fa :                 >skip1374
                        
31fa : 8415                     sty zpt+3   ;clear                
31fc : ad0602                   lda abst+3
31ff : 49c3                     eor #$c3
3201 : cd0b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
3204 : f003            >        beq skip1376
                       >        trap            ;failed not equal (non zero)
3206 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3209 :                 >skip1376
                        
3209 : 8c0602                   sty abst+3  ;clear                
                                next_test
320c : ad0002          >            lda test_case   ;previous test
320f : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3211 : f003            >        beq skip1379
                       >        trap            ;failed not equal (non zero)
3213 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3216 :                 >skip1379
                       >
0015 =                 >test_num = test_num + 1
3216 : a915            >            lda #test_num   ;*** next tests' number
3218 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
321b : d8              >            cld
321c : a900            >            lda #0
321e : 8512            >            sta zpt         ;set low byte of indirect pointer
3220 : 8515            >            sta zpt+3       ;checksum high byte
3222 : 8dbb11          >            sta range_adr   ;reset self modifying code
3225 : 8dfb57          >            sta tandi1
3228 : 8d2258          >            sta tandi2
322b : 8dbc5a          >            sta teori1
322e : 8de35a          >            sta teori2
3231 : 8d7c5d          >            sta torai1
3234 : 8da35d          >            sta torai2
3237 : 8dba63          >            sta chkdadi  
323a : 8dd763          >            sta chkdsbi
323d : 8d6365          >            sta chkadi
3240 : 8d8065          >            sta chksbi
3243 : 18              >            clc
3244 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
3246 : 7510            >ccs31381      adc zero_page,x
3248 : 9003            >            bcc ccs21381
324a : e615            >            inc zpt+3       ;carry to high byte
324c : 18              >            clc
324d : e8              >ccs21381      inx
324e : d0f6            >            bne ccs31381
3250 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
3252 : 8613            >            stx zpt+1
3254 : a008            >            ldy #lo(data_bss) ;data after write test area
3256 : 7112            >ccs51381      adc (zpt),y
3258 : 9003            >            bcc ccs41381
325a : e615            >            inc zpt+3       ;carry to high byte
325c : 18              >            clc
325d : c8              >ccs41381      iny
325e : d0f6            >            bne ccs51381
3260 : e8              >            inx             ;advance RAM high address
3261 : 8613            >            stx zpt+1
3263 : e0e0            >            cpx #ram_top
3265 : d0ef            >            bne ccs51381
3267 : 8514            >            sta zpt+2       ;checksum low is
3269 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
326c : f003            >        beq skip1382
                       >        trap            ;failed not equal (non zero)
326e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3271 :                 >skip1382
                       >
3271 : a515            >            lda zpt+3       ;checksum high is
3273 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3276 : f003            >        beq skip1384
                       >        trap            ;failed not equal (non zero)
3278 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
327b :                 >skip1384
                       >
                       >
                        
                        
327b : 8d04ef            sta $ef04
327e : 74657374696e67..  db "testing load / store accumulator LDA / STA all addressing modes", 10, 0
32bf : 8d04ef            sta $ef04
32c2 : 4c4441202f2053..  db "LDA / STA - zp,x / abs,x", 10, 0
32dc : a203                     ldx #3
32de :                  tldax    
                                set_stat 0
                       >            load_flag 0
32de : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32e0 : 48              >            pha         ;use stack to load status
32e1 : 28              >            plp
                        
32e2 : b519                     lda zp1,x
32e4 : 08                       php         ;test stores do not alter flags
32e5 : 49c3                     eor #$c3
32e7 : 28                       plp
32e8 : 9d0302                   sta abst,x
32eb : 08                       php         ;flags after load/store sequence
32ec : 49c3                     eor #$c3
32ee : dd0802                   cmp abs1,x  ;test result
                                trap_ne
32f1 : f003            >        beq skip1388
                       >        trap            ;failed not equal (non zero)
32f3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
32f6 :                 >skip1388
                        
32f6 : 68                       pla         ;load status
                                eor_flag 0
32f7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
32f9 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
32fc : f003            >        beq skip1391
                       >        trap            ;failed not equal (non zero)
32fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3301 :                 >skip1391
                        
3301 : ca                       dex
3302 : 10da                     bpl tldax                  
                        
3304 : a203                     ldx #3
3306 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
3306 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3308 : 48              >            pha         ;use stack to load status
3309 : 28              >            plp
                        
330a : b519                     lda zp1,x
330c : 08                       php         ;test stores do not alter flags
330d : 49c3                     eor #$c3
330f : 28                       plp
3310 : 9d0302                   sta abst,x
3313 : 08                       php         ;flags after load/store sequence
3314 : 49c3                     eor #$c3
3316 : dd0802                   cmp abs1,x   ;test result
                                trap_ne
3319 : f003            >        beq skip1395
                       >        trap            ;failed not equal (non zero)
331b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
331e :                 >skip1395
                        
331e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
331f : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3321 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
3324 : f003            >        beq skip1398
                       >        trap            ;failed not equal (non zero)
3326 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3329 :                 >skip1398
                        
3329 : ca                       dex
332a : 10da                     bpl tldax1                  
                        
332c : a203                     ldx #3
332e :                  tldax2   
                                set_stat 0
                       >            load_flag 0
332e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3330 : 48              >            pha         ;use stack to load status
3331 : 28              >            plp
                        
3332 : bd0802                   lda abs1,x
3335 : 08                       php         ;test stores do not alter flags
3336 : 49c3                     eor #$c3
3338 : 28                       plp
3339 : 9512                     sta zpt,x
333b : 08                       php         ;flags after load/store sequence
333c : 49c3                     eor #$c3
333e : d519                     cmp zp1,x   ;test result
                                trap_ne
3340 : f003            >        beq skip1402
                       >        trap            ;failed not equal (non zero)
3342 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3345 :                 >skip1402
                        
3345 : 68                       pla         ;load status
                                eor_flag 0
3346 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3348 : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
334b : f003            >        beq skip1405
                       >        trap            ;failed not equal (non zero)
334d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3350 :                 >skip1405
                        
3350 : ca                       dex
3351 : 10db                     bpl tldax2                  
                        
3353 : a203                     ldx #3
3355 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
3355 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3357 : 48              >            pha         ;use stack to load status
3358 : 28              >            plp
                        
3359 : bd0802                   lda abs1,x
335c : 08                       php         ;test stores do not alter flags
335d : 49c3                     eor #$c3
335f : 28                       plp
3360 : 9512                     sta zpt,x
3362 : 08                       php         ;flags after load/store sequence
3363 : 49c3                     eor #$c3
3365 : d519                     cmp zp1,x   ;test result
                                trap_ne
3367 : f003            >        beq skip1409
                       >        trap            ;failed not equal (non zero)
3369 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
336c :                 >skip1409
                        
336c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
336d : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
336f : dd0d02                   cmp fLDx,x  ;test flags
                                trap_ne
3372 : f003            >        beq skip1412
                       >        trap            ;failed not equal (non zero)
3374 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3377 :                 >skip1412
                        
3377 : ca                       dex
3378 : 10db                     bpl tldax3
                        
337a : a203                     ldx #3      ;testing store result
337c : a000                     ldy #0
337e : b512             tstax   lda zpt,x
3380 : 49c3                     eor #$c3
3382 : d519                     cmp zp1,x
                                trap_ne     ;store to zp,x data
3384 : f003            >        beq skip1414
                       >        trap            ;failed not equal (non zero)
3386 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3389 :                 >skip1414
                        
3389 : 9412                     sty zpt,x   ;clear                
338b : bd0302                   lda abst,x
338e : 49c3                     eor #$c3
3390 : dd0802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
3393 : f003            >        beq skip1416
                       >        trap            ;failed not equal (non zero)
3395 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3398 :                 >skip1416
                        
3398 : 8a                       txa
3399 : 9d0302                   sta abst,x  ;clear                
339c : ca                       dex
339d : 10df                     bpl tstax
                                next_test
339f : ad0002          >            lda test_case   ;previous test
33a2 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
33a4 : f003            >        beq skip1419
                       >        trap            ;failed not equal (non zero)
33a6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
33a9 :                 >skip1419
                       >
0016 =                 >test_num = test_num + 1
33a9 : a916            >            lda #test_num   ;*** next tests' number
33ab : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
33ae : d8              >            cld
33af : a900            >            lda #0
33b1 : 8512            >            sta zpt         ;set low byte of indirect pointer
33b3 : 8515            >            sta zpt+3       ;checksum high byte
33b5 : 8dbb11          >            sta range_adr   ;reset self modifying code
33b8 : 8dfb57          >            sta tandi1
33bb : 8d2258          >            sta tandi2
33be : 8dbc5a          >            sta teori1
33c1 : 8de35a          >            sta teori2
33c4 : 8d7c5d          >            sta torai1
33c7 : 8da35d          >            sta torai2
33ca : 8dba63          >            sta chkdadi  
33cd : 8dd763          >            sta chkdsbi
33d0 : 8d6365          >            sta chkadi
33d3 : 8d8065          >            sta chksbi
33d6 : 18              >            clc
33d7 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
33d9 : 7510            >ccs31421      adc zero_page,x
33db : 9003            >            bcc ccs21421
33dd : e615            >            inc zpt+3       ;carry to high byte
33df : 18              >            clc
33e0 : e8              >ccs21421      inx
33e1 : d0f6            >            bne ccs31421
33e3 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
33e5 : 8613            >            stx zpt+1
33e7 : a008            >            ldy #lo(data_bss) ;data after write test area
33e9 : 7112            >ccs51421      adc (zpt),y
33eb : 9003            >            bcc ccs41421
33ed : e615            >            inc zpt+3       ;carry to high byte
33ef : 18              >            clc
33f0 : c8              >ccs41421      iny
33f1 : d0f6            >            bne ccs51421
33f3 : e8              >            inx             ;advance RAM high address
33f4 : 8613            >            stx zpt+1
33f6 : e0e0            >            cpx #ram_top
33f8 : d0ef            >            bne ccs51421
33fa : 8514            >            sta zpt+2       ;checksum low is
33fc : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
33ff : f003            >        beq skip1422
                       >        trap            ;failed not equal (non zero)
3401 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3404 :                 >skip1422
                       >
3404 : a515            >            lda zpt+3       ;checksum high is
3406 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3409 : f003            >        beq skip1424
                       >        trap            ;failed not equal (non zero)
340b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
340e :                 >skip1424
                       >
                       >
                        
                        
340e : 8d04ef            sta $ef04
3411 : 4c4441202f2053..  db "LDA / STA - (zp),y / abs,y / (zp,x)", 10, 0
3436 : a003                     ldy #3
3438 :                  tlday    
                                set_stat 0
                       >            load_flag 0
3438 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
343a : 48              >            pha         ;use stack to load status
343b : 28              >            plp
                        
343c : b12a                     lda (ind1),y
343e : 08                       php         ;test stores do not alter flags
343f : 49c3                     eor #$c3
3441 : 28                       plp
3442 : 990302                   sta abst,y
3445 : 08                       php         ;flags after load/store sequence
3446 : 49c3                     eor #$c3
3448 : d90802                   cmp abs1,y  ;test result
                                trap_ne
344b : f003            >        beq skip1428
                       >        trap            ;failed not equal (non zero)
344d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3450 :                 >skip1428
                        
3450 : 68                       pla         ;load status
                                eor_flag 0
3451 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3453 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
3456 : f003            >        beq skip1431
                       >        trap            ;failed not equal (non zero)
3458 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
345b :                 >skip1431
                        
345b : 88                       dey
345c : 10da                     bpl tlday                  
                        
345e : a003                     ldy #3
3460 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
3460 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3462 : 48              >            pha         ;use stack to load status
3463 : 28              >            plp
                        
3464 : b12a                     lda (ind1),y
3466 : 08                       php         ;test stores do not alter flags
3467 : 49c3                     eor #$c3
3469 : 28                       plp
346a : 990302                   sta abst,y
346d : 08                       php         ;flags after load/store sequence
346e : 49c3                     eor #$c3
3470 : d90802                   cmp abs1,y  ;test result
                                trap_ne
3473 : f003            >        beq skip1435
                       >        trap            ;failed not equal (non zero)
3475 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3478 :                 >skip1435
                        
3478 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3479 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
347b : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
347e : f003            >        beq skip1438
                       >        trap            ;failed not equal (non zero)
3480 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3483 :                 >skip1438
                        
3483 : 88                       dey
3484 : 10da                     bpl tlday1                  
                        
3486 : a003                     ldy #3      ;testing store result
3488 : a200                     ldx #0
348a : b90302           tstay   lda abst,y
348d : 49c3                     eor #$c3
348f : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
3492 : f003            >        beq skip1440
                       >        trap            ;failed not equal (non zero)
3494 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3497 :                 >skip1440
                        
3497 : 8a                       txa
3498 : 990302                   sta abst,y  ;clear                
349b : 88                       dey
349c : 10ec                     bpl tstay
                        
349e : a003                     ldy #3
34a0 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
34a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34a2 : 48              >            pha         ;use stack to load status
34a3 : 28              >            plp
                        
34a4 : b90802                   lda abs1,y
34a7 : 08                       php         ;test stores do not alter flags
34a8 : 49c3                     eor #$c3
34aa : 28                       plp
34ab : 9136                     sta (indt),y
34ad : 08                       php         ;flags after load/store sequence
34ae : 49c3                     eor #$c3
34b0 : d12a                     cmp (ind1),y    ;test result
                                trap_ne
34b2 : f003            >        beq skip1444
                       >        trap            ;failed not equal (non zero)
34b4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
34b7 :                 >skip1444
                        
34b7 : 68                       pla         ;load status
                                eor_flag 0
34b8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
34ba : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
34bd : f003            >        beq skip1447
                       >        trap            ;failed not equal (non zero)
34bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
34c2 :                 >skip1447
                        
34c2 : 88                       dey
34c3 : 10db                     bpl tlday2                  
                        
34c5 : a003                     ldy #3
34c7 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
34c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34c9 : 48              >            pha         ;use stack to load status
34ca : 28              >            plp
                        
34cb : b90802                   lda abs1,y
34ce : 08                       php         ;test stores do not alter flags
34cf : 49c3                     eor #$c3
34d1 : 28                       plp
34d2 : 9136                     sta (indt),y
34d4 : 08                       php         ;flags after load/store sequence
34d5 : 49c3                     eor #$c3
34d7 : d12a                     cmp (ind1),y   ;test result
                                trap_ne
34d9 : f003            >        beq skip1451
                       >        trap            ;failed not equal (non zero)
34db : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
34de :                 >skip1451
                        
34de : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
34df : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
34e1 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
34e4 : f003            >        beq skip1454
                       >        trap            ;failed not equal (non zero)
34e6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
34e9 :                 >skip1454
                        
34e9 : 88                       dey
34ea : 10db                     bpl tlday3
                                
34ec : a003                     ldy #3      ;testing store result
34ee : a200                     ldx #0
34f0 : b90302           tstay1  lda abst,y
34f3 : 49c3                     eor #$c3
34f5 : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
34f8 : f003            >        beq skip1456
                       >        trap            ;failed not equal (non zero)
34fa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
34fd :                 >skip1456
                        
34fd : 8a                       txa
34fe : 990302                   sta abst,y  ;clear                
3501 : 88                       dey
3502 : 10ec                     bpl tstay1
                                
3504 : a206                     ldx #6
3506 : a003                     ldy #3
3508 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
3508 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
350a : 48              >            pha         ;use stack to load status
350b : 28              >            plp
                        
350c : a12a                     lda (ind1,x)
350e : 08                       php         ;test stores do not alter flags
350f : 49c3                     eor #$c3
3511 : 28                       plp
3512 : 8136                     sta (indt,x)
3514 : 08                       php         ;flags after load/store sequence
3515 : 49c3                     eor #$c3
3517 : d90802                   cmp abs1,y  ;test result
                                trap_ne
351a : f003            >        beq skip1460
                       >        trap            ;failed not equal (non zero)
351c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
351f :                 >skip1460
                        
351f : 68                       pla         ;load status
                                eor_flag 0
3520 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3522 : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
3525 : f003            >        beq skip1463
                       >        trap            ;failed not equal (non zero)
3527 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
352a :                 >skip1463
                        
352a : ca                       dex
352b : ca                       dex
352c : 88                       dey
352d : 10d9                     bpl tldax4                  
                        
352f : a206                     ldx #6
3531 : a003                     ldy #3
3533 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
3533 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3535 : 48              >            pha         ;use stack to load status
3536 : 28              >            plp
                        
3537 : a12a                     lda (ind1,x)
3539 : 08                       php         ;test stores do not alter flags
353a : 49c3                     eor #$c3
353c : 28                       plp
353d : 8136                     sta (indt,x)
353f : 08                       php         ;flags after load/store sequence
3540 : 49c3                     eor #$c3
3542 : d90802                   cmp abs1,y  ;test result
                                trap_ne
3545 : f003            >        beq skip1467
                       >        trap            ;failed not equal (non zero)
3547 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
354a :                 >skip1467
                        
354a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
354b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
354d : d90d02                   cmp fLDx,y  ;test flags
                                trap_ne
3550 : f003            >        beq skip1470
                       >        trap            ;failed not equal (non zero)
3552 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3555 :                 >skip1470
                        
3555 : ca                       dex
3556 : ca                       dex
3557 : 88                       dey
3558 : 10d9                     bpl tldax5
                        
355a : a003                     ldy #3      ;testing store result
355c : a200                     ldx #0
355e : b90302           tstay2  lda abst,y
3561 : 49c3                     eor #$c3
3563 : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
3566 : f003            >        beq skip1472
                       >        trap            ;failed not equal (non zero)
3568 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
356b :                 >skip1472
                        
356b : 8a                       txa
356c : 990302                   sta abst,y  ;clear                
356f : 88                       dey
3570 : 10ec                     bpl tstay2
                                next_test
3572 : ad0002          >            lda test_case   ;previous test
3575 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3577 : f003            >        beq skip1475
                       >        trap            ;failed not equal (non zero)
3579 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
357c :                 >skip1475
                       >
0017 =                 >test_num = test_num + 1
357c : a917            >            lda #test_num   ;*** next tests' number
357e : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
3581 : d8              >            cld
3582 : a900            >            lda #0
3584 : 8512            >            sta zpt         ;set low byte of indirect pointer
3586 : 8515            >            sta zpt+3       ;checksum high byte
3588 : 8dbb11          >            sta range_adr   ;reset self modifying code
358b : 8dfb57          >            sta tandi1
358e : 8d2258          >            sta tandi2
3591 : 8dbc5a          >            sta teori1
3594 : 8de35a          >            sta teori2
3597 : 8d7c5d          >            sta torai1
359a : 8da35d          >            sta torai2
359d : 8dba63          >            sta chkdadi  
35a0 : 8dd763          >            sta chkdsbi
35a3 : 8d6365          >            sta chkadi
35a6 : 8d8065          >            sta chksbi
35a9 : 18              >            clc
35aa : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
35ac : 7510            >ccs31477      adc zero_page,x
35ae : 9003            >            bcc ccs21477
35b0 : e615            >            inc zpt+3       ;carry to high byte
35b2 : 18              >            clc
35b3 : e8              >ccs21477      inx
35b4 : d0f6            >            bne ccs31477
35b6 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
35b8 : 8613            >            stx zpt+1
35ba : a008            >            ldy #lo(data_bss) ;data after write test area
35bc : 7112            >ccs51477      adc (zpt),y
35be : 9003            >            bcc ccs41477
35c0 : e615            >            inc zpt+3       ;carry to high byte
35c2 : 18              >            clc
35c3 : c8              >ccs41477      iny
35c4 : d0f6            >            bne ccs51477
35c6 : e8              >            inx             ;advance RAM high address
35c7 : 8613            >            stx zpt+1
35c9 : e0e0            >            cpx #ram_top
35cb : d0ef            >            bne ccs51477
35cd : 8514            >            sta zpt+2       ;checksum low is
35cf : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
35d2 : f003            >        beq skip1478
                       >        trap            ;failed not equal (non zero)
35d4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
35d7 :                 >skip1478
                       >
35d7 : a515            >            lda zpt+3       ;checksum high is
35d9 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
35dc : f003            >        beq skip1480
                       >        trap            ;failed not equal (non zero)
35de : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
35e1 :                 >skip1480
                       >
                       >
                        
                        
35e1 : 8d04ef            sta $ef04
35e4 : 696e6465786564..  db "indexed wraparound test (only zp should wrap)", 10, 0
3613 : a2fd                     ldx #3+$fa
3615 : b51f             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
3617 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
361a : ca                       dex
361b : e0fa                     cpx #$fa
361d : b0f6                     bcs tldax6                  
361f : a2fd                     ldx #3+$fa
3621 : bd0e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
3624 : 9518                     sta zpt-$fa&$ff,x
3626 : ca                       dex
3627 : e0fa                     cpx #$fa
3629 : b0f6                     bcs tldax7
                                                  
362b : a203                     ldx #3      ;testing wraparound result
362d : a000                     ldy #0
362f : b512             tstax1  lda zpt,x
3631 : d519                     cmp zp1,x
                                trap_ne     ;store to zp,x data
3633 : f003            >        beq skip1482
                       >        trap            ;failed not equal (non zero)
3635 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3638 :                 >skip1482
                        
3638 : 9412                     sty zpt,x   ;clear                
363a : bd0302                   lda abst,x
363d : dd0802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
3640 : f003            >        beq skip1484
                       >        trap            ;failed not equal (non zero)
3642 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3645 :                 >skip1484
                        
3645 : 8a                       txa
3646 : 9d0302                   sta abst,x  ;clear                
3649 : ca                       dex
364a : 10e3                     bpl tstax1
                        
364c : a0fb                     ldy #3+$f8
364e : a2fe                     ldx #6+$f8
3650 : a132             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
3652 : 990b01                   sta abst-$f8,y
3655 : ca                       dex
3656 : ca                       dex
3657 : 88                       dey
3658 : c0f8                     cpy #$f8
365a : b0f4                     bcs tlday4
365c : a003                     ldy #3      ;testing wraparound result
365e : a200                     ldx #0
3660 : b90302           tstay4  lda abst,y
3663 : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
3666 : f003            >        beq skip1486
                       >        trap            ;failed not equal (non zero)
3668 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
366b :                 >skip1486
                        
366b : 8a                       txa
366c : 990302                   sta abst,y  ;clear                
366f : 88                       dey
3670 : 10ee                     bpl tstay4
                                
3672 : a0fb                     ldy #3+$f8
3674 : b91001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
3677 : 913e                     sta (inwt),y
3679 : 88                       dey
367a : c0f8                     cpy #$f8
367c : b0f6                     bcs tlday5                  
367e : a003                     ldy #3      ;testing wraparound result
3680 : a200                     ldx #0
3682 : b90302           tstay5  lda abst,y
3685 : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
3688 : f003            >        beq skip1488
                       >        trap            ;failed not equal (non zero)
368a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
368d :                 >skip1488
                        
368d : 8a                       txa
368e : 990302                   sta abst,y  ;clear                
3691 : 88                       dey
3692 : 10ee                     bpl tstay5
                        
3694 : a0fb                     ldy #3+$f8
3696 : a2fe                     ldx #6+$f8
3698 : b134             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
369a : 813e                     sta (indt-$f8&$ff,x)
369c : ca                       dex
369d : ca                       dex
369e : 88                       dey
369f : c0f8                     cpy #$f8
36a1 : b0f5                     bcs tlday6
36a3 : a003                     ldy #3      ;testing wraparound result
36a5 : a200                     ldx #0
36a7 : b90302           tstay6  lda abst,y
36aa : d90802                   cmp abs1,y
                                trap_ne     ;store to abs data
36ad : f003            >        beq skip1490
                       >        trap            ;failed not equal (non zero)
36af : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
36b2 :                 >skip1490
                        
36b2 : 8a                       txa
36b3 : 990302                   sta abst,y  ;clear                
36b6 : 88                       dey
36b7 : 10ee                     bpl tstay6
                                next_test
36b9 : ad0002          >            lda test_case   ;previous test
36bc : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
36be : f003            >        beq skip1493
                       >        trap            ;failed not equal (non zero)
36c0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
36c3 :                 >skip1493
                       >
0018 =                 >test_num = test_num + 1
36c3 : a918            >            lda #test_num   ;*** next tests' number
36c5 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
36c8 : d8              >            cld
36c9 : a900            >            lda #0
36cb : 8512            >            sta zpt         ;set low byte of indirect pointer
36cd : 8515            >            sta zpt+3       ;checksum high byte
36cf : 8dbb11          >            sta range_adr   ;reset self modifying code
36d2 : 8dfb57          >            sta tandi1
36d5 : 8d2258          >            sta tandi2
36d8 : 8dbc5a          >            sta teori1
36db : 8de35a          >            sta teori2
36de : 8d7c5d          >            sta torai1
36e1 : 8da35d          >            sta torai2
36e4 : 8dba63          >            sta chkdadi  
36e7 : 8dd763          >            sta chkdsbi
36ea : 8d6365          >            sta chkadi
36ed : 8d8065          >            sta chksbi
36f0 : 18              >            clc
36f1 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
36f3 : 7510            >ccs31495      adc zero_page,x
36f5 : 9003            >            bcc ccs21495
36f7 : e615            >            inc zpt+3       ;carry to high byte
36f9 : 18              >            clc
36fa : e8              >ccs21495      inx
36fb : d0f6            >            bne ccs31495
36fd : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
36ff : 8613            >            stx zpt+1
3701 : a008            >            ldy #lo(data_bss) ;data after write test area
3703 : 7112            >ccs51495      adc (zpt),y
3705 : 9003            >            bcc ccs41495
3707 : e615            >            inc zpt+3       ;carry to high byte
3709 : 18              >            clc
370a : c8              >ccs41495      iny
370b : d0f6            >            bne ccs51495
370d : e8              >            inx             ;advance RAM high address
370e : 8613            >            stx zpt+1
3710 : e0e0            >            cpx #ram_top
3712 : d0ef            >            bne ccs51495
3714 : 8514            >            sta zpt+2       ;checksum low is
3716 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
3719 : f003            >        beq skip1496
                       >        trap            ;failed not equal (non zero)
371b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
371e :                 >skip1496
                       >
371e : a515            >            lda zpt+3       ;checksum high is
3720 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3723 : f003            >        beq skip1498
                       >        trap            ;failed not equal (non zero)
3725 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3728 :                 >skip1498
                       >
                       >
                        
                        
3728 : 8d04ef            sta $ef04
372b : 4c4441202f2053..  db "LDA / STA - zp / abs / #", 10, 0
                                set_stat 0  
                       >            load_flag 0  
3745 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
3747 : 48              >            pha         ;use stack to load status
3748 : 28              >            plp
                        
3749 : a519                     lda zp1
374b : 08                       php         ;test stores do not alter flags
374c : 49c3                     eor #$c3
374e : 28                       plp
374f : 8d0302                   sta abst
3752 : 08                       php         ;flags after load/store sequence
3753 : 49c3                     eor #$c3
3755 : c9c3                     cmp #$c3    ;test result
                                trap_ne
3757 : f003            >        beq skip1502
                       >        trap            ;failed not equal (non zero)
3759 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
375c :                 >skip1502
                        
375c : 68                       pla         ;load status
                                eor_flag 0
375d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
375f : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
3762 : f003            >        beq skip1505
                       >        trap            ;failed not equal (non zero)
3764 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3767 :                 >skip1505
                        
                                set_stat 0
                       >            load_flag 0
3767 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3769 : 48              >            pha         ;use stack to load status
376a : 28              >            plp
                        
376b : a51a                     lda zp1+1
376d : 08                       php         ;test stores do not alter flags
376e : 49c3                     eor #$c3
3770 : 28                       plp
3771 : 8d0402                   sta abst+1
3774 : 08                       php         ;flags after load/store sequence
3775 : 49c3                     eor #$c3
3777 : c982                     cmp #$82    ;test result
                                trap_ne
3779 : f003            >        beq skip1509
                       >        trap            ;failed not equal (non zero)
377b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
377e :                 >skip1509
                        
377e : 68                       pla         ;load status
                                eor_flag 0
377f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3781 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
3784 : f003            >        beq skip1512
                       >        trap            ;failed not equal (non zero)
3786 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3789 :                 >skip1512
                        
                                set_stat 0
                       >            load_flag 0
3789 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
378b : 48              >            pha         ;use stack to load status
378c : 28              >            plp
                        
378d : a51b                     lda zp1+2
378f : 08                       php         ;test stores do not alter flags
3790 : 49c3                     eor #$c3
3792 : 28                       plp
3793 : 8d0502                   sta abst+2
3796 : 08                       php         ;flags after load/store sequence
3797 : 49c3                     eor #$c3
3799 : c941                     cmp #$41    ;test result
                                trap_ne
379b : f003            >        beq skip1516
                       >        trap            ;failed not equal (non zero)
379d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37a0 :                 >skip1516
                        
37a0 : 68                       pla         ;load status
                                eor_flag 0
37a1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
37a3 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
37a6 : f003            >        beq skip1519
                       >        trap            ;failed not equal (non zero)
37a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37ab :                 >skip1519
                        
                                set_stat 0
                       >            load_flag 0
37ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
37ad : 48              >            pha         ;use stack to load status
37ae : 28              >            plp
                        
37af : a51c                     lda zp1+3
37b1 : 08                       php         ;test stores do not alter flags
37b2 : 49c3                     eor #$c3
37b4 : 28                       plp
37b5 : 8d0602                   sta abst+3
37b8 : 08                       php         ;flags after load/store sequence
37b9 : 49c3                     eor #$c3
37bb : c900                     cmp #0      ;test result
                                trap_ne
37bd : f003            >        beq skip1523
                       >        trap            ;failed not equal (non zero)
37bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37c2 :                 >skip1523
                        
37c2 : 68                       pla         ;load status
                                eor_flag 0
37c3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
37c5 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
37c8 : f003            >        beq skip1526
                       >        trap            ;failed not equal (non zero)
37ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37cd :                 >skip1526
                        
                                set_stat $ff
                       >            load_flag $ff
37cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37cf : 48              >            pha         ;use stack to load status
37d0 : 28              >            plp
                        
37d1 : a519                     lda zp1  
37d3 : 08                       php         ;test stores do not alter flags
37d4 : 49c3                     eor #$c3
37d6 : 28                       plp
37d7 : 8d0302                   sta abst  
37da : 08                       php         ;flags after load/store sequence
37db : 49c3                     eor #$c3
37dd : c9c3                     cmp #$c3    ;test result
                                trap_ne
37df : f003            >        beq skip1530
                       >        trap            ;failed not equal (non zero)
37e1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37e4 :                 >skip1530
                        
37e4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
37e5 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
37e7 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
37ea : f003            >        beq skip1533
                       >        trap            ;failed not equal (non zero)
37ec : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
37ef :                 >skip1533
                        
                                set_stat $ff
                       >            load_flag $ff
37ef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
37f1 : 48              >            pha         ;use stack to load status
37f2 : 28              >            plp
                        
37f3 : a51a                     lda zp1+1
37f5 : 08                       php         ;test stores do not alter flags
37f6 : 49c3                     eor #$c3
37f8 : 28                       plp
37f9 : 8d0402                   sta abst+1
37fc : 08                       php         ;flags after load/store sequence
37fd : 49c3                     eor #$c3
37ff : c982                     cmp #$82    ;test result
                                trap_ne
3801 : f003            >        beq skip1537
                       >        trap            ;failed not equal (non zero)
3803 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3806 :                 >skip1537
                        
3806 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3807 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3809 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
380c : f003            >        beq skip1540
                       >        trap            ;failed not equal (non zero)
380e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3811 :                 >skip1540
                        
                                set_stat $ff
                       >            load_flag $ff
3811 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3813 : 48              >            pha         ;use stack to load status
3814 : 28              >            plp
                        
3815 : a51b                     lda zp1+2
3817 : 08                       php         ;test stores do not alter flags
3818 : 49c3                     eor #$c3
381a : 28                       plp
381b : 8d0502                   sta abst+2
381e : 08                       php         ;flags after load/store sequence
381f : 49c3                     eor #$c3
3821 : c941                     cmp #$41    ;test result
                                trap_ne
3823 : f003            >        beq skip1544
                       >        trap            ;failed not equal (non zero)
3825 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3828 :                 >skip1544
                        
3828 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3829 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
382b : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
382e : f003            >        beq skip1547
                       >        trap            ;failed not equal (non zero)
3830 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3833 :                 >skip1547
                        
                                set_stat $ff
                       >            load_flag $ff
3833 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3835 : 48              >            pha         ;use stack to load status
3836 : 28              >            plp
                        
3837 : a51c                     lda zp1+3
3839 : 08                       php         ;test stores do not alter flags
383a : 49c3                     eor #$c3
383c : 28                       plp
383d : 8d0602                   sta abst+3
3840 : 08                       php         ;flags after load/store sequence
3841 : 49c3                     eor #$c3
3843 : c900                     cmp #0      ;test result
                                trap_ne
3845 : f003            >        beq skip1551
                       >        trap            ;failed not equal (non zero)
3847 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
384a :                 >skip1551
                        
384a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
384b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
384d : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
3850 : f003            >        beq skip1554
                       >        trap            ;failed not equal (non zero)
3852 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3855 :                 >skip1554
                        
                                set_stat 0
                       >            load_flag 0
3855 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3857 : 48              >            pha         ;use stack to load status
3858 : 28              >            plp
                        
3859 : ad0802                   lda abs1  
385c : 08                       php         ;test stores do not alter flags
385d : 49c3                     eor #$c3
385f : 28                       plp
3860 : 8512                     sta zpt  
3862 : 08                       php         ;flags after load/store sequence
3863 : 49c3                     eor #$c3
3865 : c519                     cmp zp1     ;test result
                                trap_ne
3867 : f003            >        beq skip1558
                       >        trap            ;failed not equal (non zero)
3869 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
386c :                 >skip1558
                        
386c : 68                       pla         ;load status
                                eor_flag 0
386d : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
386f : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
3872 : f003            >        beq skip1561
                       >        trap            ;failed not equal (non zero)
3874 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3877 :                 >skip1561
                        
                                set_stat 0
                       >            load_flag 0
3877 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3879 : 48              >            pha         ;use stack to load status
387a : 28              >            plp
                        
387b : ad0902                   lda abs1+1
387e : 08                       php         ;test stores do not alter flags
387f : 49c3                     eor #$c3
3881 : 28                       plp
3882 : 8513                     sta zpt+1
3884 : 08                       php         ;flags after load/store sequence
3885 : 49c3                     eor #$c3
3887 : c51a                     cmp zp1+1   ;test result
                                trap_ne
3889 : f003            >        beq skip1565
                       >        trap            ;failed not equal (non zero)
388b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
388e :                 >skip1565
                        
388e : 68                       pla         ;load status
                                eor_flag 0
388f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3891 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
3894 : f003            >        beq skip1568
                       >        trap            ;failed not equal (non zero)
3896 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3899 :                 >skip1568
                        
                                set_stat 0
                       >            load_flag 0
3899 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
389b : 48              >            pha         ;use stack to load status
389c : 28              >            plp
                        
389d : ad0a02                   lda abs1+2
38a0 : 08                       php         ;test stores do not alter flags
38a1 : 49c3                     eor #$c3
38a3 : 28                       plp
38a4 : 8514                     sta zpt+2
38a6 : 08                       php         ;flags after load/store sequence
38a7 : 49c3                     eor #$c3
38a9 : c51b                     cmp zp1+2   ;test result
                                trap_ne
38ab : f003            >        beq skip1572
                       >        trap            ;failed not equal (non zero)
38ad : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38b0 :                 >skip1572
                        
38b0 : 68                       pla         ;load status
                                eor_flag 0
38b1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
38b3 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
38b6 : f003            >        beq skip1575
                       >        trap            ;failed not equal (non zero)
38b8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38bb :                 >skip1575
                        
                                set_stat 0
                       >            load_flag 0
38bb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
38bd : 48              >            pha         ;use stack to load status
38be : 28              >            plp
                        
38bf : ad0b02                   lda abs1+3
38c2 : 08                       php         ;test stores do not alter flags
38c3 : 49c3                     eor #$c3
38c5 : 28                       plp
38c6 : 8515                     sta zpt+3
38c8 : 08                       php         ;flags after load/store sequence
38c9 : 49c3                     eor #$c3
38cb : c51c                     cmp zp1+3   ;test result
                                trap_ne
38cd : f003            >        beq skip1579
                       >        trap            ;failed not equal (non zero)
38cf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38d2 :                 >skip1579
                        
38d2 : 68                       pla         ;load status
                                eor_flag 0
38d3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
38d5 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
38d8 : f003            >        beq skip1582
                       >        trap            ;failed not equal (non zero)
38da : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38dd :                 >skip1582
                        
                                set_stat $ff
                       >            load_flag $ff
38dd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
38df : 48              >            pha         ;use stack to load status
38e0 : 28              >            plp
                        
38e1 : ad0802                   lda abs1  
38e4 : 08                       php         ;test stores do not alter flags
38e5 : 49c3                     eor #$c3
38e7 : 28                       plp
38e8 : 8512                     sta zpt  
38ea : 08                       php         ;flags after load/store sequence
38eb : 49c3                     eor #$c3
38ed : c519                     cmp zp1     ;test result
                                trap_ne
38ef : f003            >        beq skip1586
                       >        trap            ;failed not equal (non zero)
38f1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38f4 :                 >skip1586
                        
38f4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
38f5 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
38f7 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
38fa : f003            >        beq skip1589
                       >        trap            ;failed not equal (non zero)
38fc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
38ff :                 >skip1589
                        
                                set_stat $ff
                       >            load_flag $ff
38ff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3901 : 48              >            pha         ;use stack to load status
3902 : 28              >            plp
                        
3903 : ad0902                   lda abs1+1
3906 : 08                       php         ;test stores do not alter flags
3907 : 49c3                     eor #$c3
3909 : 28                       plp
390a : 8513                     sta zpt+1
390c : 08                       php         ;flags after load/store sequence
390d : 49c3                     eor #$c3
390f : c51a                     cmp zp1+1   ;test result
                                trap_ne
3911 : f003            >        beq skip1593
                       >        trap            ;failed not equal (non zero)
3913 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3916 :                 >skip1593
                        
3916 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3917 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3919 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
391c : f003            >        beq skip1596
                       >        trap            ;failed not equal (non zero)
391e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3921 :                 >skip1596
                        
                                set_stat $ff
                       >            load_flag $ff
3921 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3923 : 48              >            pha         ;use stack to load status
3924 : 28              >            plp
                        
3925 : ad0a02                   lda abs1+2
3928 : 08                       php         ;test stores do not alter flags
3929 : 49c3                     eor #$c3
392b : 28                       plp
392c : 8514                     sta zpt+2
392e : 08                       php         ;flags after load/store sequence
392f : 49c3                     eor #$c3
3931 : c51b                     cmp zp1+2   ;test result
                                trap_ne
3933 : f003            >        beq skip1600
                       >        trap            ;failed not equal (non zero)
3935 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3938 :                 >skip1600
                        
3938 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3939 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
393b : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
393e : f003            >        beq skip1603
                       >        trap            ;failed not equal (non zero)
3940 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3943 :                 >skip1603
                        
                                set_stat $ff
                       >            load_flag $ff
3943 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3945 : 48              >            pha         ;use stack to load status
3946 : 28              >            plp
                        
3947 : ad0b02                   lda abs1+3
394a : 08                       php         ;test stores do not alter flags
394b : 49c3                     eor #$c3
394d : 28                       plp
394e : 8515                     sta zpt+3
3950 : 08                       php         ;flags after load/store sequence
3951 : 49c3                     eor #$c3
3953 : c51c                     cmp zp1+3   ;test result
                                trap_ne
3955 : f003            >        beq skip1607
                       >        trap            ;failed not equal (non zero)
3957 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
395a :                 >skip1607
                        
395a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
395b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
395d : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
3960 : f003            >        beq skip1610
                       >        trap            ;failed not equal (non zero)
3962 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3965 :                 >skip1610
                        
                                set_stat 0  
                       >            load_flag 0  
3965 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
3967 : 48              >            pha         ;use stack to load status
3968 : 28              >            plp
                        
3969 : a9c3                     lda #$c3
396b : 08                       php
396c : cd0802                   cmp abs1    ;test result
                                trap_ne
396f : f003            >        beq skip1614
                       >        trap            ;failed not equal (non zero)
3971 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3974 :                 >skip1614
                        
3974 : 68                       pla         ;load status
                                eor_flag 0
3975 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3977 : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
397a : f003            >        beq skip1617
                       >        trap            ;failed not equal (non zero)
397c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
397f :                 >skip1617
                        
                                set_stat 0
                       >            load_flag 0
397f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3981 : 48              >            pha         ;use stack to load status
3982 : 28              >            plp
                        
3983 : a982                     lda #$82
3985 : 08                       php
3986 : cd0902                   cmp abs1+1  ;test result
                                trap_ne
3989 : f003            >        beq skip1621
                       >        trap            ;failed not equal (non zero)
398b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
398e :                 >skip1621
                        
398e : 68                       pla         ;load status
                                eor_flag 0
398f : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
3991 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
3994 : f003            >        beq skip1624
                       >        trap            ;failed not equal (non zero)
3996 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3999 :                 >skip1624
                        
                                set_stat 0
                       >            load_flag 0
3999 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
399b : 48              >            pha         ;use stack to load status
399c : 28              >            plp
                        
399d : a941                     lda #$41
399f : 08                       php
39a0 : cd0a02                   cmp abs1+2  ;test result
                                trap_ne
39a3 : f003            >        beq skip1628
                       >        trap            ;failed not equal (non zero)
39a5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39a8 :                 >skip1628
                        
39a8 : 68                       pla         ;load status
                                eor_flag 0
39a9 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
39ab : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
39ae : f003            >        beq skip1631
                       >        trap            ;failed not equal (non zero)
39b0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39b3 :                 >skip1631
                        
                                set_stat 0
                       >            load_flag 0
39b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
39b5 : 48              >            pha         ;use stack to load status
39b6 : 28              >            plp
                        
39b7 : a900                     lda #0
39b9 : 08                       php
39ba : cd0b02                   cmp abs1+3  ;test result
                                trap_ne
39bd : f003            >        beq skip1635
                       >        trap            ;failed not equal (non zero)
39bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39c2 :                 >skip1635
                        
39c2 : 68                       pla         ;load status
                                eor_flag 0
39c3 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                        
39c5 : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
39c8 : f003            >        beq skip1638
                       >        trap            ;failed not equal (non zero)
39ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39cd :                 >skip1638
                        
                        
                                set_stat $ff
                       >            load_flag $ff
39cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39cf : 48              >            pha         ;use stack to load status
39d0 : 28              >            plp
                        
39d1 : a9c3                     lda #$c3  
39d3 : 08                       php
39d4 : cd0802                   cmp abs1    ;test result
                                trap_ne
39d7 : f003            >        beq skip1642
                       >        trap            ;failed not equal (non zero)
39d9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39dc :                 >skip1642
                        
39dc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
39dd : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
39df : cd0d02                   cmp fLDx    ;test flags
                                trap_ne
39e2 : f003            >        beq skip1645
                       >        trap            ;failed not equal (non zero)
39e4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39e7 :                 >skip1645
                        
                                set_stat $ff
                       >            load_flag $ff
39e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
39e9 : 48              >            pha         ;use stack to load status
39ea : 28              >            plp
                        
39eb : a982                     lda #$82
39ed : 08                       php
39ee : cd0902                   cmp abs1+1  ;test result
                                trap_ne
39f1 : f003            >        beq skip1649
                       >        trap            ;failed not equal (non zero)
39f3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
39f6 :                 >skip1649
                        
39f6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
39f7 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
39f9 : cd0e02                   cmp fLDx+1  ;test flags
                                trap_ne
39fc : f003            >        beq skip1652
                       >        trap            ;failed not equal (non zero)
39fe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a01 :                 >skip1652
                        
                                set_stat $ff
                       >            load_flag $ff
3a01 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a03 : 48              >            pha         ;use stack to load status
3a04 : 28              >            plp
                        
3a05 : a941                     lda #$41
3a07 : 08                       php
3a08 : cd0a02                   cmp abs1+2  ;test result
                                trap_ne
3a0b : f003            >        beq skip1656
                       >        trap            ;failed not equal (non zero)
3a0d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a10 :                 >skip1656
                        
3a10 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3a11 : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3a13 : cd0f02                   cmp fLDx+2  ;test flags
                                trap_ne
3a16 : f003            >        beq skip1659
                       >        trap            ;failed not equal (non zero)
3a18 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a1b :                 >skip1659
                        
                                set_stat $ff
                       >            load_flag $ff
3a1b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3a1d : 48              >            pha         ;use stack to load status
3a1e : 28              >            plp
                        
3a1f : a900                     lda #0
3a21 : 08                       php
3a22 : cd0b02                   cmp abs1+3  ;test result
                                trap_ne
3a25 : f003            >        beq skip1663
                       >        trap            ;failed not equal (non zero)
3a27 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a2a :                 >skip1663
                        
3a2a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
3a2b : 497d            >            eor #lo~fnz |fao         ;invert expected flags + always on bits
                        
3a2d : cd1002                   cmp fLDx+3  ;test flags
                                trap_ne
3a30 : f003            >        beq skip1666
                       >        trap            ;failed not equal (non zero)
3a32 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a35 :                 >skip1666
                        
                        
3a35 : a200                     ldx #0
3a37 : a512                     lda zpt  
3a39 : 49c3                     eor #$c3
3a3b : c519                     cmp zp1  
                                trap_ne     ;store to zp data
3a3d : f003            >        beq skip1668
                       >        trap            ;failed not equal (non zero)
3a3f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a42 :                 >skip1668
                        
3a42 : 8612                     stx zpt     ;clear                
3a44 : ad0302                   lda abst  
3a47 : 49c3                     eor #$c3
3a49 : cd0802                   cmp abs1  
                                trap_ne     ;store to abs data
3a4c : f003            >        beq skip1670
                       >        trap            ;failed not equal (non zero)
3a4e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a51 :                 >skip1670
                        
3a51 : 8e0302                   stx abst    ;clear                
3a54 : a513                     lda zpt+1
3a56 : 49c3                     eor #$c3
3a58 : c51a                     cmp zp1+1
                                trap_ne     ;store to zp data
3a5a : f003            >        beq skip1672
                       >        trap            ;failed not equal (non zero)
3a5c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a5f :                 >skip1672
                        
3a5f : 8613                     stx zpt+1   ;clear                
3a61 : ad0402                   lda abst+1
3a64 : 49c3                     eor #$c3
3a66 : cd0902                   cmp abs1+1
                                trap_ne     ;store to abs data
3a69 : f003            >        beq skip1674
                       >        trap            ;failed not equal (non zero)
3a6b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a6e :                 >skip1674
                        
3a6e : 8e0402                   stx abst+1  ;clear                
3a71 : a514                     lda zpt+2
3a73 : 49c3                     eor #$c3
3a75 : c51b                     cmp zp1+2
                                trap_ne     ;store to zp data
3a77 : f003            >        beq skip1676
                       >        trap            ;failed not equal (non zero)
3a79 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a7c :                 >skip1676
                        
3a7c : 8614                     stx zpt+2   ;clear                
3a7e : ad0502                   lda abst+2
3a81 : 49c3                     eor #$c3
3a83 : cd0a02                   cmp abs1+2
                                trap_ne     ;store to abs data
3a86 : f003            >        beq skip1678
                       >        trap            ;failed not equal (non zero)
3a88 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a8b :                 >skip1678
                        
3a8b : 8e0502                   stx abst+2  ;clear                
3a8e : a515                     lda zpt+3
3a90 : 49c3                     eor #$c3
3a92 : c51c                     cmp zp1+3
                                trap_ne     ;store to zp data
3a94 : f003            >        beq skip1680
                       >        trap            ;failed not equal (non zero)
3a96 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3a99 :                 >skip1680
                        
3a99 : 8615                     stx zpt+3   ;clear                
3a9b : ad0602                   lda abst+3
3a9e : 49c3                     eor #$c3
3aa0 : cd0b02                   cmp abs1+3
                                trap_ne     ;store to abs data
3aa3 : f003            >        beq skip1682
                       >        trap            ;failed not equal (non zero)
3aa5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3aa8 :                 >skip1682
                        
3aa8 : 8e0602                   stx abst+3  ;clear                
                                next_test
3aab : ad0002          >            lda test_case   ;previous test
3aae : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3ab0 : f003            >        beq skip1685
                       >        trap            ;failed not equal (non zero)
3ab2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ab5 :                 >skip1685
                       >
0019 =                 >test_num = test_num + 1
3ab5 : a919            >            lda #test_num   ;*** next tests' number
3ab7 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
3aba : d8              >            cld
3abb : a900            >            lda #0
3abd : 8512            >            sta zpt         ;set low byte of indirect pointer
3abf : 8515            >            sta zpt+3       ;checksum high byte
3ac1 : 8dbb11          >            sta range_adr   ;reset self modifying code
3ac4 : 8dfb57          >            sta tandi1
3ac7 : 8d2258          >            sta tandi2
3aca : 8dbc5a          >            sta teori1
3acd : 8de35a          >            sta teori2
3ad0 : 8d7c5d          >            sta torai1
3ad3 : 8da35d          >            sta torai2
3ad6 : 8dba63          >            sta chkdadi  
3ad9 : 8dd763          >            sta chkdsbi
3adc : 8d6365          >            sta chkadi
3adf : 8d8065          >            sta chksbi
3ae2 : 18              >            clc
3ae3 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
3ae5 : 7510            >ccs31687      adc zero_page,x
3ae7 : 9003            >            bcc ccs21687
3ae9 : e615            >            inc zpt+3       ;carry to high byte
3aeb : 18              >            clc
3aec : e8              >ccs21687      inx
3aed : d0f6            >            bne ccs31687
3aef : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
3af1 : 8613            >            stx zpt+1
3af3 : a008            >            ldy #lo(data_bss) ;data after write test area
3af5 : 7112            >ccs51687      adc (zpt),y
3af7 : 9003            >            bcc ccs41687
3af9 : e615            >            inc zpt+3       ;carry to high byte
3afb : 18              >            clc
3afc : c8              >ccs41687      iny
3afd : d0f6            >            bne ccs51687
3aff : e8              >            inx             ;advance RAM high address
3b00 : 8613            >            stx zpt+1
3b02 : e0e0            >            cpx #ram_top
3b04 : d0ef            >            bne ccs51687
3b06 : 8514            >            sta zpt+2       ;checksum low is
3b08 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
3b0b : f003            >        beq skip1688
                       >        trap            ;failed not equal (non zero)
3b0d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3b10 :                 >skip1688
                       >
3b10 : a515            >            lda zpt+3       ;checksum high is
3b12 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3b15 : f003            >        beq skip1690
                       >        trap            ;failed not equal (non zero)
3b17 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3b1a :                 >skip1690
                       >
                       >
                        
                        
3b1a : 8d04ef            sta $ef04
3b1d : 74657374696e67..  db "testing bit test & compares BIT CPX CPY CMP all addressing modes", 10, 0
3b5f : 8d04ef            sta $ef04
3b62 : 424954202d207a..  db "BIT - zp / abs", 10, 0
                                set_a $ff,0
                       >            load_flag 0
3b72 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b74 : 48              >            pha         ;use stack to load status
3b75 : a9ff            >            lda #$ff     ;precharge accu
3b77 : 28              >            plp
                        
3b78 : 241c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
3b7a : 08              >            php         ;save flags
3b7b : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3b7d : f003            >        beq skip1695
                       >        trap            ;failed not equal (non zero)
3b7f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3b82 :                 >skip1695
                       >
3b82 : 68              >            pla         ;load status
3b83 : 48              >            pha
                       >            cmp_flag fz 
3b84 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3b86 : f003            >        beq skip1698
                       >        trap            ;failed not equal (non zero)
3b88 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3b8b :                 >skip1698
                       >
3b8b : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3b8c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3b8e : 48              >            pha         ;use stack to load status
3b8f : a901            >            lda #1     ;precharge accu
3b91 : 28              >            plp
                        
3b92 : 241b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
3b94 : 08              >            php         ;save flags
3b95 : c901            >            cmp #1     ;test result
                       >            trap_ne
3b97 : f003            >        beq skip1703
                       >        trap            ;failed not equal (non zero)
3b99 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3b9c :                 >skip1703
                       >
3b9c : 68              >            pla         ;load status
3b9d : 48              >            pha
                       >            cmp_flag fv
3b9e : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ba0 : f003            >        beq skip1706
                       >        trap            ;failed not equal (non zero)
3ba2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ba5 :                 >skip1706
                       >
3ba5 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3ba6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ba8 : 48              >            pha         ;use stack to load status
3ba9 : a901            >            lda #1     ;precharge accu
3bab : 28              >            plp
                        
3bac : 241a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
3bae : 08              >            php         ;save flags
3baf : c901            >            cmp #1     ;test result
                       >            trap_ne
3bb1 : f003            >        beq skip1711
                       >        trap            ;failed not equal (non zero)
3bb3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bb6 :                 >skip1711
                       >
3bb6 : 68              >            pla         ;load status
3bb7 : 48              >            pha
                       >            cmp_flag fnz
3bb8 : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bba : f003            >        beq skip1714
                       >        trap            ;failed not equal (non zero)
3bbc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bbf :                 >skip1714
                       >
3bbf : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3bc0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3bc2 : 48              >            pha         ;use stack to load status
3bc3 : a901            >            lda #1     ;precharge accu
3bc5 : 28              >            plp
                        
3bc6 : 2419                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
3bc8 : 08              >            php         ;save flags
3bc9 : c901            >            cmp #1     ;test result
                       >            trap_ne
3bcb : f003            >        beq skip1719
                       >        trap            ;failed not equal (non zero)
3bcd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bd0 :                 >skip1719
                       >
3bd0 : 68              >            pla         ;load status
3bd1 : 48              >            pha
                       >            cmp_flag fnv
3bd2 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bd4 : f003            >        beq skip1722
                       >        trap            ;failed not equal (non zero)
3bd6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bd9 :                 >skip1722
                       >
3bd9 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
3bda : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3bdc : 48              >            pha         ;use stack to load status
3bdd : a9ff            >            lda #$ff     ;precharge accu
3bdf : 28              >            plp
                        
3be0 : 241c                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
3be2 : 08              >            php         ;save flags
3be3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3be5 : f003            >        beq skip1727
                       >        trap            ;failed not equal (non zero)
3be7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bea :                 >skip1727
                       >
3bea : 68              >            pla         ;load status
3beb : 48              >            pha
                       >            cmp_flag ~fnv 
3bec : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3bee : f003            >        beq skip1730
                       >        trap            ;failed not equal (non zero)
3bf0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3bf3 :                 >skip1730
                       >
3bf3 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3bf4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3bf6 : 48              >            pha         ;use stack to load status
3bf7 : a901            >            lda #1     ;precharge accu
3bf9 : 28              >            plp
                        
3bfa : 241b                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
3bfc : 08              >            php         ;save flags
3bfd : c901            >            cmp #1     ;test result
                       >            trap_ne
3bff : f003            >        beq skip1735
                       >        trap            ;failed not equal (non zero)
3c01 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c04 :                 >skip1735
                       >
3c04 : 68              >            pla         ;load status
3c05 : 48              >            pha
                       >            cmp_flag ~fnz
3c06 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c08 : f003            >        beq skip1738
                       >        trap            ;failed not equal (non zero)
3c0a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c0d :                 >skip1738
                       >
3c0d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3c0e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c10 : 48              >            pha         ;use stack to load status
3c11 : a901            >            lda #1     ;precharge accu
3c13 : 28              >            plp
                        
3c14 : 241a                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
3c16 : 08              >            php         ;save flags
3c17 : c901            >            cmp #1     ;test result
                       >            trap_ne
3c19 : f003            >        beq skip1743
                       >        trap            ;failed not equal (non zero)
3c1b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c1e :                 >skip1743
                       >
3c1e : 68              >            pla         ;load status
3c1f : 48              >            pha
                       >            cmp_flag ~fv
3c20 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c22 : f003            >        beq skip1746
                       >        trap            ;failed not equal (non zero)
3c24 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c27 :                 >skip1746
                       >
3c27 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3c28 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3c2a : 48              >            pha         ;use stack to load status
3c2b : a901            >            lda #1     ;precharge accu
3c2d : 28              >            plp
                        
3c2e : 2419                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
3c30 : 08              >            php         ;save flags
3c31 : c901            >            cmp #1     ;test result
                       >            trap_ne
3c33 : f003            >        beq skip1751
                       >        trap            ;failed not equal (non zero)
3c35 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c38 :                 >skip1751
                       >
3c38 : 68              >            pla         ;load status
3c39 : 48              >            pha
                       >            cmp_flag ~fz
3c3a : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c3c : f003            >        beq skip1754
                       >        trap            ;failed not equal (non zero)
3c3e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c41 :                 >skip1754
                       >
3c41 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
3c42 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c44 : 48              >            pha         ;use stack to load status
3c45 : a9ff            >            lda #$ff     ;precharge accu
3c47 : 28              >            plp
                        
3c48 : 2c0b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
3c4b : 08              >            php         ;save flags
3c4c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3c4e : f003            >        beq skip1759
                       >        trap            ;failed not equal (non zero)
3c50 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c53 :                 >skip1759
                       >
3c53 : 68              >            pla         ;load status
3c54 : 48              >            pha
                       >            cmp_flag fz 
3c55 : c932            >            cmp #(fz |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c57 : f003            >        beq skip1762
                       >        trap            ;failed not equal (non zero)
3c59 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c5c :                 >skip1762
                       >
3c5c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3c5d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c5f : 48              >            pha         ;use stack to load status
3c60 : a901            >            lda #1     ;precharge accu
3c62 : 28              >            plp
                        
3c63 : 2c0a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
3c66 : 08              >            php         ;save flags
3c67 : c901            >            cmp #1     ;test result
                       >            trap_ne
3c69 : f003            >        beq skip1767
                       >        trap            ;failed not equal (non zero)
3c6b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c6e :                 >skip1767
                       >
3c6e : 68              >            pla         ;load status
3c6f : 48              >            pha
                       >            cmp_flag fv
3c70 : c970            >            cmp #(fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c72 : f003            >        beq skip1770
                       >        trap            ;failed not equal (non zero)
3c74 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c77 :                 >skip1770
                       >
3c77 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3c78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c7a : 48              >            pha         ;use stack to load status
3c7b : a901            >            lda #1     ;precharge accu
3c7d : 28              >            plp
                        
3c7e : 2c0902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
3c81 : 08              >            php         ;save flags
3c82 : c901            >            cmp #1     ;test result
                       >            trap_ne
3c84 : f003            >        beq skip1775
                       >        trap            ;failed not equal (non zero)
3c86 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c89 :                 >skip1775
                       >
3c89 : 68              >            pla         ;load status
3c8a : 48              >            pha
                       >            cmp_flag fnz
3c8b : c9b2            >            cmp #(fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3c8d : f003            >        beq skip1778
                       >        trap            ;failed not equal (non zero)
3c8f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3c92 :                 >skip1778
                       >
3c92 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
3c93 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3c95 : 48              >            pha         ;use stack to load status
3c96 : a901            >            lda #1     ;precharge accu
3c98 : 28              >            plp
                        
3c99 : 2c0802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
3c9c : 08              >            php         ;save flags
3c9d : c901            >            cmp #1     ;test result
                       >            trap_ne
3c9f : f003            >        beq skip1783
                       >        trap            ;failed not equal (non zero)
3ca1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ca4 :                 >skip1783
                       >
3ca4 : 68              >            pla         ;load status
3ca5 : 48              >            pha
                       >            cmp_flag fnv
3ca6 : c9f0            >            cmp #(fnv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ca8 : f003            >        beq skip1786
                       >        trap            ;failed not equal (non zero)
3caa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cad :                 >skip1786
                       >
3cad : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
3cae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3cb0 : 48              >            pha         ;use stack to load status
3cb1 : a9ff            >            lda #$ff     ;precharge accu
3cb3 : 28              >            plp
                        
3cb4 : 2c0b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
3cb7 : 08              >            php         ;save flags
3cb8 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
3cba : f003            >        beq skip1791
                       >        trap            ;failed not equal (non zero)
3cbc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cbf :                 >skip1791
                       >
3cbf : 68              >            pla         ;load status
3cc0 : 48              >            pha
                       >            cmp_flag ~fnv 
3cc1 : c93f            >            cmp #(~fnv |fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cc3 : f003            >        beq skip1794
                       >        trap            ;failed not equal (non zero)
3cc5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cc8 :                 >skip1794
                       >
3cc8 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3cc9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ccb : 48              >            pha         ;use stack to load status
3ccc : a901            >            lda #1     ;precharge accu
3cce : 28              >            plp
                        
3ccf : 2c0a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
3cd2 : 08              >            php         ;save flags
3cd3 : c901            >            cmp #1     ;test result
                       >            trap_ne
3cd5 : f003            >        beq skip1799
                       >        trap            ;failed not equal (non zero)
3cd7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cda :                 >skip1799
                       >
3cda : 68              >            pla         ;load status
3cdb : 48              >            pha
                       >            cmp_flag ~fnz
3cdc : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cde : f003            >        beq skip1802
                       >        trap            ;failed not equal (non zero)
3ce0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ce3 :                 >skip1802
                       >
3ce3 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3ce4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ce6 : 48              >            pha         ;use stack to load status
3ce7 : a901            >            lda #1     ;precharge accu
3ce9 : 28              >            plp
                        
3cea : 2c0902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
3ced : 08              >            php         ;save flags
3cee : c901            >            cmp #1     ;test result
                       >            trap_ne
3cf0 : f003            >        beq skip1807
                       >        trap            ;failed not equal (non zero)
3cf2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cf5 :                 >skip1807
                       >
3cf5 : 68              >            pla         ;load status
3cf6 : 48              >            pha
                       >            cmp_flag ~fv
3cf7 : c9bf            >            cmp #(~fv|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3cf9 : f003            >        beq skip1810
                       >        trap            ;failed not equal (non zero)
3cfb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3cfe :                 >skip1810
                       >
3cfe : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
3cff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3d01 : 48              >            pha         ;use stack to load status
3d02 : a901            >            lda #1     ;precharge accu
3d04 : 28              >            plp
                        
3d05 : 2c0802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
3d08 : 08              >            php         ;save flags
3d09 : c901            >            cmp #1     ;test result
                       >            trap_ne
3d0b : f003            >        beq skip1815
                       >        trap            ;failed not equal (non zero)
3d0d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3d10 :                 >skip1815
                       >
3d10 : 68              >            pla         ;load status
3d11 : 48              >            pha
                       >            cmp_flag ~fz
3d12 : c9fd            >            cmp #(~fz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3d14 : f003            >        beq skip1818
                       >        trap            ;failed not equal (non zero)
3d16 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3d19 :                 >skip1818
                       >
3d19 : 28              >            plp         ;restore status
                        
                                next_test
3d1a : ad0002          >            lda test_case   ;previous test
3d1d : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3d1f : f003            >        beq skip1821
                       >        trap            ;failed not equal (non zero)
3d21 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3d24 :                 >skip1821
                       >
001a =                 >test_num = test_num + 1
3d24 : a91a            >            lda #test_num   ;*** next tests' number
3d26 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
3d29 : d8              >            cld
3d2a : a900            >            lda #0
3d2c : 8512            >            sta zpt         ;set low byte of indirect pointer
3d2e : 8515            >            sta zpt+3       ;checksum high byte
3d30 : 8dbb11          >            sta range_adr   ;reset self modifying code
3d33 : 8dfb57          >            sta tandi1
3d36 : 8d2258          >            sta tandi2
3d39 : 8dbc5a          >            sta teori1
3d3c : 8de35a          >            sta teori2
3d3f : 8d7c5d          >            sta torai1
3d42 : 8da35d          >            sta torai2
3d45 : 8dba63          >            sta chkdadi  
3d48 : 8dd763          >            sta chkdsbi
3d4b : 8d6365          >            sta chkadi
3d4e : 8d8065          >            sta chksbi
3d51 : 18              >            clc
3d52 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
3d54 : 7510            >ccs31823      adc zero_page,x
3d56 : 9003            >            bcc ccs21823
3d58 : e615            >            inc zpt+3       ;carry to high byte
3d5a : 18              >            clc
3d5b : e8              >ccs21823      inx
3d5c : d0f6            >            bne ccs31823
3d5e : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
3d60 : 8613            >            stx zpt+1
3d62 : a008            >            ldy #lo(data_bss) ;data after write test area
3d64 : 7112            >ccs51823      adc (zpt),y
3d66 : 9003            >            bcc ccs41823
3d68 : e615            >            inc zpt+3       ;carry to high byte
3d6a : 18              >            clc
3d6b : c8              >ccs41823      iny
3d6c : d0f6            >            bne ccs51823
3d6e : e8              >            inx             ;advance RAM high address
3d6f : 8613            >            stx zpt+1
3d71 : e0e0            >            cpx #ram_top
3d73 : d0ef            >            bne ccs51823
3d75 : 8514            >            sta zpt+2       ;checksum low is
3d77 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
3d7a : f003            >        beq skip1824
                       >        trap            ;failed not equal (non zero)
3d7c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3d7f :                 >skip1824
                       >
3d7f : a515            >            lda zpt+3       ;checksum high is
3d81 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3d84 : f003            >        beq skip1826
                       >        trap            ;failed not equal (non zero)
3d86 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3d89 :                 >skip1826
                       >
                       >
                        
                                
3d89 : 8d04ef            sta $ef04
3d8c : 435058202d207a..  db "CPX - zp / abs / #         ", 10, 0
                                set_x $80,0
                       >            load_flag 0
3da9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3dab : 48              >            pha         ;use stack to load status
3dac : a280            >            ldx #$80     ;precharge index x
3dae : 28              >            plp
                        
3daf : e41d                     cpx zp7f
                                tst_stat fc
3db1 : 08              >            php         ;save status
3db2 : 68              >            pla         ;use stack to retrieve status
3db3 : 48              >            pha
                       >            cmp_flag fc
3db4 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3db6 : f003            >        beq skip1832
                       >        trap            ;failed not equal (non zero)
3db8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3dbb :                 >skip1832
                       >
3dbb : 28              >            plp         ;restore status
                        
3dbc : ca                       dex
3dbd : e41d                     cpx zp7f
                                tst_stat fzc
3dbf : 08              >            php         ;save status
3dc0 : 68              >            pla         ;use stack to retrieve status
3dc1 : 48              >            pha
                       >            cmp_flag fzc
3dc2 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3dc4 : f003            >        beq skip1836
                       >        trap            ;failed not equal (non zero)
3dc6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3dc9 :                 >skip1836
                       >
3dc9 : 28              >            plp         ;restore status
                        
3dca : ca                       dex
3dcb : e41d                     cpx zp7f
                                tst_x $7e,fn
3dcd : 08              >            php         ;save flags
3dce : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3dd0 : f003            >        beq skip1839
                       >        trap            ;failed not equal (non zero)
3dd2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3dd5 :                 >skip1839
                       >
3dd5 : 68              >            pla         ;load status
3dd6 : 48              >            pha
                       >            cmp_flag fn
3dd7 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3dd9 : f003            >        beq skip1842
                       >        trap            ;failed not equal (non zero)
3ddb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3dde :                 >skip1842
                       >
3dde : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
3ddf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3de1 : 48              >            pha         ;use stack to load status
3de2 : a280            >            ldx #$80     ;precharge index x
3de4 : 28              >            plp
                        
3de5 : e41d                     cpx zp7f
                                tst_stat ~fnz
3de7 : 08              >            php         ;save status
3de8 : 68              >            pla         ;use stack to retrieve status
3de9 : 48              >            pha
                       >            cmp_flag ~fnz
3dea : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3dec : f003            >        beq skip1848
                       >        trap            ;failed not equal (non zero)
3dee : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3df1 :                 >skip1848
                       >
3df1 : 28              >            plp         ;restore status
                        
3df2 : ca                       dex
3df3 : e41d                     cpx zp7f
                                tst_stat ~fn
3df5 : 08              >            php         ;save status
3df6 : 68              >            pla         ;use stack to retrieve status
3df7 : 48              >            pha
                       >            cmp_flag ~fn
3df8 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3dfa : f003            >        beq skip1852
                       >        trap            ;failed not equal (non zero)
3dfc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3dff :                 >skip1852
                       >
3dff : 28              >            plp         ;restore status
                        
3e00 : ca                       dex
3e01 : e41d                     cpx zp7f
                                tst_x $7e,~fzc
3e03 : 08              >            php         ;save flags
3e04 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3e06 : f003            >        beq skip1855
                       >        trap            ;failed not equal (non zero)
3e08 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e0b :                 >skip1855
                       >
3e0b : 68              >            pla         ;load status
3e0c : 48              >            pha
                       >            cmp_flag ~fzc
3e0d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e0f : f003            >        beq skip1858
                       >        trap            ;failed not equal (non zero)
3e11 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e14 :                 >skip1858
                       >
3e14 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
3e15 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3e17 : 48              >            pha         ;use stack to load status
3e18 : a280            >            ldx #$80     ;precharge index x
3e1a : 28              >            plp
                        
3e1b : ec0c02                   cpx abs7f
                                tst_stat fc
3e1e : 08              >            php         ;save status
3e1f : 68              >            pla         ;use stack to retrieve status
3e20 : 48              >            pha
                       >            cmp_flag fc
3e21 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e23 : f003            >        beq skip1864
                       >        trap            ;failed not equal (non zero)
3e25 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e28 :                 >skip1864
                       >
3e28 : 28              >            plp         ;restore status
                        
3e29 : ca                       dex
3e2a : ec0c02                   cpx abs7f
                                tst_stat fzc
3e2d : 08              >            php         ;save status
3e2e : 68              >            pla         ;use stack to retrieve status
3e2f : 48              >            pha
                       >            cmp_flag fzc
3e30 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e32 : f003            >        beq skip1868
                       >        trap            ;failed not equal (non zero)
3e34 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e37 :                 >skip1868
                       >
3e37 : 28              >            plp         ;restore status
                        
3e38 : ca                       dex
3e39 : ec0c02                   cpx abs7f
                                tst_x $7e,fn
3e3c : 08              >            php         ;save flags
3e3d : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3e3f : f003            >        beq skip1871
                       >        trap            ;failed not equal (non zero)
3e41 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e44 :                 >skip1871
                       >
3e44 : 68              >            pla         ;load status
3e45 : 48              >            pha
                       >            cmp_flag fn
3e46 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e48 : f003            >        beq skip1874
                       >        trap            ;failed not equal (non zero)
3e4a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e4d :                 >skip1874
                       >
3e4d : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
3e4e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3e50 : 48              >            pha         ;use stack to load status
3e51 : a280            >            ldx #$80     ;precharge index x
3e53 : 28              >            plp
                        
3e54 : ec0c02                   cpx abs7f
                                tst_stat ~fnz
3e57 : 08              >            php         ;save status
3e58 : 68              >            pla         ;use stack to retrieve status
3e59 : 48              >            pha
                       >            cmp_flag ~fnz
3e5a : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e5c : f003            >        beq skip1880
                       >        trap            ;failed not equal (non zero)
3e5e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e61 :                 >skip1880
                       >
3e61 : 28              >            plp         ;restore status
                        
3e62 : ca                       dex
3e63 : ec0c02                   cpx abs7f
                                tst_stat ~fn
3e66 : 08              >            php         ;save status
3e67 : 68              >            pla         ;use stack to retrieve status
3e68 : 48              >            pha
                       >            cmp_flag ~fn
3e69 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e6b : f003            >        beq skip1884
                       >        trap            ;failed not equal (non zero)
3e6d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e70 :                 >skip1884
                       >
3e70 : 28              >            plp         ;restore status
                        
3e71 : ca                       dex
3e72 : ec0c02                   cpx abs7f
                                tst_x $7e,~fzc
3e75 : 08              >            php         ;save flags
3e76 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3e78 : f003            >        beq skip1887
                       >        trap            ;failed not equal (non zero)
3e7a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e7d :                 >skip1887
                       >
3e7d : 68              >            pla         ;load status
3e7e : 48              >            pha
                       >            cmp_flag ~fzc
3e7f : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e81 : f003            >        beq skip1890
                       >        trap            ;failed not equal (non zero)
3e83 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e86 :                 >skip1890
                       >
3e86 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
3e87 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3e89 : 48              >            pha         ;use stack to load status
3e8a : a280            >            ldx #$80     ;precharge index x
3e8c : 28              >            plp
                        
3e8d : e07f                     cpx #$7f
                                tst_stat fc
3e8f : 08              >            php         ;save status
3e90 : 68              >            pla         ;use stack to retrieve status
3e91 : 48              >            pha
                       >            cmp_flag fc
3e92 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3e94 : f003            >        beq skip1896
                       >        trap            ;failed not equal (non zero)
3e96 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3e99 :                 >skip1896
                       >
3e99 : 28              >            plp         ;restore status
                        
3e9a : ca                       dex
3e9b : e07f                     cpx #$7f
                                tst_stat fzc
3e9d : 08              >            php         ;save status
3e9e : 68              >            pla         ;use stack to retrieve status
3e9f : 48              >            pha
                       >            cmp_flag fzc
3ea0 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ea2 : f003            >        beq skip1900
                       >        trap            ;failed not equal (non zero)
3ea4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ea7 :                 >skip1900
                       >
3ea7 : 28              >            plp         ;restore status
                        
3ea8 : ca                       dex
3ea9 : e07f                     cpx #$7f
                                tst_x $7e,fn
3eab : 08              >            php         ;save flags
3eac : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3eae : f003            >        beq skip1903
                       >        trap            ;failed not equal (non zero)
3eb0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3eb3 :                 >skip1903
                       >
3eb3 : 68              >            pla         ;load status
3eb4 : 48              >            pha
                       >            cmp_flag fn
3eb5 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3eb7 : f003            >        beq skip1906
                       >        trap            ;failed not equal (non zero)
3eb9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ebc :                 >skip1906
                       >
3ebc : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
3ebd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3ebf : 48              >            pha         ;use stack to load status
3ec0 : a280            >            ldx #$80     ;precharge index x
3ec2 : 28              >            plp
                        
3ec3 : e07f                     cpx #$7f
                                tst_stat ~fnz
3ec5 : 08              >            php         ;save status
3ec6 : 68              >            pla         ;use stack to retrieve status
3ec7 : 48              >            pha
                       >            cmp_flag ~fnz
3ec8 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3eca : f003            >        beq skip1912
                       >        trap            ;failed not equal (non zero)
3ecc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ecf :                 >skip1912
                       >
3ecf : 28              >            plp         ;restore status
                        
3ed0 : ca                       dex
3ed1 : e07f                     cpx #$7f
                                tst_stat ~fn
3ed3 : 08              >            php         ;save status
3ed4 : 68              >            pla         ;use stack to retrieve status
3ed5 : 48              >            pha
                       >            cmp_flag ~fn
3ed6 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ed8 : f003            >        beq skip1916
                       >        trap            ;failed not equal (non zero)
3eda : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3edd :                 >skip1916
                       >
3edd : 28              >            plp         ;restore status
                        
3ede : ca                       dex
3edf : e07f                     cpx #$7f
                                tst_x $7e,~fzc
3ee1 : 08              >            php         ;save flags
3ee2 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
3ee4 : f003            >        beq skip1919
                       >        trap            ;failed not equal (non zero)
3ee6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ee9 :                 >skip1919
                       >
3ee9 : 68              >            pla         ;load status
3eea : 48              >            pha
                       >            cmp_flag ~fzc
3eeb : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3eed : f003            >        beq skip1922
                       >        trap            ;failed not equal (non zero)
3eef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3ef2 :                 >skip1922
                       >
3ef2 : 28              >            plp         ;restore status
                        
                                next_test
3ef3 : ad0002          >            lda test_case   ;previous test
3ef6 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3ef8 : f003            >        beq skip1925
                       >        trap            ;failed not equal (non zero)
3efa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3efd :                 >skip1925
                       >
001b =                 >test_num = test_num + 1
3efd : a91b            >            lda #test_num   ;*** next tests' number
3eff : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
3f02 : d8              >            cld
3f03 : a900            >            lda #0
3f05 : 8512            >            sta zpt         ;set low byte of indirect pointer
3f07 : 8515            >            sta zpt+3       ;checksum high byte
3f09 : 8dbb11          >            sta range_adr   ;reset self modifying code
3f0c : 8dfb57          >            sta tandi1
3f0f : 8d2258          >            sta tandi2
3f12 : 8dbc5a          >            sta teori1
3f15 : 8de35a          >            sta teori2
3f18 : 8d7c5d          >            sta torai1
3f1b : 8da35d          >            sta torai2
3f1e : 8dba63          >            sta chkdadi  
3f21 : 8dd763          >            sta chkdsbi
3f24 : 8d6365          >            sta chkadi
3f27 : 8d8065          >            sta chksbi
3f2a : 18              >            clc
3f2b : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
3f2d : 7510            >ccs31927      adc zero_page,x
3f2f : 9003            >            bcc ccs21927
3f31 : e615            >            inc zpt+3       ;carry to high byte
3f33 : 18              >            clc
3f34 : e8              >ccs21927      inx
3f35 : d0f6            >            bne ccs31927
3f37 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
3f39 : 8613            >            stx zpt+1
3f3b : a008            >            ldy #lo(data_bss) ;data after write test area
3f3d : 7112            >ccs51927      adc (zpt),y
3f3f : 9003            >            bcc ccs41927
3f41 : e615            >            inc zpt+3       ;carry to high byte
3f43 : 18              >            clc
3f44 : c8              >ccs41927      iny
3f45 : d0f6            >            bne ccs51927
3f47 : e8              >            inx             ;advance RAM high address
3f48 : 8613            >            stx zpt+1
3f4a : e0e0            >            cpx #ram_top
3f4c : d0ef            >            bne ccs51927
3f4e : 8514            >            sta zpt+2       ;checksum low is
3f50 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
3f53 : f003            >        beq skip1928
                       >        trap            ;failed not equal (non zero)
3f55 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3f58 :                 >skip1928
                       >
3f58 : a515            >            lda zpt+3       ;checksum high is
3f5a : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
3f5d : f003            >        beq skip1930
                       >        trap            ;failed not equal (non zero)
3f5f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3f62 :                 >skip1930
                       >
                       >
                        
                        
3f62 : 8d04ef            sta $ef04
3f65 : 435059202d207a..  db "CPY - zp / abs / #         ", 10, 0
                                set_y $80,0
                       >            load_flag 0
3f82 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3f84 : 48              >            pha         ;use stack to load status
3f85 : a080            >            ldy #$80     ;precharge index y
3f87 : 28              >            plp
                        
3f88 : c41d                     cpy zp7f
                                tst_stat fc
3f8a : 08              >            php         ;save status
3f8b : 68              >            pla         ;use stack to retrieve status
3f8c : 48              >            pha
                       >            cmp_flag fc
3f8d : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f8f : f003            >        beq skip1936
                       >        trap            ;failed not equal (non zero)
3f91 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3f94 :                 >skip1936
                       >
3f94 : 28              >            plp         ;restore status
                        
3f95 : 88                       dey
3f96 : c41d                     cpy zp7f
                                tst_stat fzc
3f98 : 08              >            php         ;save status
3f99 : 68              >            pla         ;use stack to retrieve status
3f9a : 48              >            pha
                       >            cmp_flag fzc
3f9b : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3f9d : f003            >        beq skip1940
                       >        trap            ;failed not equal (non zero)
3f9f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fa2 :                 >skip1940
                       >
3fa2 : 28              >            plp         ;restore status
                        
3fa3 : 88                       dey
3fa4 : c41d                     cpy zp7f
                                tst_y $7e,fn
3fa6 : 08              >            php         ;save flags
3fa7 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
3fa9 : f003            >        beq skip1943
                       >        trap            ;failed not equal (non zero)
3fab : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fae :                 >skip1943
                       >
3fae : 68              >            pla         ;load status
3faf : 48              >            pha
                       >            cmp_flag fn
3fb0 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fb2 : f003            >        beq skip1946
                       >        trap            ;failed not equal (non zero)
3fb4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fb7 :                 >skip1946
                       >
3fb7 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
3fb8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3fba : 48              >            pha         ;use stack to load status
3fbb : a080            >            ldy #$80     ;precharge index y
3fbd : 28              >            plp
                        
3fbe : c41d                     cpy zp7f
                                tst_stat ~fnz
3fc0 : 08              >            php         ;save status
3fc1 : 68              >            pla         ;use stack to retrieve status
3fc2 : 48              >            pha
                       >            cmp_flag ~fnz
3fc3 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fc5 : f003            >        beq skip1952
                       >        trap            ;failed not equal (non zero)
3fc7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fca :                 >skip1952
                       >
3fca : 28              >            plp         ;restore status
                        
3fcb : 88                       dey
3fcc : c41d                     cpy zp7f
                                tst_stat ~fn
3fce : 08              >            php         ;save status
3fcf : 68              >            pla         ;use stack to retrieve status
3fd0 : 48              >            pha
                       >            cmp_flag ~fn
3fd1 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fd3 : f003            >        beq skip1956
                       >        trap            ;failed not equal (non zero)
3fd5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fd8 :                 >skip1956
                       >
3fd8 : 28              >            plp         ;restore status
                        
3fd9 : 88                       dey
3fda : c41d                     cpy zp7f
                                tst_y $7e,~fzc
3fdc : 08              >            php         ;save flags
3fdd : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
3fdf : f003            >        beq skip1959
                       >        trap            ;failed not equal (non zero)
3fe1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fe4 :                 >skip1959
                       >
3fe4 : 68              >            pla         ;load status
3fe5 : 48              >            pha
                       >            cmp_flag ~fzc
3fe6 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3fe8 : f003            >        beq skip1962
                       >        trap            ;failed not equal (non zero)
3fea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
3fed :                 >skip1962
                       >
3fed : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
3fee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3ff0 : 48              >            pha         ;use stack to load status
3ff1 : a080            >            ldy #$80     ;precharge index y
3ff3 : 28              >            plp
                        
3ff4 : cc0c02                   cpy abs7f
                                tst_stat fc
3ff7 : 08              >            php         ;save status
3ff8 : 68              >            pla         ;use stack to retrieve status
3ff9 : 48              >            pha
                       >            cmp_flag fc
3ffa : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
3ffc : f003            >        beq skip1968
                       >        trap            ;failed not equal (non zero)
3ffe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4001 :                 >skip1968
                       >
4001 : 28              >            plp         ;restore status
                        
4002 : 88                       dey
4003 : cc0c02                   cpy abs7f
                                tst_stat fzc
4006 : 08              >            php         ;save status
4007 : 68              >            pla         ;use stack to retrieve status
4008 : 48              >            pha
                       >            cmp_flag fzc
4009 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
400b : f003            >        beq skip1972
                       >        trap            ;failed not equal (non zero)
400d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4010 :                 >skip1972
                       >
4010 : 28              >            plp         ;restore status
                        
4011 : 88                       dey
4012 : cc0c02                   cpy abs7f
                                tst_y $7e,fn
4015 : 08              >            php         ;save flags
4016 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
4018 : f003            >        beq skip1975
                       >        trap            ;failed not equal (non zero)
401a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
401d :                 >skip1975
                       >
401d : 68              >            pla         ;load status
401e : 48              >            pha
                       >            cmp_flag fn
401f : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4021 : f003            >        beq skip1978
                       >        trap            ;failed not equal (non zero)
4023 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4026 :                 >skip1978
                       >
4026 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
4027 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4029 : 48              >            pha         ;use stack to load status
402a : a080            >            ldy #$80     ;precharge index y
402c : 28              >            plp
                        
402d : cc0c02                   cpy abs7f
                                tst_stat ~fnz
4030 : 08              >            php         ;save status
4031 : 68              >            pla         ;use stack to retrieve status
4032 : 48              >            pha
                       >            cmp_flag ~fnz
4033 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4035 : f003            >        beq skip1984
                       >        trap            ;failed not equal (non zero)
4037 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
403a :                 >skip1984
                       >
403a : 28              >            plp         ;restore status
                        
403b : 88                       dey
403c : cc0c02                   cpy abs7f
                                tst_stat ~fn
403f : 08              >            php         ;save status
4040 : 68              >            pla         ;use stack to retrieve status
4041 : 48              >            pha
                       >            cmp_flag ~fn
4042 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4044 : f003            >        beq skip1988
                       >        trap            ;failed not equal (non zero)
4046 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4049 :                 >skip1988
                       >
4049 : 28              >            plp         ;restore status
                        
404a : 88                       dey
404b : cc0c02                   cpy abs7f
                                tst_y $7e,~fzc
404e : 08              >            php         ;save flags
404f : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
4051 : f003            >        beq skip1991
                       >        trap            ;failed not equal (non zero)
4053 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4056 :                 >skip1991
                       >
4056 : 68              >            pla         ;load status
4057 : 48              >            pha
                       >            cmp_flag ~fzc
4058 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
405a : f003            >        beq skip1994
                       >        trap            ;failed not equal (non zero)
405c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
405f :                 >skip1994
                       >
405f : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
4060 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4062 : 48              >            pha         ;use stack to load status
4063 : a080            >            ldy #$80     ;precharge index y
4065 : 28              >            plp
                        
4066 : c07f                     cpy #$7f
                                tst_stat fc
4068 : 08              >            php         ;save status
4069 : 68              >            pla         ;use stack to retrieve status
406a : 48              >            pha
                       >            cmp_flag fc
406b : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
406d : f003            >        beq skip2000
                       >        trap            ;failed not equal (non zero)
406f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4072 :                 >skip2000
                       >
4072 : 28              >            plp         ;restore status
                        
4073 : 88                       dey
4074 : c07f                     cpy #$7f
                                tst_stat fzc
4076 : 08              >            php         ;save status
4077 : 68              >            pla         ;use stack to retrieve status
4078 : 48              >            pha
                       >            cmp_flag fzc
4079 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
407b : f003            >        beq skip2004
                       >        trap            ;failed not equal (non zero)
407d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4080 :                 >skip2004
                       >
4080 : 28              >            plp         ;restore status
                        
4081 : 88                       dey
4082 : c07f                     cpy #$7f
                                tst_y $7e,fn
4084 : 08              >            php         ;save flags
4085 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
4087 : f003            >        beq skip2007
                       >        trap            ;failed not equal (non zero)
4089 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
408c :                 >skip2007
                       >
408c : 68              >            pla         ;load status
408d : 48              >            pha
                       >            cmp_flag fn
408e : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4090 : f003            >        beq skip2010
                       >        trap            ;failed not equal (non zero)
4092 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4095 :                 >skip2010
                       >
4095 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
4096 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4098 : 48              >            pha         ;use stack to load status
4099 : a080            >            ldy #$80     ;precharge index y
409b : 28              >            plp
                        
409c : c07f                     cpy #$7f
                                tst_stat ~fnz
409e : 08              >            php         ;save status
409f : 68              >            pla         ;use stack to retrieve status
40a0 : 48              >            pha
                       >            cmp_flag ~fnz
40a1 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
40a3 : f003            >        beq skip2016
                       >        trap            ;failed not equal (non zero)
40a5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
40a8 :                 >skip2016
                       >
40a8 : 28              >            plp         ;restore status
                        
40a9 : 88                       dey
40aa : c07f                     cpy #$7f
                                tst_stat ~fn
40ac : 08              >            php         ;save status
40ad : 68              >            pla         ;use stack to retrieve status
40ae : 48              >            pha
                       >            cmp_flag ~fn
40af : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
40b1 : f003            >        beq skip2020
                       >        trap            ;failed not equal (non zero)
40b3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
40b6 :                 >skip2020
                       >
40b6 : 28              >            plp         ;restore status
                        
40b7 : 88                       dey
40b8 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
40ba : 08              >            php         ;save flags
40bb : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
40bd : f003            >        beq skip2023
                       >        trap            ;failed not equal (non zero)
40bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
40c2 :                 >skip2023
                       >
40c2 : 68              >            pla         ;load status
40c3 : 48              >            pha
                       >            cmp_flag ~fzc
40c4 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
40c6 : f003            >        beq skip2026
                       >        trap            ;failed not equal (non zero)
40c8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
40cb :                 >skip2026
                       >
40cb : 28              >            plp         ;restore status
                        
                                next_test
40cc : ad0002          >            lda test_case   ;previous test
40cf : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
40d1 : f003            >        beq skip2029
                       >        trap            ;failed not equal (non zero)
40d3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
40d6 :                 >skip2029
                       >
001c =                 >test_num = test_num + 1
40d6 : a91c            >            lda #test_num   ;*** next tests' number
40d8 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
40db : d8              >            cld
40dc : a900            >            lda #0
40de : 8512            >            sta zpt         ;set low byte of indirect pointer
40e0 : 8515            >            sta zpt+3       ;checksum high byte
40e2 : 8dbb11          >            sta range_adr   ;reset self modifying code
40e5 : 8dfb57          >            sta tandi1
40e8 : 8d2258          >            sta tandi2
40eb : 8dbc5a          >            sta teori1
40ee : 8de35a          >            sta teori2
40f1 : 8d7c5d          >            sta torai1
40f4 : 8da35d          >            sta torai2
40f7 : 8dba63          >            sta chkdadi  
40fa : 8dd763          >            sta chkdsbi
40fd : 8d6365          >            sta chkadi
4100 : 8d8065          >            sta chksbi
4103 : 18              >            clc
4104 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
4106 : 7510            >ccs32031      adc zero_page,x
4108 : 9003            >            bcc ccs22031
410a : e615            >            inc zpt+3       ;carry to high byte
410c : 18              >            clc
410d : e8              >ccs22031      inx
410e : d0f6            >            bne ccs32031
4110 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
4112 : 8613            >            stx zpt+1
4114 : a008            >            ldy #lo(data_bss) ;data after write test area
4116 : 7112            >ccs52031      adc (zpt),y
4118 : 9003            >            bcc ccs42031
411a : e615            >            inc zpt+3       ;carry to high byte
411c : 18              >            clc
411d : c8              >ccs42031      iny
411e : d0f6            >            bne ccs52031
4120 : e8              >            inx             ;advance RAM high address
4121 : 8613            >            stx zpt+1
4123 : e0e0            >            cpx #ram_top
4125 : d0ef            >            bne ccs52031
4127 : 8514            >            sta zpt+2       ;checksum low is
4129 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
412c : f003            >        beq skip2032
                       >        trap            ;failed not equal (non zero)
412e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4131 :                 >skip2032
                       >
4131 : a515            >            lda zpt+3       ;checksum high is
4133 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
4136 : f003            >        beq skip2034
                       >        trap            ;failed not equal (non zero)
4138 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
413b :                 >skip2034
                       >
                       >
                        
                        
413b : 8d04ef            sta $ef04
413e : 434d50202d207a..  db "CMP - zp / abs / #         ", 10, 0
                                set_a $80,0
                       >            load_flag 0
415b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
415d : 48              >            pha         ;use stack to load status
415e : a980            >            lda #$80     ;precharge accu
4160 : 28              >            plp
                        
4161 : c51d                     cmp zp7f
                                tst_a $80,fc
4163 : 08              >            php         ;save flags
4164 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4166 : f003            >        beq skip2039
                       >        trap            ;failed not equal (non zero)
4168 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
416b :                 >skip2039
                       >
416b : 68              >            pla         ;load status
416c : 48              >            pha
                       >            cmp_flag fc
416d : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
416f : f003            >        beq skip2042
                       >        trap            ;failed not equal (non zero)
4171 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4174 :                 >skip2042
                       >
4174 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
4175 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4177 : 48              >            pha         ;use stack to load status
4178 : a97f            >            lda #$7f     ;precharge accu
417a : 28              >            plp
                        
417b : c51d                     cmp zp7f
                                tst_a $7f,fzc
417d : 08              >            php         ;save flags
417e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
4180 : f003            >        beq skip2047
                       >        trap            ;failed not equal (non zero)
4182 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4185 :                 >skip2047
                       >
4185 : 68              >            pla         ;load status
4186 : 48              >            pha
                       >            cmp_flag fzc
4187 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4189 : f003            >        beq skip2050
                       >        trap            ;failed not equal (non zero)
418b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
418e :                 >skip2050
                       >
418e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
418f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4191 : 48              >            pha         ;use stack to load status
4192 : a97e            >            lda #$7e     ;precharge accu
4194 : 28              >            plp
                        
4195 : c51d                     cmp zp7f
                                tst_a $7e,fn
4197 : 08              >            php         ;save flags
4198 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
419a : f003            >        beq skip2055
                       >        trap            ;failed not equal (non zero)
419c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
419f :                 >skip2055
                       >
419f : 68              >            pla         ;load status
41a0 : 48              >            pha
                       >            cmp_flag fn
41a1 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
41a3 : f003            >        beq skip2058
                       >        trap            ;failed not equal (non zero)
41a5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41a8 :                 >skip2058
                       >
41a8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
41a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
41ab : 48              >            pha         ;use stack to load status
41ac : a980            >            lda #$80     ;precharge accu
41ae : 28              >            plp
                        
41af : c51d                     cmp zp7f
                                tst_a $80,~fnz
41b1 : 08              >            php         ;save flags
41b2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
41b4 : f003            >        beq skip2063
                       >        trap            ;failed not equal (non zero)
41b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41b9 :                 >skip2063
                       >
41b9 : 68              >            pla         ;load status
41ba : 48              >            pha
                       >            cmp_flag ~fnz
41bb : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
41bd : f003            >        beq skip2066
                       >        trap            ;failed not equal (non zero)
41bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41c2 :                 >skip2066
                       >
41c2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
41c3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
41c5 : 48              >            pha         ;use stack to load status
41c6 : a97f            >            lda #$7f     ;precharge accu
41c8 : 28              >            plp
                        
41c9 : c51d                     cmp zp7f
                                tst_a $7f,~fn
41cb : 08              >            php         ;save flags
41cc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
41ce : f003            >        beq skip2071
                       >        trap            ;failed not equal (non zero)
41d0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41d3 :                 >skip2071
                       >
41d3 : 68              >            pla         ;load status
41d4 : 48              >            pha
                       >            cmp_flag ~fn
41d5 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
41d7 : f003            >        beq skip2074
                       >        trap            ;failed not equal (non zero)
41d9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41dc :                 >skip2074
                       >
41dc : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
41dd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
41df : 48              >            pha         ;use stack to load status
41e0 : a97e            >            lda #$7e     ;precharge accu
41e2 : 28              >            plp
                        
41e3 : c51d                     cmp zp7f
                                tst_a $7e,~fzc
41e5 : 08              >            php         ;save flags
41e6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
41e8 : f003            >        beq skip2079
                       >        trap            ;failed not equal (non zero)
41ea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41ed :                 >skip2079
                       >
41ed : 68              >            pla         ;load status
41ee : 48              >            pha
                       >            cmp_flag ~fzc
41ef : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
41f1 : f003            >        beq skip2082
                       >        trap            ;failed not equal (non zero)
41f3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
41f6 :                 >skip2082
                       >
41f6 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
41f7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
41f9 : 48              >            pha         ;use stack to load status
41fa : a980            >            lda #$80     ;precharge accu
41fc : 28              >            plp
                        
41fd : cd0c02                   cmp abs7f
                                tst_a $80,fc
4200 : 08              >            php         ;save flags
4201 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4203 : f003            >        beq skip2087
                       >        trap            ;failed not equal (non zero)
4205 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4208 :                 >skip2087
                       >
4208 : 68              >            pla         ;load status
4209 : 48              >            pha
                       >            cmp_flag fc
420a : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
420c : f003            >        beq skip2090
                       >        trap            ;failed not equal (non zero)
420e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4211 :                 >skip2090
                       >
4211 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
4212 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4214 : 48              >            pha         ;use stack to load status
4215 : a97f            >            lda #$7f     ;precharge accu
4217 : 28              >            plp
                        
4218 : cd0c02                   cmp abs7f
                                tst_a $7f,fzc
421b : 08              >            php         ;save flags
421c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
421e : f003            >        beq skip2095
                       >        trap            ;failed not equal (non zero)
4220 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4223 :                 >skip2095
                       >
4223 : 68              >            pla         ;load status
4224 : 48              >            pha
                       >            cmp_flag fzc
4225 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4227 : f003            >        beq skip2098
                       >        trap            ;failed not equal (non zero)
4229 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
422c :                 >skip2098
                       >
422c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
422d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
422f : 48              >            pha         ;use stack to load status
4230 : a97e            >            lda #$7e     ;precharge accu
4232 : 28              >            plp
                        
4233 : cd0c02                   cmp abs7f
                                tst_a $7e,fn
4236 : 08              >            php         ;save flags
4237 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4239 : f003            >        beq skip2103
                       >        trap            ;failed not equal (non zero)
423b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
423e :                 >skip2103
                       >
423e : 68              >            pla         ;load status
423f : 48              >            pha
                       >            cmp_flag fn
4240 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4242 : f003            >        beq skip2106
                       >        trap            ;failed not equal (non zero)
4244 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4247 :                 >skip2106
                       >
4247 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
4248 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
424a : 48              >            pha         ;use stack to load status
424b : a980            >            lda #$80     ;precharge accu
424d : 28              >            plp
                        
424e : cd0c02                   cmp abs7f
                                tst_a $80,~fnz
4251 : 08              >            php         ;save flags
4252 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4254 : f003            >        beq skip2111
                       >        trap            ;failed not equal (non zero)
4256 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4259 :                 >skip2111
                       >
4259 : 68              >            pla         ;load status
425a : 48              >            pha
                       >            cmp_flag ~fnz
425b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
425d : f003            >        beq skip2114
                       >        trap            ;failed not equal (non zero)
425f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4262 :                 >skip2114
                       >
4262 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
4263 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4265 : 48              >            pha         ;use stack to load status
4266 : a97f            >            lda #$7f     ;precharge accu
4268 : 28              >            plp
                        
4269 : cd0c02                   cmp abs7f
                                tst_a $7f,~fn
426c : 08              >            php         ;save flags
426d : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
426f : f003            >        beq skip2119
                       >        trap            ;failed not equal (non zero)
4271 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4274 :                 >skip2119
                       >
4274 : 68              >            pla         ;load status
4275 : 48              >            pha
                       >            cmp_flag ~fn
4276 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4278 : f003            >        beq skip2122
                       >        trap            ;failed not equal (non zero)
427a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
427d :                 >skip2122
                       >
427d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
427e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4280 : 48              >            pha         ;use stack to load status
4281 : a97e            >            lda #$7e     ;precharge accu
4283 : 28              >            plp
                        
4284 : cd0c02                   cmp abs7f
                                tst_a $7e,~fzc
4287 : 08              >            php         ;save flags
4288 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
428a : f003            >        beq skip2127
                       >        trap            ;failed not equal (non zero)
428c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
428f :                 >skip2127
                       >
428f : 68              >            pla         ;load status
4290 : 48              >            pha
                       >            cmp_flag ~fzc
4291 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4293 : f003            >        beq skip2130
                       >        trap            ;failed not equal (non zero)
4295 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4298 :                 >skip2130
                       >
4298 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
4299 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
429b : 48              >            pha         ;use stack to load status
429c : a980            >            lda #$80     ;precharge accu
429e : 28              >            plp
                        
429f : c97f                     cmp #$7f
                                tst_a $80,fc
42a1 : 08              >            php         ;save flags
42a2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
42a4 : f003            >        beq skip2135
                       >        trap            ;failed not equal (non zero)
42a6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42a9 :                 >skip2135
                       >
42a9 : 68              >            pla         ;load status
42aa : 48              >            pha
                       >            cmp_flag fc
42ab : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
42ad : f003            >        beq skip2138
                       >        trap            ;failed not equal (non zero)
42af : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42b2 :                 >skip2138
                       >
42b2 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
42b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
42b5 : 48              >            pha         ;use stack to load status
42b6 : a97f            >            lda #$7f     ;precharge accu
42b8 : 28              >            plp
                        
42b9 : c97f                     cmp #$7f
                                tst_a $7f,fzc
42bb : 08              >            php         ;save flags
42bc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
42be : f003            >        beq skip2143
                       >        trap            ;failed not equal (non zero)
42c0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42c3 :                 >skip2143
                       >
42c3 : 68              >            pla         ;load status
42c4 : 48              >            pha
                       >            cmp_flag fzc
42c5 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
42c7 : f003            >        beq skip2146
                       >        trap            ;failed not equal (non zero)
42c9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42cc :                 >skip2146
                       >
42cc : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
42cd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
42cf : 48              >            pha         ;use stack to load status
42d0 : a97e            >            lda #$7e     ;precharge accu
42d2 : 28              >            plp
                        
42d3 : c97f                     cmp #$7f
                                tst_a $7e,fn
42d5 : 08              >            php         ;save flags
42d6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
42d8 : f003            >        beq skip2151
                       >        trap            ;failed not equal (non zero)
42da : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42dd :                 >skip2151
                       >
42dd : 68              >            pla         ;load status
42de : 48              >            pha
                       >            cmp_flag fn
42df : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
42e1 : f003            >        beq skip2154
                       >        trap            ;failed not equal (non zero)
42e3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42e6 :                 >skip2154
                       >
42e6 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
42e7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
42e9 : 48              >            pha         ;use stack to load status
42ea : a980            >            lda #$80     ;precharge accu
42ec : 28              >            plp
                        
42ed : c97f                     cmp #$7f
                                tst_a $80,~fnz
42ef : 08              >            php         ;save flags
42f0 : c980            >            cmp #$80     ;test result
                       >            trap_ne
42f2 : f003            >        beq skip2159
                       >        trap            ;failed not equal (non zero)
42f4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
42f7 :                 >skip2159
                       >
42f7 : 68              >            pla         ;load status
42f8 : 48              >            pha
                       >            cmp_flag ~fnz
42f9 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
42fb : f003            >        beq skip2162
                       >        trap            ;failed not equal (non zero)
42fd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4300 :                 >skip2162
                       >
4300 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
4301 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4303 : 48              >            pha         ;use stack to load status
4304 : a97f            >            lda #$7f     ;precharge accu
4306 : 28              >            plp
                        
4307 : c97f                     cmp #$7f
                                tst_a $7f,~fn
4309 : 08              >            php         ;save flags
430a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
430c : f003            >        beq skip2167
                       >        trap            ;failed not equal (non zero)
430e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4311 :                 >skip2167
                       >
4311 : 68              >            pla         ;load status
4312 : 48              >            pha
                       >            cmp_flag ~fn
4313 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4315 : f003            >        beq skip2170
                       >        trap            ;failed not equal (non zero)
4317 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
431a :                 >skip2170
                       >
431a : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
431b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
431d : 48              >            pha         ;use stack to load status
431e : a97e            >            lda #$7e     ;precharge accu
4320 : 28              >            plp
                        
4321 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
4323 : 08              >            php         ;save flags
4324 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4326 : f003            >        beq skip2175
                       >        trap            ;failed not equal (non zero)
4328 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
432b :                 >skip2175
                       >
432b : 68              >            pla         ;load status
432c : 48              >            pha
                       >            cmp_flag ~fzc
432d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
432f : f003            >        beq skip2178
                       >        trap            ;failed not equal (non zero)
4331 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4334 :                 >skip2178
                       >
4334 : 28              >            plp         ;restore status
                        
                        
4335 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
4337 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4339 : 48              >            pha         ;use stack to load status
433a : a980            >            lda #$80     ;precharge accu
433c : 28              >            plp
                        
433d : d519                     cmp zp1,x
                                tst_a $80,fc
433f : 08              >            php         ;save flags
4340 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4342 : f003            >        beq skip2183
                       >        trap            ;failed not equal (non zero)
4344 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4347 :                 >skip2183
                       >
4347 : 68              >            pla         ;load status
4348 : 48              >            pha
                       >            cmp_flag fc
4349 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
434b : f003            >        beq skip2186
                       >        trap            ;failed not equal (non zero)
434d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4350 :                 >skip2186
                       >
4350 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
4351 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4353 : 48              >            pha         ;use stack to load status
4354 : a97f            >            lda #$7f     ;precharge accu
4356 : 28              >            plp
                        
4357 : d519                     cmp zp1,x
                                tst_a $7f,fzc
4359 : 08              >            php         ;save flags
435a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
435c : f003            >        beq skip2191
                       >        trap            ;failed not equal (non zero)
435e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4361 :                 >skip2191
                       >
4361 : 68              >            pla         ;load status
4362 : 48              >            pha
                       >            cmp_flag fzc
4363 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4365 : f003            >        beq skip2194
                       >        trap            ;failed not equal (non zero)
4367 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
436a :                 >skip2194
                       >
436a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
436b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
436d : 48              >            pha         ;use stack to load status
436e : a97e            >            lda #$7e     ;precharge accu
4370 : 28              >            plp
                        
4371 : d519                     cmp zp1,x
                                tst_a $7e,fn
4373 : 08              >            php         ;save flags
4374 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4376 : f003            >        beq skip2199
                       >        trap            ;failed not equal (non zero)
4378 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
437b :                 >skip2199
                       >
437b : 68              >            pla         ;load status
437c : 48              >            pha
                       >            cmp_flag fn
437d : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
437f : f003            >        beq skip2202
                       >        trap            ;failed not equal (non zero)
4381 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4384 :                 >skip2202
                       >
4384 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
4385 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4387 : 48              >            pha         ;use stack to load status
4388 : a980            >            lda #$80     ;precharge accu
438a : 28              >            plp
                        
438b : d519                     cmp zp1,x
                                tst_a $80,~fnz
438d : 08              >            php         ;save flags
438e : c980            >            cmp #$80     ;test result
                       >            trap_ne
4390 : f003            >        beq skip2207
                       >        trap            ;failed not equal (non zero)
4392 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4395 :                 >skip2207
                       >
4395 : 68              >            pla         ;load status
4396 : 48              >            pha
                       >            cmp_flag ~fnz
4397 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4399 : f003            >        beq skip2210
                       >        trap            ;failed not equal (non zero)
439b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
439e :                 >skip2210
                       >
439e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
439f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43a1 : 48              >            pha         ;use stack to load status
43a2 : a97f            >            lda #$7f     ;precharge accu
43a4 : 28              >            plp
                        
43a5 : d519                     cmp zp1,x
                                tst_a $7f,~fn
43a7 : 08              >            php         ;save flags
43a8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
43aa : f003            >        beq skip2215
                       >        trap            ;failed not equal (non zero)
43ac : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43af :                 >skip2215
                       >
43af : 68              >            pla         ;load status
43b0 : 48              >            pha
                       >            cmp_flag ~fn
43b1 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43b3 : f003            >        beq skip2218
                       >        trap            ;failed not equal (non zero)
43b5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43b8 :                 >skip2218
                       >
43b8 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
43b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
43bb : 48              >            pha         ;use stack to load status
43bc : a97e            >            lda #$7e     ;precharge accu
43be : 28              >            plp
                        
43bf : d519                     cmp zp1,x
                                tst_a $7e,~fzc
43c1 : 08              >            php         ;save flags
43c2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
43c4 : f003            >        beq skip2223
                       >        trap            ;failed not equal (non zero)
43c6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43c9 :                 >skip2223
                       >
43c9 : 68              >            pla         ;load status
43ca : 48              >            pha
                       >            cmp_flag ~fzc
43cb : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43cd : f003            >        beq skip2226
                       >        trap            ;failed not equal (non zero)
43cf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43d2 :                 >skip2226
                       >
43d2 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
43d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43d5 : 48              >            pha         ;use stack to load status
43d6 : a980            >            lda #$80     ;precharge accu
43d8 : 28              >            plp
                        
43d9 : dd0802                   cmp abs1,x
                                tst_a $80,fc
43dc : 08              >            php         ;save flags
43dd : c980            >            cmp #$80     ;test result
                       >            trap_ne
43df : f003            >        beq skip2231
                       >        trap            ;failed not equal (non zero)
43e1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43e4 :                 >skip2231
                       >
43e4 : 68              >            pla         ;load status
43e5 : 48              >            pha
                       >            cmp_flag fc
43e6 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
43e8 : f003            >        beq skip2234
                       >        trap            ;failed not equal (non zero)
43ea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43ed :                 >skip2234
                       >
43ed : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
43ee : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
43f0 : 48              >            pha         ;use stack to load status
43f1 : a97f            >            lda #$7f     ;precharge accu
43f3 : 28              >            plp
                        
43f4 : dd0802                   cmp abs1,x
                                tst_a $7f,fzc
43f7 : 08              >            php         ;save flags
43f8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
43fa : f003            >        beq skip2239
                       >        trap            ;failed not equal (non zero)
43fc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
43ff :                 >skip2239
                       >
43ff : 68              >            pla         ;load status
4400 : 48              >            pha
                       >            cmp_flag fzc
4401 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4403 : f003            >        beq skip2242
                       >        trap            ;failed not equal (non zero)
4405 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4408 :                 >skip2242
                       >
4408 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
4409 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
440b : 48              >            pha         ;use stack to load status
440c : a97e            >            lda #$7e     ;precharge accu
440e : 28              >            plp
                        
440f : dd0802                   cmp abs1,x
                                tst_a $7e,fn
4412 : 08              >            php         ;save flags
4413 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4415 : f003            >        beq skip2247
                       >        trap            ;failed not equal (non zero)
4417 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
441a :                 >skip2247
                       >
441a : 68              >            pla         ;load status
441b : 48              >            pha
                       >            cmp_flag fn
441c : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
441e : f003            >        beq skip2250
                       >        trap            ;failed not equal (non zero)
4420 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4423 :                 >skip2250
                       >
4423 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
4424 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4426 : 48              >            pha         ;use stack to load status
4427 : a980            >            lda #$80     ;precharge accu
4429 : 28              >            plp
                        
442a : dd0802                   cmp abs1,x
                                tst_a $80,~fnz
442d : 08              >            php         ;save flags
442e : c980            >            cmp #$80     ;test result
                       >            trap_ne
4430 : f003            >        beq skip2255
                       >        trap            ;failed not equal (non zero)
4432 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4435 :                 >skip2255
                       >
4435 : 68              >            pla         ;load status
4436 : 48              >            pha
                       >            cmp_flag ~fnz
4437 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4439 : f003            >        beq skip2258
                       >        trap            ;failed not equal (non zero)
443b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
443e :                 >skip2258
                       >
443e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
443f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4441 : 48              >            pha         ;use stack to load status
4442 : a97f            >            lda #$7f     ;precharge accu
4444 : 28              >            plp
                        
4445 : dd0802                   cmp abs1,x
                                tst_a $7f,~fn
4448 : 08              >            php         ;save flags
4449 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
444b : f003            >        beq skip2263
                       >        trap            ;failed not equal (non zero)
444d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4450 :                 >skip2263
                       >
4450 : 68              >            pla         ;load status
4451 : 48              >            pha
                       >            cmp_flag ~fn
4452 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4454 : f003            >        beq skip2266
                       >        trap            ;failed not equal (non zero)
4456 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4459 :                 >skip2266
                       >
4459 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
445a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
445c : 48              >            pha         ;use stack to load status
445d : a97e            >            lda #$7e     ;precharge accu
445f : 28              >            plp
                        
4460 : dd0802                   cmp abs1,x
                                tst_a $7e,~fzc
4463 : 08              >            php         ;save flags
4464 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4466 : f003            >        beq skip2271
                       >        trap            ;failed not equal (non zero)
4468 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
446b :                 >skip2271
                       >
446b : 68              >            pla         ;load status
446c : 48              >            pha
                       >            cmp_flag ~fzc
446d : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
446f : f003            >        beq skip2274
                       >        trap            ;failed not equal (non zero)
4471 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4474 :                 >skip2274
                       >
4474 : 28              >            plp         ;restore status
                        
                        
4475 : a004                     ldy #4          ;with indexing by Y
4477 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
4479 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
447b : 48              >            pha         ;use stack to load status
447c : a980            >            lda #$80     ;precharge accu
447e : 28              >            plp
                        
447f : d90802                   cmp abs1,y
                                tst_a $80,fc
4482 : 08              >            php         ;save flags
4483 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4485 : f003            >        beq skip2279
                       >        trap            ;failed not equal (non zero)
4487 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
448a :                 >skip2279
                       >
448a : 68              >            pla         ;load status
448b : 48              >            pha
                       >            cmp_flag fc
448c : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
448e : f003            >        beq skip2282
                       >        trap            ;failed not equal (non zero)
4490 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4493 :                 >skip2282
                       >
4493 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
4494 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4496 : 48              >            pha         ;use stack to load status
4497 : a97f            >            lda #$7f     ;precharge accu
4499 : 28              >            plp
                        
449a : d90802                   cmp abs1,y
                                tst_a $7f,fzc
449d : 08              >            php         ;save flags
449e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
44a0 : f003            >        beq skip2287
                       >        trap            ;failed not equal (non zero)
44a2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44a5 :                 >skip2287
                       >
44a5 : 68              >            pla         ;load status
44a6 : 48              >            pha
                       >            cmp_flag fzc
44a7 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44a9 : f003            >        beq skip2290
                       >        trap            ;failed not equal (non zero)
44ab : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44ae :                 >skip2290
                       >
44ae : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
44af : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
44b1 : 48              >            pha         ;use stack to load status
44b2 : a97e            >            lda #$7e     ;precharge accu
44b4 : 28              >            plp
                        
44b5 : d90802                   cmp abs1,y
                                tst_a $7e,fn
44b8 : 08              >            php         ;save flags
44b9 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
44bb : f003            >        beq skip2295
                       >        trap            ;failed not equal (non zero)
44bd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44c0 :                 >skip2295
                       >
44c0 : 68              >            pla         ;load status
44c1 : 48              >            pha
                       >            cmp_flag fn
44c2 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44c4 : f003            >        beq skip2298
                       >        trap            ;failed not equal (non zero)
44c6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44c9 :                 >skip2298
                       >
44c9 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
44ca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
44cc : 48              >            pha         ;use stack to load status
44cd : a980            >            lda #$80     ;precharge accu
44cf : 28              >            plp
                        
44d0 : d90802                   cmp abs1,y
                                tst_a $80,~fnz
44d3 : 08              >            php         ;save flags
44d4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
44d6 : f003            >        beq skip2303
                       >        trap            ;failed not equal (non zero)
44d8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44db :                 >skip2303
                       >
44db : 68              >            pla         ;load status
44dc : 48              >            pha
                       >            cmp_flag ~fnz
44dd : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44df : f003            >        beq skip2306
                       >        trap            ;failed not equal (non zero)
44e1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44e4 :                 >skip2306
                       >
44e4 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
44e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
44e7 : 48              >            pha         ;use stack to load status
44e8 : a97f            >            lda #$7f     ;precharge accu
44ea : 28              >            plp
                        
44eb : d90802                   cmp abs1,y
                                tst_a $7f,~fn
44ee : 08              >            php         ;save flags
44ef : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
44f1 : f003            >        beq skip2311
                       >        trap            ;failed not equal (non zero)
44f3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44f6 :                 >skip2311
                       >
44f6 : 68              >            pla         ;load status
44f7 : 48              >            pha
                       >            cmp_flag ~fn
44f8 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
44fa : f003            >        beq skip2314
                       >        trap            ;failed not equal (non zero)
44fc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
44ff :                 >skip2314
                       >
44ff : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
4500 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4502 : 48              >            pha         ;use stack to load status
4503 : a97e            >            lda #$7e     ;precharge accu
4505 : 28              >            plp
                        
4506 : d90802                   cmp abs1,y
                                tst_a $7e,~fzc
4509 : 08              >            php         ;save flags
450a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
450c : f003            >        beq skip2319
                       >        trap            ;failed not equal (non zero)
450e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4511 :                 >skip2319
                       >
4511 : 68              >            pla         ;load status
4512 : 48              >            pha
                       >            cmp_flag ~fzc
4513 : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4515 : f003            >        beq skip2322
                       >        trap            ;failed not equal (non zero)
4517 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
451a :                 >skip2322
                       >
451a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
451b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
451d : 48              >            pha         ;use stack to load status
451e : a980            >            lda #$80     ;precharge accu
4520 : 28              >            plp
                        
4521 : c12a                     cmp (ind1,x)
                                tst_a $80,fc
4523 : 08              >            php         ;save flags
4524 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4526 : f003            >        beq skip2327
                       >        trap            ;failed not equal (non zero)
4528 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
452b :                 >skip2327
                       >
452b : 68              >            pla         ;load status
452c : 48              >            pha
                       >            cmp_flag fc
452d : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
452f : f003            >        beq skip2330
                       >        trap            ;failed not equal (non zero)
4531 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4534 :                 >skip2330
                       >
4534 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
4535 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4537 : 48              >            pha         ;use stack to load status
4538 : a97f            >            lda #$7f     ;precharge accu
453a : 28              >            plp
                        
453b : c12a                     cmp (ind1,x)
                                tst_a $7f,fzc
453d : 08              >            php         ;save flags
453e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
4540 : f003            >        beq skip2335
                       >        trap            ;failed not equal (non zero)
4542 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4545 :                 >skip2335
                       >
4545 : 68              >            pla         ;load status
4546 : 48              >            pha
                       >            cmp_flag fzc
4547 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4549 : f003            >        beq skip2338
                       >        trap            ;failed not equal (non zero)
454b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
454e :                 >skip2338
                       >
454e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
454f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4551 : 48              >            pha         ;use stack to load status
4552 : a97e            >            lda #$7e     ;precharge accu
4554 : 28              >            plp
                        
4555 : c12a                     cmp (ind1,x)
                                tst_a $7e,fn
4557 : 08              >            php         ;save flags
4558 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
455a : f003            >        beq skip2343
                       >        trap            ;failed not equal (non zero)
455c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
455f :                 >skip2343
                       >
455f : 68              >            pla         ;load status
4560 : 48              >            pha
                       >            cmp_flag fn
4561 : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4563 : f003            >        beq skip2346
                       >        trap            ;failed not equal (non zero)
4565 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4568 :                 >skip2346
                       >
4568 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
4569 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
456b : 48              >            pha         ;use stack to load status
456c : a980            >            lda #$80     ;precharge accu
456e : 28              >            plp
                        
456f : c12a                     cmp (ind1,x)
                                tst_a $80,~fnz
4571 : 08              >            php         ;save flags
4572 : c980            >            cmp #$80     ;test result
                       >            trap_ne
4574 : f003            >        beq skip2351
                       >        trap            ;failed not equal (non zero)
4576 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4579 :                 >skip2351
                       >
4579 : 68              >            pla         ;load status
457a : 48              >            pha
                       >            cmp_flag ~fnz
457b : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
457d : f003            >        beq skip2354
                       >        trap            ;failed not equal (non zero)
457f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4582 :                 >skip2354
                       >
4582 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
4583 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4585 : 48              >            pha         ;use stack to load status
4586 : a97f            >            lda #$7f     ;precharge accu
4588 : 28              >            plp
                        
4589 : c12a                     cmp (ind1,x)
                                tst_a $7f,~fn
458b : 08              >            php         ;save flags
458c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
458e : f003            >        beq skip2359
                       >        trap            ;failed not equal (non zero)
4590 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4593 :                 >skip2359
                       >
4593 : 68              >            pla         ;load status
4594 : 48              >            pha
                       >            cmp_flag ~fn
4595 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4597 : f003            >        beq skip2362
                       >        trap            ;failed not equal (non zero)
4599 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
459c :                 >skip2362
                       >
459c : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
459d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
459f : 48              >            pha         ;use stack to load status
45a0 : a97e            >            lda #$7e     ;precharge accu
45a2 : 28              >            plp
                        
45a3 : c12a                     cmp (ind1,x)
                                tst_a $7e,~fzc
45a5 : 08              >            php         ;save flags
45a6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
45a8 : f003            >        beq skip2367
                       >        trap            ;failed not equal (non zero)
45aa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45ad :                 >skip2367
                       >
45ad : 68              >            pla         ;load status
45ae : 48              >            pha
                       >            cmp_flag ~fzc
45af : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
45b1 : f003            >        beq skip2370
                       >        trap            ;failed not equal (non zero)
45b3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45b6 :                 >skip2370
                       >
45b6 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
45b7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45b9 : 48              >            pha         ;use stack to load status
45ba : a980            >            lda #$80     ;precharge accu
45bc : 28              >            plp
                        
45bd : d12a                     cmp (ind1),y
                                tst_a $80,fc
45bf : 08              >            php         ;save flags
45c0 : c980            >            cmp #$80     ;test result
                       >            trap_ne
45c2 : f003            >        beq skip2375
                       >        trap            ;failed not equal (non zero)
45c4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45c7 :                 >skip2375
                       >
45c7 : 68              >            pla         ;load status
45c8 : 48              >            pha
                       >            cmp_flag fc
45c9 : c931            >            cmp #(fc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
45cb : f003            >        beq skip2378
                       >        trap            ;failed not equal (non zero)
45cd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45d0 :                 >skip2378
                       >
45d0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
45d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45d3 : 48              >            pha         ;use stack to load status
45d4 : a97f            >            lda #$7f     ;precharge accu
45d6 : 28              >            plp
                        
45d7 : d12a                     cmp (ind1),y
                                tst_a $7f,fzc
45d9 : 08              >            php         ;save flags
45da : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
45dc : f003            >        beq skip2383
                       >        trap            ;failed not equal (non zero)
45de : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45e1 :                 >skip2383
                       >
45e1 : 68              >            pla         ;load status
45e2 : 48              >            pha
                       >            cmp_flag fzc
45e3 : c933            >            cmp #(fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
45e5 : f003            >        beq skip2386
                       >        trap            ;failed not equal (non zero)
45e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45ea :                 >skip2386
                       >
45ea : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
45eb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
45ed : 48              >            pha         ;use stack to load status
45ee : a97e            >            lda #$7e     ;precharge accu
45f0 : 28              >            plp
                        
45f1 : d12a                     cmp (ind1),y
                                tst_a $7e,fn
45f3 : 08              >            php         ;save flags
45f4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
45f6 : f003            >        beq skip2391
                       >        trap            ;failed not equal (non zero)
45f8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
45fb :                 >skip2391
                       >
45fb : 68              >            pla         ;load status
45fc : 48              >            pha
                       >            cmp_flag fn
45fd : c9b0            >            cmp #(fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
45ff : f003            >        beq skip2394
                       >        trap            ;failed not equal (non zero)
4601 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4604 :                 >skip2394
                       >
4604 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
4605 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4607 : 48              >            pha         ;use stack to load status
4608 : a980            >            lda #$80     ;precharge accu
460a : 28              >            plp
                        
460b : d12a                     cmp (ind1),y
                                tst_a $80,~fnz
460d : 08              >            php         ;save flags
460e : c980            >            cmp #$80     ;test result
                       >            trap_ne
4610 : f003            >        beq skip2399
                       >        trap            ;failed not equal (non zero)
4612 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4615 :                 >skip2399
                       >
4615 : 68              >            pla         ;load status
4616 : 48              >            pha
                       >            cmp_flag ~fnz
4617 : c97d            >            cmp #(~fnz|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4619 : f003            >        beq skip2402
                       >        trap            ;failed not equal (non zero)
461b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
461e :                 >skip2402
                       >
461e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
461f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4621 : 48              >            pha         ;use stack to load status
4622 : a97f            >            lda #$7f     ;precharge accu
4624 : 28              >            plp
                        
4625 : d12a                     cmp (ind1),y
                                tst_a $7f,~fn
4627 : 08              >            php         ;save flags
4628 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
462a : f003            >        beq skip2407
                       >        trap            ;failed not equal (non zero)
462c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
462f :                 >skip2407
                       >
462f : 68              >            pla         ;load status
4630 : 48              >            pha
                       >            cmp_flag ~fn
4631 : c97f            >            cmp #(~fn|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
4633 : f003            >        beq skip2410
                       >        trap            ;failed not equal (non zero)
4635 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4638 :                 >skip2410
                       >
4638 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
4639 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
463b : 48              >            pha         ;use stack to load status
463c : a97e            >            lda #$7e     ;precharge accu
463e : 28              >            plp
                        
463f : d12a                     cmp (ind1),y
                                tst_a $7e,~fzc
4641 : 08              >            php         ;save flags
4642 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
4644 : f003            >        beq skip2415
                       >        trap            ;failed not equal (non zero)
4646 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4649 :                 >skip2415
                       >
4649 : 68              >            pla         ;load status
464a : 48              >            pha
                       >            cmp_flag ~fzc
464b : c9fc            >            cmp #(~fzc|fao)&m8    ;expected flags + always on bits
                       >
                       >            trap_ne
464d : f003            >        beq skip2418
                       >        trap            ;failed not equal (non zero)
464f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4652 :                 >skip2418
                       >
4652 : 28              >            plp         ;restore status
                        
                                next_test
4653 : ad0002          >            lda test_case   ;previous test
4656 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4658 : f003            >        beq skip2421
                       >        trap            ;failed not equal (non zero)
465a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
465d :                 >skip2421
                       >
001d =                 >test_num = test_num + 1
465d : a91d            >            lda #test_num   ;*** next tests' number
465f : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
4662 : d8              >            cld
4663 : a900            >            lda #0
4665 : 8512            >            sta zpt         ;set low byte of indirect pointer
4667 : 8515            >            sta zpt+3       ;checksum high byte
4669 : 8dbb11          >            sta range_adr   ;reset self modifying code
466c : 8dfb57          >            sta tandi1
466f : 8d2258          >            sta tandi2
4672 : 8dbc5a          >            sta teori1
4675 : 8de35a          >            sta teori2
4678 : 8d7c5d          >            sta torai1
467b : 8da35d          >            sta torai2
467e : 8dba63          >            sta chkdadi  
4681 : 8dd763          >            sta chkdsbi
4684 : 8d6365          >            sta chkadi
4687 : 8d8065          >            sta chksbi
468a : 18              >            clc
468b : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
468d : 7510            >ccs32423      adc zero_page,x
468f : 9003            >            bcc ccs22423
4691 : e615            >            inc zpt+3       ;carry to high byte
4693 : 18              >            clc
4694 : e8              >ccs22423      inx
4695 : d0f6            >            bne ccs32423
4697 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
4699 : 8613            >            stx zpt+1
469b : a008            >            ldy #lo(data_bss) ;data after write test area
469d : 7112            >ccs52423      adc (zpt),y
469f : 9003            >            bcc ccs42423
46a1 : e615            >            inc zpt+3       ;carry to high byte
46a3 : 18              >            clc
46a4 : c8              >ccs42423      iny
46a5 : d0f6            >            bne ccs52423
46a7 : e8              >            inx             ;advance RAM high address
46a8 : 8613            >            stx zpt+1
46aa : e0e0            >            cpx #ram_top
46ac : d0ef            >            bne ccs52423
46ae : 8514            >            sta zpt+2       ;checksum low is
46b0 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
46b3 : f003            >        beq skip2424
                       >        trap            ;failed not equal (non zero)
46b5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
46b8 :                 >skip2424
                       >
46b8 : a515            >            lda zpt+3       ;checksum high is
46ba : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
46bd : f003            >        beq skip2426
                       >        trap            ;failed not equal (non zero)
46bf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
46c2 :                 >skip2426
                       >
                       >
                        
                        
46c2 : 8d04ef            sta $ef04
46c5 : 74657374696e67..  db "testing shifts - ASL LSR ROL ROR all addressing modes", 10, 0
46fc : 8d04ef            sta $ef04
46ff : 73686966747320..  db "shifts - accumulator", 10, 0
4715 : a203                     ldx #3
4717 :                  tasl
                                set_ax zp1,0
                       >            load_flag 0
4717 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4719 : 48              >            pha         ;use stack to load status
471a : b519            >            lda zp1,x    ;precharge accu
471c : 28              >            plp
                        
471d : 0a                       asl a
                                tst_ax rASL,fASL,0
471e : 08              >            php         ;save flags
471f : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4722 : f003            >        beq skip2431
                       >        trap            ;failed not equal (non zero)
4724 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4727 :                 >skip2431
                       >
4727 : 68              >            pla         ;load status
                       >            eor_flag 0
4728 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
472a : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
472d : f003            >        beq skip2434
                       >        trap            ;failed not equal (non zero)
472f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4732 :                 >skip2434
                       >
                        
4732 : ca                       dex
4733 : 10e2                     bpl tasl
4735 : a203                     ldx #3
4737 :                  tasl1
                                set_ax zp1,$ff
                       >            load_flag $ff
4737 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4739 : 48              >            pha         ;use stack to load status
473a : b519            >            lda zp1,x    ;precharge accu
473c : 28              >            plp
                        
473d : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
473e : 08              >            php         ;save flags
473f : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4742 : f003            >        beq skip2439
                       >        trap            ;failed not equal (non zero)
4744 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4747 :                 >skip2439
                       >
4747 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4748 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
474a : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
474d : f003            >        beq skip2442
                       >        trap            ;failed not equal (non zero)
474f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4752 :                 >skip2442
                       >
                        
4752 : ca                       dex
4753 : 10e2                     bpl tasl1
                        
4755 : a203                     ldx #3
4757 :                  tlsr
                                set_ax zp1,0
                       >            load_flag 0
4757 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4759 : 48              >            pha         ;use stack to load status
475a : b519            >            lda zp1,x    ;precharge accu
475c : 28              >            plp
                        
475d : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
475e : 08              >            php         ;save flags
475f : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4762 : f003            >        beq skip2447
                       >        trap            ;failed not equal (non zero)
4764 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4767 :                 >skip2447
                       >
4767 : 68              >            pla         ;load status
                       >            eor_flag 0
4768 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
476a : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
476d : f003            >        beq skip2450
                       >        trap            ;failed not equal (non zero)
476f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4772 :                 >skip2450
                       >
                        
4772 : ca                       dex
4773 : 10e2                     bpl tlsr
4775 : a203                     ldx #3
4777 :                  tlsr1
                                set_ax zp1,$ff
                       >            load_flag $ff
4777 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4779 : 48              >            pha         ;use stack to load status
477a : b519            >            lda zp1,x    ;precharge accu
477c : 28              >            plp
                        
477d : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
477e : 08              >            php         ;save flags
477f : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4782 : f003            >        beq skip2455
                       >        trap            ;failed not equal (non zero)
4784 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4787 :                 >skip2455
                       >
4787 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4788 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
478a : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
478d : f003            >        beq skip2458
                       >        trap            ;failed not equal (non zero)
478f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4792 :                 >skip2458
                       >
                        
4792 : ca                       dex
4793 : 10e2                     bpl tlsr1
                        
4795 : a203                     ldx #3
4797 :                  trol
                                set_ax zp1,0
                       >            load_flag 0
4797 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4799 : 48              >            pha         ;use stack to load status
479a : b519            >            lda zp1,x    ;precharge accu
479c : 28              >            plp
                        
479d : 2a                       rol a
                                tst_ax rROL,fROL,0
479e : 08              >            php         ;save flags
479f : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
47a2 : f003            >        beq skip2463
                       >        trap            ;failed not equal (non zero)
47a4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47a7 :                 >skip2463
                       >
47a7 : 68              >            pla         ;load status
                       >            eor_flag 0
47a8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
47aa : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
47ad : f003            >        beq skip2466
                       >        trap            ;failed not equal (non zero)
47af : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47b2 :                 >skip2466
                       >
                        
47b2 : ca                       dex
47b3 : 10e2                     bpl trol
47b5 : a203                     ldx #3
47b7 :                  trol1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
47b7 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
47b9 : 48              >            pha         ;use stack to load status
47ba : b519            >            lda zp1,x    ;precharge accu
47bc : 28              >            plp
                        
47bd : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
47be : 08              >            php         ;save flags
47bf : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
47c2 : f003            >        beq skip2471
                       >        trap            ;failed not equal (non zero)
47c4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47c7 :                 >skip2471
                       >
47c7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
47c8 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
47ca : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
47cd : f003            >        beq skip2474
                       >        trap            ;failed not equal (non zero)
47cf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47d2 :                 >skip2474
                       >
                        
47d2 : ca                       dex
47d3 : 10e2                     bpl trol1
                        
47d5 : a203                     ldx #3
47d7 :                  trolc
                                set_ax zp1,fc
                       >            load_flag fc
47d7 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
47d9 : 48              >            pha         ;use stack to load status
47da : b519            >            lda zp1,x    ;precharge accu
47dc : 28              >            plp
                        
47dd : 2a                       rol a
                                tst_ax rROLc,fROLc,0
47de : 08              >            php         ;save flags
47df : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
47e2 : f003            >        beq skip2479
                       >        trap            ;failed not equal (non zero)
47e4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47e7 :                 >skip2479
                       >
47e7 : 68              >            pla         ;load status
                       >            eor_flag 0
47e8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
47ea : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
47ed : f003            >        beq skip2482
                       >        trap            ;failed not equal (non zero)
47ef : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
47f2 :                 >skip2482
                       >
                        
47f2 : ca                       dex
47f3 : 10e2                     bpl trolc
47f5 : a203                     ldx #3
47f7 :                  trolc1
                                set_ax zp1,$ff
                       >            load_flag $ff
47f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
47f9 : 48              >            pha         ;use stack to load status
47fa : b519            >            lda zp1,x    ;precharge accu
47fc : 28              >            plp
                        
47fd : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
47fe : 08              >            php         ;save flags
47ff : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4802 : f003            >        beq skip2487
                       >        trap            ;failed not equal (non zero)
4804 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4807 :                 >skip2487
                       >
4807 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4808 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
480a : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
480d : f003            >        beq skip2490
                       >        trap            ;failed not equal (non zero)
480f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4812 :                 >skip2490
                       >
                        
4812 : ca                       dex
4813 : 10e2                     bpl trolc1
                        
4815 : a203                     ldx #3
4817 :                  tror
                                set_ax zp1,0
                       >            load_flag 0
4817 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4819 : 48              >            pha         ;use stack to load status
481a : b519            >            lda zp1,x    ;precharge accu
481c : 28              >            plp
                        
481d : 6a                       ror a
                                tst_ax rROR,fROR,0
481e : 08              >            php         ;save flags
481f : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4822 : f003            >        beq skip2495
                       >        trap            ;failed not equal (non zero)
4824 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4827 :                 >skip2495
                       >
4827 : 68              >            pla         ;load status
                       >            eor_flag 0
4828 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
482a : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
482d : f003            >        beq skip2498
                       >        trap            ;failed not equal (non zero)
482f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4832 :                 >skip2498
                       >
                        
4832 : ca                       dex
4833 : 10e2                     bpl tror
4835 : a203                     ldx #3
4837 :                  tror1
                                set_ax zp1,$ff-fc
                       >            load_flag $ff-fc
4837 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4839 : 48              >            pha         ;use stack to load status
483a : b519            >            lda zp1,x    ;precharge accu
483c : 28              >            plp
                        
483d : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
483e : 08              >            php         ;save flags
483f : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4842 : f003            >        beq skip2503
                       >        trap            ;failed not equal (non zero)
4844 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4847 :                 >skip2503
                       >
4847 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4848 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
484a : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
484d : f003            >        beq skip2506
                       >        trap            ;failed not equal (non zero)
484f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4852 :                 >skip2506
                       >
                        
4852 : ca                       dex
4853 : 10e2                     bpl tror1
                        
4855 : a203                     ldx #3
4857 :                  trorc
                                set_ax zp1,fc
                       >            load_flag fc
4857 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4859 : 48              >            pha         ;use stack to load status
485a : b519            >            lda zp1,x    ;precharge accu
485c : 28              >            plp
                        
485d : 6a                       ror a
                                tst_ax rRORc,fRORc,0
485e : 08              >            php         ;save flags
485f : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4862 : f003            >        beq skip2511
                       >        trap            ;failed not equal (non zero)
4864 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4867 :                 >skip2511
                       >
4867 : 68              >            pla         ;load status
                       >            eor_flag 0
4868 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
486a : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
486d : f003            >        beq skip2514
                       >        trap            ;failed not equal (non zero)
486f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4872 :                 >skip2514
                       >
                        
4872 : ca                       dex
4873 : 10e2                     bpl trorc
4875 : a203                     ldx #3
4877 :                  trorc1
                                set_ax zp1,$ff
                       >            load_flag $ff
4877 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4879 : 48              >            pha         ;use stack to load status
487a : b519            >            lda zp1,x    ;precharge accu
487c : 28              >            plp
                        
487d : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
487e : 08              >            php         ;save flags
487f : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4882 : f003            >        beq skip2519
                       >        trap            ;failed not equal (non zero)
4884 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4887 :                 >skip2519
                       >
4887 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4888 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
488a : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
488d : f003            >        beq skip2522
                       >        trap            ;failed not equal (non zero)
488f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4892 :                 >skip2522
                       >
                        
4892 : ca                       dex
4893 : 10e2                     bpl trorc1
                                next_test
4895 : ad0002          >            lda test_case   ;previous test
4898 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
489a : f003            >        beq skip2525
                       >        trap            ;failed not equal (non zero)
489c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
489f :                 >skip2525
                       >
001e =                 >test_num = test_num + 1
489f : a91e            >            lda #test_num   ;*** next tests' number
48a1 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
48a4 : d8              >            cld
48a5 : a900            >            lda #0
48a7 : 8512            >            sta zpt         ;set low byte of indirect pointer
48a9 : 8515            >            sta zpt+3       ;checksum high byte
48ab : 8dbb11          >            sta range_adr   ;reset self modifying code
48ae : 8dfb57          >            sta tandi1
48b1 : 8d2258          >            sta tandi2
48b4 : 8dbc5a          >            sta teori1
48b7 : 8de35a          >            sta teori2
48ba : 8d7c5d          >            sta torai1
48bd : 8da35d          >            sta torai2
48c0 : 8dba63          >            sta chkdadi  
48c3 : 8dd763          >            sta chkdsbi
48c6 : 8d6365          >            sta chkadi
48c9 : 8d8065          >            sta chksbi
48cc : 18              >            clc
48cd : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
48cf : 7510            >ccs32527      adc zero_page,x
48d1 : 9003            >            bcc ccs22527
48d3 : e615            >            inc zpt+3       ;carry to high byte
48d5 : 18              >            clc
48d6 : e8              >ccs22527      inx
48d7 : d0f6            >            bne ccs32527
48d9 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
48db : 8613            >            stx zpt+1
48dd : a008            >            ldy #lo(data_bss) ;data after write test area
48df : 7112            >ccs52527      adc (zpt),y
48e1 : 9003            >            bcc ccs42527
48e3 : e615            >            inc zpt+3       ;carry to high byte
48e5 : 18              >            clc
48e6 : c8              >ccs42527      iny
48e7 : d0f6            >            bne ccs52527
48e9 : e8              >            inx             ;advance RAM high address
48ea : 8613            >            stx zpt+1
48ec : e0e0            >            cpx #ram_top
48ee : d0ef            >            bne ccs52527
48f0 : 8514            >            sta zpt+2       ;checksum low is
48f2 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
48f5 : f003            >        beq skip2528
                       >        trap            ;failed not equal (non zero)
48f7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
48fa :                 >skip2528
                       >
48fa : a515            >            lda zpt+3       ;checksum high is
48fc : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
48ff : f003            >        beq skip2530
                       >        trap            ;failed not equal (non zero)
4901 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4904 :                 >skip2530
                       >
                       >
                        
                        
4904 : 8d04ef            sta $ef04
4907 : 73686966747320..  db "shifts - zeropage", 10, 0
491a : a203                     ldx #3
491c :                  tasl2
                                set_z zp1,0
                       >            load_flag 0
491c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
491e : 48              >            pha         ;use stack to load status
491f : b519            >            lda zp1,x    ;load to zeropage
4921 : 8512            >            sta zpt
4923 : 28              >            plp
                        
4924 : 0612                     asl zpt
                                tst_z rASL,fASL,0
4926 : 08              >            php         ;save flags
4927 : a512            >            lda zpt
4929 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
492c : f003            >        beq skip2535
                       >        trap            ;failed not equal (non zero)
492e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4931 :                 >skip2535
                       >
4931 : 68              >            pla         ;load status
                       >            eor_flag 0
4932 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4934 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
4937 : f003            >        beq skip2538
                       >        trap            ;failed not equal (non zero)
4939 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
493c :                 >skip2538
                       >
                        
493c : ca                       dex
493d : 10dd                     bpl tasl2
493f : a203                     ldx #3
4941 :                  tasl3
                                set_z zp1,$ff
                       >            load_flag $ff
4941 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4943 : 48              >            pha         ;use stack to load status
4944 : b519            >            lda zp1,x    ;load to zeropage
4946 : 8512            >            sta zpt
4948 : 28              >            plp
                        
4949 : 0612                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
494b : 08              >            php         ;save flags
494c : a512            >            lda zpt
494e : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4951 : f003            >        beq skip2543
                       >        trap            ;failed not equal (non zero)
4953 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4956 :                 >skip2543
                       >
4956 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4957 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4959 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
495c : f003            >        beq skip2546
                       >        trap            ;failed not equal (non zero)
495e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4961 :                 >skip2546
                       >
                        
4961 : ca                       dex
4962 : 10dd                     bpl tasl3
                        
4964 : a203                     ldx #3
4966 :                  tlsr2
                                set_z zp1,0
                       >            load_flag 0
4966 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4968 : 48              >            pha         ;use stack to load status
4969 : b519            >            lda zp1,x    ;load to zeropage
496b : 8512            >            sta zpt
496d : 28              >            plp
                        
496e : 4612                     lsr zpt
                                tst_z rLSR,fLSR,0
4970 : 08              >            php         ;save flags
4971 : a512            >            lda zpt
4973 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4976 : f003            >        beq skip2551
                       >        trap            ;failed not equal (non zero)
4978 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
497b :                 >skip2551
                       >
497b : 68              >            pla         ;load status
                       >            eor_flag 0
497c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
497e : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
4981 : f003            >        beq skip2554
                       >        trap            ;failed not equal (non zero)
4983 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4986 :                 >skip2554
                       >
                        
4986 : ca                       dex
4987 : 10dd                     bpl tlsr2
4989 : a203                     ldx #3
498b :                  tlsr3
                                set_z zp1,$ff
                       >            load_flag $ff
498b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
498d : 48              >            pha         ;use stack to load status
498e : b519            >            lda zp1,x    ;load to zeropage
4990 : 8512            >            sta zpt
4992 : 28              >            plp
                        
4993 : 4612                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
4995 : 08              >            php         ;save flags
4996 : a512            >            lda zpt
4998 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
499b : f003            >        beq skip2559
                       >        trap            ;failed not equal (non zero)
499d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49a0 :                 >skip2559
                       >
49a0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
49a1 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
49a3 : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
49a6 : f003            >        beq skip2562
                       >        trap            ;failed not equal (non zero)
49a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49ab :                 >skip2562
                       >
                        
49ab : ca                       dex
49ac : 10dd                     bpl tlsr3
                        
49ae : a203                     ldx #3
49b0 :                  trol2
                                set_z zp1,0
                       >            load_flag 0
49b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
49b2 : 48              >            pha         ;use stack to load status
49b3 : b519            >            lda zp1,x    ;load to zeropage
49b5 : 8512            >            sta zpt
49b7 : 28              >            plp
                        
49b8 : 2612                     rol zpt
                                tst_z rROL,fROL,0
49ba : 08              >            php         ;save flags
49bb : a512            >            lda zpt
49bd : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
49c0 : f003            >        beq skip2567
                       >        trap            ;failed not equal (non zero)
49c2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49c5 :                 >skip2567
                       >
49c5 : 68              >            pla         ;load status
                       >            eor_flag 0
49c6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
49c8 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
49cb : f003            >        beq skip2570
                       >        trap            ;failed not equal (non zero)
49cd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49d0 :                 >skip2570
                       >
                        
49d0 : ca                       dex
49d1 : 10dd                     bpl trol2
49d3 : a203                     ldx #3
49d5 :                  trol3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
49d5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
49d7 : 48              >            pha         ;use stack to load status
49d8 : b519            >            lda zp1,x    ;load to zeropage
49da : 8512            >            sta zpt
49dc : 28              >            plp
                        
49dd : 2612                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
49df : 08              >            php         ;save flags
49e0 : a512            >            lda zpt
49e2 : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
49e5 : f003            >        beq skip2575
                       >        trap            ;failed not equal (non zero)
49e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49ea :                 >skip2575
                       >
49ea : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
49eb : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
49ed : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
49f0 : f003            >        beq skip2578
                       >        trap            ;failed not equal (non zero)
49f2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
49f5 :                 >skip2578
                       >
                        
49f5 : ca                       dex
49f6 : 10dd                     bpl trol3
                        
49f8 : a203                     ldx #3
49fa :                  trolc2
                                set_z zp1,fc
                       >            load_flag fc
49fa : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
49fc : 48              >            pha         ;use stack to load status
49fd : b519            >            lda zp1,x    ;load to zeropage
49ff : 8512            >            sta zpt
4a01 : 28              >            plp
                        
4a02 : 2612                     rol zpt
                                tst_z rROLc,fROLc,0
4a04 : 08              >            php         ;save flags
4a05 : a512            >            lda zpt
4a07 : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4a0a : f003            >        beq skip2583
                       >        trap            ;failed not equal (non zero)
4a0c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a0f :                 >skip2583
                       >
4a0f : 68              >            pla         ;load status
                       >            eor_flag 0
4a10 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4a12 : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4a15 : f003            >        beq skip2586
                       >        trap            ;failed not equal (non zero)
4a17 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a1a :                 >skip2586
                       >
                        
4a1a : ca                       dex
4a1b : 10dd                     bpl trolc2
4a1d : a203                     ldx #3
4a1f :                  trolc3
                                set_z zp1,$ff
                       >            load_flag $ff
4a1f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4a21 : 48              >            pha         ;use stack to load status
4a22 : b519            >            lda zp1,x    ;load to zeropage
4a24 : 8512            >            sta zpt
4a26 : 28              >            plp
                        
4a27 : 2612                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
4a29 : 08              >            php         ;save flags
4a2a : a512            >            lda zpt
4a2c : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4a2f : f003            >        beq skip2591
                       >        trap            ;failed not equal (non zero)
4a31 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a34 :                 >skip2591
                       >
4a34 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4a35 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4a37 : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4a3a : f003            >        beq skip2594
                       >        trap            ;failed not equal (non zero)
4a3c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a3f :                 >skip2594
                       >
                        
4a3f : ca                       dex
4a40 : 10dd                     bpl trolc3
                        
4a42 : a203                     ldx #3
4a44 :                  tror2
                                set_z zp1,0
                       >            load_flag 0
4a44 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4a46 : 48              >            pha         ;use stack to load status
4a47 : b519            >            lda zp1,x    ;load to zeropage
4a49 : 8512            >            sta zpt
4a4b : 28              >            plp
                        
4a4c : 6612                     ror zpt
                                tst_z rROR,fROR,0
4a4e : 08              >            php         ;save flags
4a4f : a512            >            lda zpt
4a51 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4a54 : f003            >        beq skip2599
                       >        trap            ;failed not equal (non zero)
4a56 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a59 :                 >skip2599
                       >
4a59 : 68              >            pla         ;load status
                       >            eor_flag 0
4a5a : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4a5c : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4a5f : f003            >        beq skip2602
                       >        trap            ;failed not equal (non zero)
4a61 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a64 :                 >skip2602
                       >
                        
4a64 : ca                       dex
4a65 : 10dd                     bpl tror2
4a67 : a203                     ldx #3
4a69 :                  tror3
                                set_z zp1,$ff-fc
                       >            load_flag $ff-fc
4a69 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4a6b : 48              >            pha         ;use stack to load status
4a6c : b519            >            lda zp1,x    ;load to zeropage
4a6e : 8512            >            sta zpt
4a70 : 28              >            plp
                        
4a71 : 6612                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
4a73 : 08              >            php         ;save flags
4a74 : a512            >            lda zpt
4a76 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4a79 : f003            >        beq skip2607
                       >        trap            ;failed not equal (non zero)
4a7b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a7e :                 >skip2607
                       >
4a7e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4a7f : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4a81 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4a84 : f003            >        beq skip2610
                       >        trap            ;failed not equal (non zero)
4a86 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4a89 :                 >skip2610
                       >
                        
4a89 : ca                       dex
4a8a : 10dd                     bpl tror3
                        
4a8c : a203                     ldx #3
4a8e :                  trorc2
                                set_z zp1,fc
                       >            load_flag fc
4a8e : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4a90 : 48              >            pha         ;use stack to load status
4a91 : b519            >            lda zp1,x    ;load to zeropage
4a93 : 8512            >            sta zpt
4a95 : 28              >            plp
                        
4a96 : 6612                     ror zpt
                                tst_z rRORc,fRORc,0
4a98 : 08              >            php         ;save flags
4a99 : a512            >            lda zpt
4a9b : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4a9e : f003            >        beq skip2615
                       >        trap            ;failed not equal (non zero)
4aa0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4aa3 :                 >skip2615
                       >
4aa3 : 68              >            pla         ;load status
                       >            eor_flag 0
4aa4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4aa6 : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4aa9 : f003            >        beq skip2618
                       >        trap            ;failed not equal (non zero)
4aab : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4aae :                 >skip2618
                       >
                        
4aae : ca                       dex
4aaf : 10dd                     bpl trorc2
4ab1 : a203                     ldx #3
4ab3 :                  trorc3
                                set_z zp1,$ff
                       >            load_flag $ff
4ab3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ab5 : 48              >            pha         ;use stack to load status
4ab6 : b519            >            lda zp1,x    ;load to zeropage
4ab8 : 8512            >            sta zpt
4aba : 28              >            plp
                        
4abb : 6612                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
4abd : 08              >            php         ;save flags
4abe : a512            >            lda zpt
4ac0 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4ac3 : f003            >        beq skip2623
                       >        trap            ;failed not equal (non zero)
4ac5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ac8 :                 >skip2623
                       >
4ac8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4ac9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4acb : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4ace : f003            >        beq skip2626
                       >        trap            ;failed not equal (non zero)
4ad0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ad3 :                 >skip2626
                       >
                        
4ad3 : ca                       dex
4ad4 : 10dd                     bpl trorc3
                                next_test
4ad6 : ad0002          >            lda test_case   ;previous test
4ad9 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4adb : f003            >        beq skip2629
                       >        trap            ;failed not equal (non zero)
4add : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ae0 :                 >skip2629
                       >
001f =                 >test_num = test_num + 1
4ae0 : a91f            >            lda #test_num   ;*** next tests' number
4ae2 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
4ae5 : d8              >            cld
4ae6 : a900            >            lda #0
4ae8 : 8512            >            sta zpt         ;set low byte of indirect pointer
4aea : 8515            >            sta zpt+3       ;checksum high byte
4aec : 8dbb11          >            sta range_adr   ;reset self modifying code
4aef : 8dfb57          >            sta tandi1
4af2 : 8d2258          >            sta tandi2
4af5 : 8dbc5a          >            sta teori1
4af8 : 8de35a          >            sta teori2
4afb : 8d7c5d          >            sta torai1
4afe : 8da35d          >            sta torai2
4b01 : 8dba63          >            sta chkdadi  
4b04 : 8dd763          >            sta chkdsbi
4b07 : 8d6365          >            sta chkadi
4b0a : 8d8065          >            sta chksbi
4b0d : 18              >            clc
4b0e : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
4b10 : 7510            >ccs32631      adc zero_page,x
4b12 : 9003            >            bcc ccs22631
4b14 : e615            >            inc zpt+3       ;carry to high byte
4b16 : 18              >            clc
4b17 : e8              >ccs22631      inx
4b18 : d0f6            >            bne ccs32631
4b1a : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
4b1c : 8613            >            stx zpt+1
4b1e : a008            >            ldy #lo(data_bss) ;data after write test area
4b20 : 7112            >ccs52631      adc (zpt),y
4b22 : 9003            >            bcc ccs42631
4b24 : e615            >            inc zpt+3       ;carry to high byte
4b26 : 18              >            clc
4b27 : c8              >ccs42631      iny
4b28 : d0f6            >            bne ccs52631
4b2a : e8              >            inx             ;advance RAM high address
4b2b : 8613            >            stx zpt+1
4b2d : e0e0            >            cpx #ram_top
4b2f : d0ef            >            bne ccs52631
4b31 : 8514            >            sta zpt+2       ;checksum low is
4b33 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
4b36 : f003            >        beq skip2632
                       >        trap            ;failed not equal (non zero)
4b38 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4b3b :                 >skip2632
                       >
4b3b : a515            >            lda zpt+3       ;checksum high is
4b3d : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
4b40 : f003            >        beq skip2634
                       >        trap            ;failed not equal (non zero)
4b42 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4b45 :                 >skip2634
                       >
                       >
                        
                        
4b45 : 8d04ef            sta $ef04
4b48 : 73686966747320..  db "shifts - absolute", 10, 0
4b5b : a203                     ldx #3
4b5d :                  tasl4
                                set_abs zp1,0
                       >            load_flag 0
4b5d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4b5f : 48              >            pha         ;use stack to load status
4b60 : b519            >            lda zp1,x    ;load to memory
4b62 : 8d0302          >            sta abst
4b65 : 28              >            plp
                        
4b66 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
4b69 : 08              >            php         ;save flags
4b6a : ad0302          >            lda abst
4b6d : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4b70 : f003            >        beq skip2639
                       >        trap            ;failed not equal (non zero)
4b72 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4b75 :                 >skip2639
                       >
4b75 : 68              >            pla         ;load status
                       >            eor_flag 0
4b76 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4b78 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
4b7b : f003            >        beq skip2642
                       >        trap            ;failed not equal (non zero)
4b7d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4b80 :                 >skip2642
                       >
                        
4b80 : ca                       dex
4b81 : 10da                     bpl tasl4
4b83 : a203                     ldx #3
4b85 :                  tasl5
                                set_abs zp1,$ff
                       >            load_flag $ff
4b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4b87 : 48              >            pha         ;use stack to load status
4b88 : b519            >            lda zp1,x    ;load to memory
4b8a : 8d0302          >            sta abst
4b8d : 28              >            plp
                        
4b8e : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
4b91 : 08              >            php         ;save flags
4b92 : ad0302          >            lda abst
4b95 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4b98 : f003            >        beq skip2647
                       >        trap            ;failed not equal (non zero)
4b9a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4b9d :                 >skip2647
                       >
4b9d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4b9e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4ba0 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
4ba3 : f003            >        beq skip2650
                       >        trap            ;failed not equal (non zero)
4ba5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ba8 :                 >skip2650
                       >
                        
4ba8 : ca                       dex
4ba9 : 10da                     bpl tasl5
                        
4bab : a203                     ldx #3
4bad :                  tlsr4
                                set_abs zp1,0
                       >            load_flag 0
4bad : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4baf : 48              >            pha         ;use stack to load status
4bb0 : b519            >            lda zp1,x    ;load to memory
4bb2 : 8d0302          >            sta abst
4bb5 : 28              >            plp
                        
4bb6 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
4bb9 : 08              >            php         ;save flags
4bba : ad0302          >            lda abst
4bbd : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4bc0 : f003            >        beq skip2655
                       >        trap            ;failed not equal (non zero)
4bc2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4bc5 :                 >skip2655
                       >
4bc5 : 68              >            pla         ;load status
                       >            eor_flag 0
4bc6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4bc8 : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
4bcb : f003            >        beq skip2658
                       >        trap            ;failed not equal (non zero)
4bcd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4bd0 :                 >skip2658
                       >
                        
4bd0 : ca                       dex
4bd1 : 10da                     bpl tlsr4
4bd3 : a203                     ldx #3
4bd5 :                  tlsr5
                                set_abs zp1,$ff
                       >            load_flag $ff
4bd5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4bd7 : 48              >            pha         ;use stack to load status
4bd8 : b519            >            lda zp1,x    ;load to memory
4bda : 8d0302          >            sta abst
4bdd : 28              >            plp
                        
4bde : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
4be1 : 08              >            php         ;save flags
4be2 : ad0302          >            lda abst
4be5 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4be8 : f003            >        beq skip2663
                       >        trap            ;failed not equal (non zero)
4bea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4bed :                 >skip2663
                       >
4bed : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4bee : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4bf0 : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
4bf3 : f003            >        beq skip2666
                       >        trap            ;failed not equal (non zero)
4bf5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4bf8 :                 >skip2666
                       >
                        
4bf8 : ca                       dex
4bf9 : 10da                     bpl tlsr5
                        
4bfb : a203                     ldx #3
4bfd :                  trol4
                                set_abs zp1,0
                       >            load_flag 0
4bfd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4bff : 48              >            pha         ;use stack to load status
4c00 : b519            >            lda zp1,x    ;load to memory
4c02 : 8d0302          >            sta abst
4c05 : 28              >            plp
                        
4c06 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
4c09 : 08              >            php         ;save flags
4c0a : ad0302          >            lda abst
4c0d : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
4c10 : f003            >        beq skip2671
                       >        trap            ;failed not equal (non zero)
4c12 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c15 :                 >skip2671
                       >
4c15 : 68              >            pla         ;load status
                       >            eor_flag 0
4c16 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4c18 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
4c1b : f003            >        beq skip2674
                       >        trap            ;failed not equal (non zero)
4c1d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c20 :                 >skip2674
                       >
                        
4c20 : ca                       dex
4c21 : 10da                     bpl trol4
4c23 : a203                     ldx #3
4c25 :                  trol5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
4c25 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4c27 : 48              >            pha         ;use stack to load status
4c28 : b519            >            lda zp1,x    ;load to memory
4c2a : 8d0302          >            sta abst
4c2d : 28              >            plp
                        
4c2e : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
4c31 : 08              >            php         ;save flags
4c32 : ad0302          >            lda abst
4c35 : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
4c38 : f003            >        beq skip2679
                       >        trap            ;failed not equal (non zero)
4c3a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c3d :                 >skip2679
                       >
4c3d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4c3e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4c40 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
4c43 : f003            >        beq skip2682
                       >        trap            ;failed not equal (non zero)
4c45 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c48 :                 >skip2682
                       >
                        
4c48 : ca                       dex
4c49 : 10da                     bpl trol5
                        
4c4b : a203                     ldx #3
4c4d :                  trolc4
                                set_abs zp1,fc
                       >            load_flag fc
4c4d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4c4f : 48              >            pha         ;use stack to load status
4c50 : b519            >            lda zp1,x    ;load to memory
4c52 : 8d0302          >            sta abst
4c55 : 28              >            plp
                        
4c56 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
4c59 : 08              >            php         ;save flags
4c5a : ad0302          >            lda abst
4c5d : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4c60 : f003            >        beq skip2687
                       >        trap            ;failed not equal (non zero)
4c62 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c65 :                 >skip2687
                       >
4c65 : 68              >            pla         ;load status
                       >            eor_flag 0
4c66 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4c68 : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4c6b : f003            >        beq skip2690
                       >        trap            ;failed not equal (non zero)
4c6d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c70 :                 >skip2690
                       >
                        
4c70 : ca                       dex
4c71 : 10da                     bpl trolc4
4c73 : a203                     ldx #3
4c75 :                  trolc5
                                set_abs zp1,$ff
                       >            load_flag $ff
4c75 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4c77 : 48              >            pha         ;use stack to load status
4c78 : b519            >            lda zp1,x    ;load to memory
4c7a : 8d0302          >            sta abst
4c7d : 28              >            plp
                        
4c7e : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
4c81 : 08              >            php         ;save flags
4c82 : ad0302          >            lda abst
4c85 : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4c88 : f003            >        beq skip2695
                       >        trap            ;failed not equal (non zero)
4c8a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c8d :                 >skip2695
                       >
4c8d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4c8e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4c90 : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4c93 : f003            >        beq skip2698
                       >        trap            ;failed not equal (non zero)
4c95 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4c98 :                 >skip2698
                       >
                        
4c98 : ca                       dex
4c99 : 10da                     bpl trolc5
                        
4c9b : a203                     ldx #3
4c9d :                  tror4
                                set_abs zp1,0
                       >            load_flag 0
4c9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4c9f : 48              >            pha         ;use stack to load status
4ca0 : b519            >            lda zp1,x    ;load to memory
4ca2 : 8d0302          >            sta abst
4ca5 : 28              >            plp
                        
4ca6 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
4ca9 : 08              >            php         ;save flags
4caa : ad0302          >            lda abst
4cad : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4cb0 : f003            >        beq skip2703
                       >        trap            ;failed not equal (non zero)
4cb2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4cb5 :                 >skip2703
                       >
4cb5 : 68              >            pla         ;load status
                       >            eor_flag 0
4cb6 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4cb8 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4cbb : f003            >        beq skip2706
                       >        trap            ;failed not equal (non zero)
4cbd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4cc0 :                 >skip2706
                       >
                        
4cc0 : ca                       dex
4cc1 : 10da                     bpl tror4
4cc3 : a203                     ldx #3
4cc5 :                  tror5
                                set_abs zp1,$ff-fc
                       >            load_flag $ff-fc
4cc5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4cc7 : 48              >            pha         ;use stack to load status
4cc8 : b519            >            lda zp1,x    ;load to memory
4cca : 8d0302          >            sta abst
4ccd : 28              >            plp
                        
4cce : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
4cd1 : 08              >            php         ;save flags
4cd2 : ad0302          >            lda abst
4cd5 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4cd8 : f003            >        beq skip2711
                       >        trap            ;failed not equal (non zero)
4cda : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4cdd :                 >skip2711
                       >
4cdd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4cde : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4ce0 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4ce3 : f003            >        beq skip2714
                       >        trap            ;failed not equal (non zero)
4ce5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ce8 :                 >skip2714
                       >
                        
4ce8 : ca                       dex
4ce9 : 10da                     bpl tror5
                        
4ceb : a203                     ldx #3
4ced :                  trorc4
                                set_abs zp1,fc
                       >            load_flag fc
4ced : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4cef : 48              >            pha         ;use stack to load status
4cf0 : b519            >            lda zp1,x    ;load to memory
4cf2 : 8d0302          >            sta abst
4cf5 : 28              >            plp
                        
4cf6 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
4cf9 : 08              >            php         ;save flags
4cfa : ad0302          >            lda abst
4cfd : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4d00 : f003            >        beq skip2719
                       >        trap            ;failed not equal (non zero)
4d02 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4d05 :                 >skip2719
                       >
4d05 : 68              >            pla         ;load status
                       >            eor_flag 0
4d06 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4d08 : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4d0b : f003            >        beq skip2722
                       >        trap            ;failed not equal (non zero)
4d0d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4d10 :                 >skip2722
                       >
                        
4d10 : ca                       dex
4d11 : 10da                     bpl trorc4
4d13 : a203                     ldx #3
4d15 :                  trorc5
                                set_abs zp1,$ff
                       >            load_flag $ff
4d15 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4d17 : 48              >            pha         ;use stack to load status
4d18 : b519            >            lda zp1,x    ;load to memory
4d1a : 8d0302          >            sta abst
4d1d : 28              >            plp
                        
4d1e : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
4d21 : 08              >            php         ;save flags
4d22 : ad0302          >            lda abst
4d25 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4d28 : f003            >        beq skip2727
                       >        trap            ;failed not equal (non zero)
4d2a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4d2d :                 >skip2727
                       >
4d2d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4d2e : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4d30 : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4d33 : f003            >        beq skip2730
                       >        trap            ;failed not equal (non zero)
4d35 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4d38 :                 >skip2730
                       >
                        
4d38 : ca                       dex
4d39 : 10da                     bpl trorc5
                                next_test
4d3b : ad0002          >            lda test_case   ;previous test
4d3e : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4d40 : f003            >        beq skip2733
                       >        trap            ;failed not equal (non zero)
4d42 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4d45 :                 >skip2733
                       >
0020 =                 >test_num = test_num + 1
4d45 : a920            >            lda #test_num   ;*** next tests' number
4d47 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
4d4a : d8              >            cld
4d4b : a900            >            lda #0
4d4d : 8512            >            sta zpt         ;set low byte of indirect pointer
4d4f : 8515            >            sta zpt+3       ;checksum high byte
4d51 : 8dbb11          >            sta range_adr   ;reset self modifying code
4d54 : 8dfb57          >            sta tandi1
4d57 : 8d2258          >            sta tandi2
4d5a : 8dbc5a          >            sta teori1
4d5d : 8de35a          >            sta teori2
4d60 : 8d7c5d          >            sta torai1
4d63 : 8da35d          >            sta torai2
4d66 : 8dba63          >            sta chkdadi  
4d69 : 8dd763          >            sta chkdsbi
4d6c : 8d6365          >            sta chkadi
4d6f : 8d8065          >            sta chksbi
4d72 : 18              >            clc
4d73 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
4d75 : 7510            >ccs32735      adc zero_page,x
4d77 : 9003            >            bcc ccs22735
4d79 : e615            >            inc zpt+3       ;carry to high byte
4d7b : 18              >            clc
4d7c : e8              >ccs22735      inx
4d7d : d0f6            >            bne ccs32735
4d7f : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
4d81 : 8613            >            stx zpt+1
4d83 : a008            >            ldy #lo(data_bss) ;data after write test area
4d85 : 7112            >ccs52735      adc (zpt),y
4d87 : 9003            >            bcc ccs42735
4d89 : e615            >            inc zpt+3       ;carry to high byte
4d8b : 18              >            clc
4d8c : c8              >ccs42735      iny
4d8d : d0f6            >            bne ccs52735
4d8f : e8              >            inx             ;advance RAM high address
4d90 : 8613            >            stx zpt+1
4d92 : e0e0            >            cpx #ram_top
4d94 : d0ef            >            bne ccs52735
4d96 : 8514            >            sta zpt+2       ;checksum low is
4d98 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
4d9b : f003            >        beq skip2736
                       >        trap            ;failed not equal (non zero)
4d9d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4da0 :                 >skip2736
                       >
4da0 : a515            >            lda zpt+3       ;checksum high is
4da2 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
4da5 : f003            >        beq skip2738
                       >        trap            ;failed not equal (non zero)
4da7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4daa :                 >skip2738
                       >
                       >
                        
                        
4daa : 8d04ef            sta $ef04
4dad : 73686966747320..  db "shifts - zp indexed", 10, 0
4dc2 : a203                     ldx #3
4dc4 :                  tasl6
                                set_zx zp1,0
                       >            load_flag 0
4dc4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4dc6 : 48              >            pha         ;use stack to load status
4dc7 : b519            >            lda zp1,x    ;load to indexed zeropage
4dc9 : 9512            >            sta zpt,x
4dcb : 28              >            plp
                        
4dcc : 1612                     asl zpt,x
                                tst_zx rASL,fASL,0
4dce : 08              >            php         ;save flags
4dcf : b512            >            lda zpt,x
4dd1 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4dd4 : f003            >        beq skip2743
                       >        trap            ;failed not equal (non zero)
4dd6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4dd9 :                 >skip2743
                       >
4dd9 : 68              >            pla         ;load status
                       >            eor_flag 0
4dda : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4ddc : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
4ddf : f003            >        beq skip2746
                       >        trap            ;failed not equal (non zero)
4de1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4de4 :                 >skip2746
                       >
                        
4de4 : ca                       dex
4de5 : 10dd                     bpl tasl6
4de7 : a203                     ldx #3
4de9 :                  tasl7
                                set_zx zp1,$ff
                       >            load_flag $ff
4de9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4deb : 48              >            pha         ;use stack to load status
4dec : b519            >            lda zp1,x    ;load to indexed zeropage
4dee : 9512            >            sta zpt,x
4df0 : 28              >            plp
                        
4df1 : 1612                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
4df3 : 08              >            php         ;save flags
4df4 : b512            >            lda zpt,x
4df6 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
4df9 : f003            >        beq skip2751
                       >        trap            ;failed not equal (non zero)
4dfb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4dfe :                 >skip2751
                       >
4dfe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4dff : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4e01 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
4e04 : f003            >        beq skip2754
                       >        trap            ;failed not equal (non zero)
4e06 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e09 :                 >skip2754
                       >
                        
4e09 : ca                       dex
4e0a : 10dd                     bpl tasl7
                        
4e0c : a203                     ldx #3
4e0e :                  tlsr6
                                set_zx zp1,0
                       >            load_flag 0
4e0e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e10 : 48              >            pha         ;use stack to load status
4e11 : b519            >            lda zp1,x    ;load to indexed zeropage
4e13 : 9512            >            sta zpt,x
4e15 : 28              >            plp
                        
4e16 : 5612                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
4e18 : 08              >            php         ;save flags
4e19 : b512            >            lda zpt,x
4e1b : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4e1e : f003            >        beq skip2759
                       >        trap            ;failed not equal (non zero)
4e20 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e23 :                 >skip2759
                       >
4e23 : 68              >            pla         ;load status
                       >            eor_flag 0
4e24 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4e26 : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
4e29 : f003            >        beq skip2762
                       >        trap            ;failed not equal (non zero)
4e2b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e2e :                 >skip2762
                       >
                        
4e2e : ca                       dex
4e2f : 10dd                     bpl tlsr6
4e31 : a203                     ldx #3
4e33 :                  tlsr7
                                set_zx zp1,$ff
                       >            load_flag $ff
4e33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4e35 : 48              >            pha         ;use stack to load status
4e36 : b519            >            lda zp1,x    ;load to indexed zeropage
4e38 : 9512            >            sta zpt,x
4e3a : 28              >            plp
                        
4e3b : 5612                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
4e3d : 08              >            php         ;save flags
4e3e : b512            >            lda zpt,x
4e40 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
4e43 : f003            >        beq skip2767
                       >        trap            ;failed not equal (non zero)
4e45 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e48 :                 >skip2767
                       >
4e48 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4e49 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4e4b : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
4e4e : f003            >        beq skip2770
                       >        trap            ;failed not equal (non zero)
4e50 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e53 :                 >skip2770
                       >
                        
4e53 : ca                       dex
4e54 : 10dd                     bpl tlsr7
                        
4e56 : a203                     ldx #3
4e58 :                  trol6
                                set_zx zp1,0
                       >            load_flag 0
4e58 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4e5a : 48              >            pha         ;use stack to load status
4e5b : b519            >            lda zp1,x    ;load to indexed zeropage
4e5d : 9512            >            sta zpt,x
4e5f : 28              >            plp
                        
4e60 : 3612                     rol zpt,x
                                tst_zx rROL,fROL,0
4e62 : 08              >            php         ;save flags
4e63 : b512            >            lda zpt,x
4e65 : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
4e68 : f003            >        beq skip2775
                       >        trap            ;failed not equal (non zero)
4e6a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e6d :                 >skip2775
                       >
4e6d : 68              >            pla         ;load status
                       >            eor_flag 0
4e6e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4e70 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
4e73 : f003            >        beq skip2778
                       >        trap            ;failed not equal (non zero)
4e75 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e78 :                 >skip2778
                       >
                        
4e78 : ca                       dex
4e79 : 10dd                     bpl trol6
4e7b : a203                     ldx #3
4e7d :                  trol7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
4e7d : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4e7f : 48              >            pha         ;use stack to load status
4e80 : b519            >            lda zp1,x    ;load to indexed zeropage
4e82 : 9512            >            sta zpt,x
4e84 : 28              >            plp
                        
4e85 : 3612                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
4e87 : 08              >            php         ;save flags
4e88 : b512            >            lda zpt,x
4e8a : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
4e8d : f003            >        beq skip2783
                       >        trap            ;failed not equal (non zero)
4e8f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e92 :                 >skip2783
                       >
4e92 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4e93 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4e95 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
4e98 : f003            >        beq skip2786
                       >        trap            ;failed not equal (non zero)
4e9a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4e9d :                 >skip2786
                       >
                        
4e9d : ca                       dex
4e9e : 10dd                     bpl trol7
                        
4ea0 : a203                     ldx #3
4ea2 :                  trolc6
                                set_zx zp1,fc
                       >            load_flag fc
4ea2 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4ea4 : 48              >            pha         ;use stack to load status
4ea5 : b519            >            lda zp1,x    ;load to indexed zeropage
4ea7 : 9512            >            sta zpt,x
4ea9 : 28              >            plp
                        
4eaa : 3612                     rol zpt,x
                                tst_zx rROLc,fROLc,0
4eac : 08              >            php         ;save flags
4ead : b512            >            lda zpt,x
4eaf : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4eb2 : f003            >        beq skip2791
                       >        trap            ;failed not equal (non zero)
4eb4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4eb7 :                 >skip2791
                       >
4eb7 : 68              >            pla         ;load status
                       >            eor_flag 0
4eb8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4eba : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4ebd : f003            >        beq skip2794
                       >        trap            ;failed not equal (non zero)
4ebf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ec2 :                 >skip2794
                       >
                        
4ec2 : ca                       dex
4ec3 : 10dd                     bpl trolc6
4ec5 : a203                     ldx #3
4ec7 :                  trolc7
                                set_zx zp1,$ff
                       >            load_flag $ff
4ec7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4ec9 : 48              >            pha         ;use stack to load status
4eca : b519            >            lda zp1,x    ;load to indexed zeropage
4ecc : 9512            >            sta zpt,x
4ece : 28              >            plp
                        
4ecf : 3612                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
4ed1 : 08              >            php         ;save flags
4ed2 : b512            >            lda zpt,x
4ed4 : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
4ed7 : f003            >        beq skip2799
                       >        trap            ;failed not equal (non zero)
4ed9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4edc :                 >skip2799
                       >
4edc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4edd : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4edf : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
4ee2 : f003            >        beq skip2802
                       >        trap            ;failed not equal (non zero)
4ee4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4ee7 :                 >skip2802
                       >
                        
4ee7 : ca                       dex
4ee8 : 10dd                     bpl trolc7
                        
4eea : a203                     ldx #3
4eec :                  tror6
                                set_zx zp1,0
                       >            load_flag 0
4eec : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
4eee : 48              >            pha         ;use stack to load status
4eef : b519            >            lda zp1,x    ;load to indexed zeropage
4ef1 : 9512            >            sta zpt,x
4ef3 : 28              >            plp
                        
4ef4 : 7612                     ror zpt,x
                                tst_zx rROR,fROR,0
4ef6 : 08              >            php         ;save flags
4ef7 : b512            >            lda zpt,x
4ef9 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4efc : f003            >        beq skip2807
                       >        trap            ;failed not equal (non zero)
4efe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f01 :                 >skip2807
                       >
4f01 : 68              >            pla         ;load status
                       >            eor_flag 0
4f02 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4f04 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4f07 : f003            >        beq skip2810
                       >        trap            ;failed not equal (non zero)
4f09 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f0c :                 >skip2810
                       >
                        
4f0c : ca                       dex
4f0d : 10dd                     bpl tror6
4f0f : a203                     ldx #3
4f11 :                  tror7
                                set_zx zp1,$ff-fc
                       >            load_flag $ff-fc
4f11 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
4f13 : 48              >            pha         ;use stack to load status
4f14 : b519            >            lda zp1,x    ;load to indexed zeropage
4f16 : 9512            >            sta zpt,x
4f18 : 28              >            plp
                        
4f19 : 7612                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
4f1b : 08              >            php         ;save flags
4f1c : b512            >            lda zpt,x
4f1e : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
4f21 : f003            >        beq skip2815
                       >        trap            ;failed not equal (non zero)
4f23 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f26 :                 >skip2815
                       >
4f26 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4f27 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4f29 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
4f2c : f003            >        beq skip2818
                       >        trap            ;failed not equal (non zero)
4f2e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f31 :                 >skip2818
                       >
                        
4f31 : ca                       dex
4f32 : 10dd                     bpl tror7
                        
4f34 : a203                     ldx #3
4f36 :                  trorc6
                                set_zx zp1,fc
                       >            load_flag fc
4f36 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
4f38 : 48              >            pha         ;use stack to load status
4f39 : b519            >            lda zp1,x    ;load to indexed zeropage
4f3b : 9512            >            sta zpt,x
4f3d : 28              >            plp
                        
4f3e : 7612                     ror zpt,x
                                tst_zx rRORc,fRORc,0
4f40 : 08              >            php         ;save flags
4f41 : b512            >            lda zpt,x
4f43 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4f46 : f003            >        beq skip2823
                       >        trap            ;failed not equal (non zero)
4f48 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f4b :                 >skip2823
                       >
4f4b : 68              >            pla         ;load status
                       >            eor_flag 0
4f4c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
4f4e : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4f51 : f003            >        beq skip2826
                       >        trap            ;failed not equal (non zero)
4f53 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f56 :                 >skip2826
                       >
                        
4f56 : ca                       dex
4f57 : 10dd                     bpl trorc6
4f59 : a203                     ldx #3
4f5b :                  trorc7
                                set_zx zp1,$ff
                       >            load_flag $ff
4f5b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
4f5d : 48              >            pha         ;use stack to load status
4f5e : b519            >            lda zp1,x    ;load to indexed zeropage
4f60 : 9512            >            sta zpt,x
4f62 : 28              >            plp
                        
4f63 : 7612                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
4f65 : 08              >            php         ;save flags
4f66 : b512            >            lda zpt,x
4f68 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
4f6b : f003            >        beq skip2831
                       >        trap            ;failed not equal (non zero)
4f6d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f70 :                 >skip2831
                       >
4f70 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
4f71 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
4f73 : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
4f76 : f003            >        beq skip2834
                       >        trap            ;failed not equal (non zero)
4f78 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f7b :                 >skip2834
                       >
                        
4f7b : ca                       dex
4f7c : 10dd                     bpl trorc7
                                next_test
4f7e : ad0002          >            lda test_case   ;previous test
4f81 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
4f83 : f003            >        beq skip2837
                       >        trap            ;failed not equal (non zero)
4f85 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4f88 :                 >skip2837
                       >
0021 =                 >test_num = test_num + 1
4f88 : a921            >            lda #test_num   ;*** next tests' number
4f8a : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
4f8d : d8              >            cld
4f8e : a900            >            lda #0
4f90 : 8512            >            sta zpt         ;set low byte of indirect pointer
4f92 : 8515            >            sta zpt+3       ;checksum high byte
4f94 : 8dbb11          >            sta range_adr   ;reset self modifying code
4f97 : 8dfb57          >            sta tandi1
4f9a : 8d2258          >            sta tandi2
4f9d : 8dbc5a          >            sta teori1
4fa0 : 8de35a          >            sta teori2
4fa3 : 8d7c5d          >            sta torai1
4fa6 : 8da35d          >            sta torai2
4fa9 : 8dba63          >            sta chkdadi  
4fac : 8dd763          >            sta chkdsbi
4faf : 8d6365          >            sta chkadi
4fb2 : 8d8065          >            sta chksbi
4fb5 : 18              >            clc
4fb6 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
4fb8 : 7510            >ccs32839      adc zero_page,x
4fba : 9003            >            bcc ccs22839
4fbc : e615            >            inc zpt+3       ;carry to high byte
4fbe : 18              >            clc
4fbf : e8              >ccs22839      inx
4fc0 : d0f6            >            bne ccs32839
4fc2 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
4fc4 : 8613            >            stx zpt+1
4fc6 : a008            >            ldy #lo(data_bss) ;data after write test area
4fc8 : 7112            >ccs52839      adc (zpt),y
4fca : 9003            >            bcc ccs42839
4fcc : e615            >            inc zpt+3       ;carry to high byte
4fce : 18              >            clc
4fcf : c8              >ccs42839      iny
4fd0 : d0f6            >            bne ccs52839
4fd2 : e8              >            inx             ;advance RAM high address
4fd3 : 8613            >            stx zpt+1
4fd5 : e0e0            >            cpx #ram_top
4fd7 : d0ef            >            bne ccs52839
4fd9 : 8514            >            sta zpt+2       ;checksum low is
4fdb : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
4fde : f003            >        beq skip2840
                       >        trap            ;failed not equal (non zero)
4fe0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4fe3 :                 >skip2840
                       >
4fe3 : a515            >            lda zpt+3       ;checksum high is
4fe5 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
4fe8 : f003            >        beq skip2842
                       >        trap            ;failed not equal (non zero)
4fea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
4fed :                 >skip2842
                       >
                       >
                        
                                
4fed : 8d04ef            sta $ef04
4ff0 : 73686966747320..  db "shifts - abs indexed", 10, 0
5006 : a203                     ldx #3
5008 :                  tasl8
                                set_absx zp1,0
                       >            load_flag 0
5008 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
500a : 48              >            pha         ;use stack to load status
500b : b519            >            lda zp1,x    ;load to indexed memory
500d : 9d0302          >            sta abst,x
5010 : 28              >            plp
                        
5011 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
5014 : 08              >            php         ;save flags
5015 : bd0302          >            lda abst,x
5018 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
501b : f003            >        beq skip2847
                       >        trap            ;failed not equal (non zero)
501d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5020 :                 >skip2847
                       >
5020 : 68              >            pla         ;load status
                       >            eor_flag 0
5021 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5023 : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
5026 : f003            >        beq skip2850
                       >        trap            ;failed not equal (non zero)
5028 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
502b :                 >skip2850
                       >
                        
502b : ca                       dex
502c : 10da                     bpl tasl8
502e : a203                     ldx #3
5030 :                  tasl9
                                set_absx zp1,$ff
                       >            load_flag $ff
5030 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5032 : 48              >            pha         ;use stack to load status
5033 : b519            >            lda zp1,x    ;load to indexed memory
5035 : 9d0302          >            sta abst,x
5038 : 28              >            plp
                        
5039 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
503c : 08              >            php         ;save flags
503d : bd0302          >            lda abst,x
5040 : dd1102          >            cmp rASL,x    ;test result
                       >            trap_ne
5043 : f003            >        beq skip2855
                       >        trap            ;failed not equal (non zero)
5045 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5048 :                 >skip2855
                       >
5048 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5049 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
504b : dd2102          >            cmp fASL,x    ;test flags
                       >            trap_ne
504e : f003            >        beq skip2858
                       >        trap            ;failed not equal (non zero)
5050 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5053 :                 >skip2858
                       >
                        
5053 : ca                       dex
5054 : 10da                     bpl tasl9
                        
5056 : a203                     ldx #3
5058 :                  tlsr8
                                set_absx zp1,0
                       >            load_flag 0
5058 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
505a : 48              >            pha         ;use stack to load status
505b : b519            >            lda zp1,x    ;load to indexed memory
505d : 9d0302          >            sta abst,x
5060 : 28              >            plp
                        
5061 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
5064 : 08              >            php         ;save flags
5065 : bd0302          >            lda abst,x
5068 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
506b : f003            >        beq skip2863
                       >        trap            ;failed not equal (non zero)
506d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5070 :                 >skip2863
                       >
5070 : 68              >            pla         ;load status
                       >            eor_flag 0
5071 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5073 : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
5076 : f003            >        beq skip2866
                       >        trap            ;failed not equal (non zero)
5078 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
507b :                 >skip2866
                       >
                        
507b : ca                       dex
507c : 10da                     bpl tlsr8
507e : a203                     ldx #3
5080 :                  tlsr9
                                set_absx zp1,$ff
                       >            load_flag $ff
5080 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5082 : 48              >            pha         ;use stack to load status
5083 : b519            >            lda zp1,x    ;load to indexed memory
5085 : 9d0302          >            sta abst,x
5088 : 28              >            plp
                        
5089 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
508c : 08              >            php         ;save flags
508d : bd0302          >            lda abst,x
5090 : dd1902          >            cmp rLSR,x    ;test result
                       >            trap_ne
5093 : f003            >        beq skip2871
                       >        trap            ;failed not equal (non zero)
5095 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5098 :                 >skip2871
                       >
5098 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5099 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
509b : dd2902          >            cmp fLSR,x    ;test flags
                       >            trap_ne
509e : f003            >        beq skip2874
                       >        trap            ;failed not equal (non zero)
50a0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
50a3 :                 >skip2874
                       >
                        
50a3 : ca                       dex
50a4 : 10da                     bpl tlsr9
                        
50a6 : a203                     ldx #3
50a8 :                  trol8
                                set_absx zp1,0
                       >            load_flag 0
50a8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
50aa : 48              >            pha         ;use stack to load status
50ab : b519            >            lda zp1,x    ;load to indexed memory
50ad : 9d0302          >            sta abst,x
50b0 : 28              >            plp
                        
50b1 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
50b4 : 08              >            php         ;save flags
50b5 : bd0302          >            lda abst,x
50b8 : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
50bb : f003            >        beq skip2879
                       >        trap            ;failed not equal (non zero)
50bd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
50c0 :                 >skip2879
                       >
50c0 : 68              >            pla         ;load status
                       >            eor_flag 0
50c1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
50c3 : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
50c6 : f003            >        beq skip2882
                       >        trap            ;failed not equal (non zero)
50c8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
50cb :                 >skip2882
                       >
                        
50cb : ca                       dex
50cc : 10da                     bpl trol8
50ce : a203                     ldx #3
50d0 :                  trol9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
50d0 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
50d2 : 48              >            pha         ;use stack to load status
50d3 : b519            >            lda zp1,x    ;load to indexed memory
50d5 : 9d0302          >            sta abst,x
50d8 : 28              >            plp
                        
50d9 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
50dc : 08              >            php         ;save flags
50dd : bd0302          >            lda abst,x
50e0 : dd1102          >            cmp rROL,x    ;test result
                       >            trap_ne
50e3 : f003            >        beq skip2887
                       >        trap            ;failed not equal (non zero)
50e5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
50e8 :                 >skip2887
                       >
50e8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
50e9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
50eb : dd2102          >            cmp fROL,x    ;test flags
                       >            trap_ne
50ee : f003            >        beq skip2890
                       >        trap            ;failed not equal (non zero)
50f0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
50f3 :                 >skip2890
                       >
                        
50f3 : ca                       dex
50f4 : 10da                     bpl trol9
                        
50f6 : a203                     ldx #3
50f8 :                  trolc8
                                set_absx zp1,fc
                       >            load_flag fc
50f8 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
50fa : 48              >            pha         ;use stack to load status
50fb : b519            >            lda zp1,x    ;load to indexed memory
50fd : 9d0302          >            sta abst,x
5100 : 28              >            plp
                        
5101 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
5104 : 08              >            php         ;save flags
5105 : bd0302          >            lda abst,x
5108 : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
510b : f003            >        beq skip2895
                       >        trap            ;failed not equal (non zero)
510d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5110 :                 >skip2895
                       >
5110 : 68              >            pla         ;load status
                       >            eor_flag 0
5111 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5113 : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
5116 : f003            >        beq skip2898
                       >        trap            ;failed not equal (non zero)
5118 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
511b :                 >skip2898
                       >
                        
511b : ca                       dex
511c : 10da                     bpl trolc8
511e : a203                     ldx #3
5120 :                  trolc9
                                set_absx zp1,$ff
                       >            load_flag $ff
5120 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5122 : 48              >            pha         ;use stack to load status
5123 : b519            >            lda zp1,x    ;load to indexed memory
5125 : 9d0302          >            sta abst,x
5128 : 28              >            plp
                        
5129 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
512c : 08              >            php         ;save flags
512d : bd0302          >            lda abst,x
5130 : dd1502          >            cmp rROLc,x    ;test result
                       >            trap_ne
5133 : f003            >        beq skip2903
                       >        trap            ;failed not equal (non zero)
5135 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5138 :                 >skip2903
                       >
5138 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5139 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
513b : dd2502          >            cmp fROLc,x    ;test flags
                       >            trap_ne
513e : f003            >        beq skip2906
                       >        trap            ;failed not equal (non zero)
5140 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5143 :                 >skip2906
                       >
                        
5143 : ca                       dex
5144 : 10da                     bpl trolc9
                        
5146 : a203                     ldx #3
5148 :                  tror8
                                set_absx zp1,0
                       >            load_flag 0
5148 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
514a : 48              >            pha         ;use stack to load status
514b : b519            >            lda zp1,x    ;load to indexed memory
514d : 9d0302          >            sta abst,x
5150 : 28              >            plp
                        
5151 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
5154 : 08              >            php         ;save flags
5155 : bd0302          >            lda abst,x
5158 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
515b : f003            >        beq skip2911
                       >        trap            ;failed not equal (non zero)
515d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5160 :                 >skip2911
                       >
5160 : 68              >            pla         ;load status
                       >            eor_flag 0
5161 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5163 : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
5166 : f003            >        beq skip2914
                       >        trap            ;failed not equal (non zero)
5168 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
516b :                 >skip2914
                       >
                        
516b : ca                       dex
516c : 10da                     bpl tror8
516e : a203                     ldx #3
5170 :                  tror9
                                set_absx zp1,$ff-fc
                       >            load_flag $ff-fc
5170 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
5172 : 48              >            pha         ;use stack to load status
5173 : b519            >            lda zp1,x    ;load to indexed memory
5175 : 9d0302          >            sta abst,x
5178 : 28              >            plp
                        
5179 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
517c : 08              >            php         ;save flags
517d : bd0302          >            lda abst,x
5180 : dd1902          >            cmp rROR,x    ;test result
                       >            trap_ne
5183 : f003            >        beq skip2919
                       >        trap            ;failed not equal (non zero)
5185 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5188 :                 >skip2919
                       >
5188 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
5189 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
518b : dd2902          >            cmp fROR,x    ;test flags
                       >            trap_ne
518e : f003            >        beq skip2922
                       >        trap            ;failed not equal (non zero)
5190 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5193 :                 >skip2922
                       >
                        
5193 : ca                       dex
5194 : 10da                     bpl tror9
                        
5196 : a203                     ldx #3
5198 :                  trorc8
                                set_absx zp1,fc
                       >            load_flag fc
5198 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
519a : 48              >            pha         ;use stack to load status
519b : b519            >            lda zp1,x    ;load to indexed memory
519d : 9d0302          >            sta abst,x
51a0 : 28              >            plp
                        
51a1 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
51a4 : 08              >            php         ;save flags
51a5 : bd0302          >            lda abst,x
51a8 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
51ab : f003            >        beq skip2927
                       >        trap            ;failed not equal (non zero)
51ad : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
51b0 :                 >skip2927
                       >
51b0 : 68              >            pla         ;load status
                       >            eor_flag 0
51b1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
51b3 : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
51b6 : f003            >        beq skip2930
                       >        trap            ;failed not equal (non zero)
51b8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
51bb :                 >skip2930
                       >
                        
51bb : ca                       dex
51bc : 10da                     bpl trorc8
51be : a203                     ldx #3
51c0 :                  trorc9
                                set_absx zp1,$ff
                       >            load_flag $ff
51c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
51c2 : 48              >            pha         ;use stack to load status
51c3 : b519            >            lda zp1,x    ;load to indexed memory
51c5 : 9d0302          >            sta abst,x
51c8 : 28              >            plp
                        
51c9 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
51cc : 08              >            php         ;save flags
51cd : bd0302          >            lda abst,x
51d0 : dd1d02          >            cmp rRORc,x    ;test result
                       >            trap_ne
51d3 : f003            >        beq skip2935
                       >        trap            ;failed not equal (non zero)
51d5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
51d8 :                 >skip2935
                       >
51d8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
51d9 : 497c            >            eor #$ff-fnzc|fao         ;invert expected flags + always on bits
                       >
51db : dd2d02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
51de : f003            >        beq skip2938
                       >        trap            ;failed not equal (non zero)
51e0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
51e3 :                 >skip2938
                       >
                        
51e3 : ca                       dex
51e4 : 10da                     bpl trorc9
                                next_test
51e6 : ad0002          >            lda test_case   ;previous test
51e9 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
51eb : f003            >        beq skip2941
                       >        trap            ;failed not equal (non zero)
51ed : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
51f0 :                 >skip2941
                       >
0022 =                 >test_num = test_num + 1
51f0 : a922            >            lda #test_num   ;*** next tests' number
51f2 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
51f5 : d8              >            cld
51f6 : a900            >            lda #0
51f8 : 8512            >            sta zpt         ;set low byte of indirect pointer
51fa : 8515            >            sta zpt+3       ;checksum high byte
51fc : 8dbb11          >            sta range_adr   ;reset self modifying code
51ff : 8dfb57          >            sta tandi1
5202 : 8d2258          >            sta tandi2
5205 : 8dbc5a          >            sta teori1
5208 : 8de35a          >            sta teori2
520b : 8d7c5d          >            sta torai1
520e : 8da35d          >            sta torai2
5211 : 8dba63          >            sta chkdadi  
5214 : 8dd763          >            sta chkdsbi
5217 : 8d6365          >            sta chkadi
521a : 8d8065          >            sta chksbi
521d : 18              >            clc
521e : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
5220 : 7510            >ccs32943      adc zero_page,x
5222 : 9003            >            bcc ccs22943
5224 : e615            >            inc zpt+3       ;carry to high byte
5226 : 18              >            clc
5227 : e8              >ccs22943      inx
5228 : d0f6            >            bne ccs32943
522a : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
522c : 8613            >            stx zpt+1
522e : a008            >            ldy #lo(data_bss) ;data after write test area
5230 : 7112            >ccs52943      adc (zpt),y
5232 : 9003            >            bcc ccs42943
5234 : e615            >            inc zpt+3       ;carry to high byte
5236 : 18              >            clc
5237 : c8              >ccs42943      iny
5238 : d0f6            >            bne ccs52943
523a : e8              >            inx             ;advance RAM high address
523b : 8613            >            stx zpt+1
523d : e0e0            >            cpx #ram_top
523f : d0ef            >            bne ccs52943
5241 : 8514            >            sta zpt+2       ;checksum low is
5243 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5246 : f003            >        beq skip2944
                       >        trap            ;failed not equal (non zero)
5248 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
524b :                 >skip2944
                       >
524b : a515            >            lda zpt+3       ;checksum high is
524d : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
5250 : f003            >        beq skip2946
                       >        trap            ;failed not equal (non zero)
5252 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5255 :                 >skip2946
                       >
                       >
                        
                        
5255 : 8d04ef            sta $ef04
5258 : 74657374696e67..  db "testing memory increment/decrement - INC DEC all addressing modes", 10, 0
529b : 8d04ef            sta $ef04
529e : 7a65726f706167..  db "zeropage", 10, 0
52a8 : a200                     ldx #0
52aa : a97e                     lda #$7e
52ac : 8512                     sta zpt
52ae :                  tinc    
                                set_stat 0
                       >            load_flag 0
52ae : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52b0 : 48              >            pha         ;use stack to load status
52b1 : 28              >            plp
                        
52b2 : e612                     inc zpt
                                tst_z rINC,fINC,0
52b4 : 08              >            php         ;save flags
52b5 : a512            >            lda zpt
52b7 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
52ba : f003            >        beq skip2951
                       >        trap            ;failed not equal (non zero)
52bc : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
52bf :                 >skip2951
                       >
52bf : 68              >            pla         ;load status
                       >            eor_flag 0
52c0 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
52c2 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
52c5 : f003            >        beq skip2954
                       >        trap            ;failed not equal (non zero)
52c7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
52ca :                 >skip2954
                       >
                        
52ca : e8                       inx
52cb : e002                     cpx #2
52cd : d004                     bne tinc1
52cf : a9fe                     lda #$fe
52d1 : 8512                     sta zpt
52d3 : e005             tinc1   cpx #5
52d5 : d0d7                     bne tinc
52d7 : ca                       dex
52d8 : e612                     inc zpt
52da :                  tdec    
                                set_stat 0
                       >            load_flag 0
52da : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
52dc : 48              >            pha         ;use stack to load status
52dd : 28              >            plp
                        
52de : c612                     dec zpt
                                tst_z rINC,fINC,0
52e0 : 08              >            php         ;save flags
52e1 : a512            >            lda zpt
52e3 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
52e6 : f003            >        beq skip2959
                       >        trap            ;failed not equal (non zero)
52e8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
52eb :                 >skip2959
                       >
52eb : 68              >            pla         ;load status
                       >            eor_flag 0
52ec : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
52ee : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
52f1 : f003            >        beq skip2962
                       >        trap            ;failed not equal (non zero)
52f3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
52f6 :                 >skip2962
                       >
                        
52f6 : ca                       dex
52f7 : 300a                     bmi tdec1
52f9 : e001                     cpx #1
52fb : d0dd                     bne tdec
52fd : a981                     lda #$81
52ff : 8512                     sta zpt
5301 : d0d7                     bne tdec
5303 :                  tdec1
5303 : a200                     ldx #0
5305 : a97e                     lda #$7e
5307 : 8512                     sta zpt
5309 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
5309 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
530b : 48              >            pha         ;use stack to load status
530c : 28              >            plp
                        
530d : e612                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
530f : 08              >            php         ;save flags
5310 : a512            >            lda zpt
5312 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5315 : f003            >        beq skip2967
                       >        trap            ;failed not equal (non zero)
5317 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
531a :                 >skip2967
                       >
531a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
531b : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
531d : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5320 : f003            >        beq skip2970
                       >        trap            ;failed not equal (non zero)
5322 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5325 :                 >skip2970
                       >
                        
5325 : e8                       inx
5326 : e002                     cpx #2
5328 : d004                     bne tinc11
532a : a9fe                     lda #$fe
532c : 8512                     sta zpt
532e : e005             tinc11  cpx #5
5330 : d0d7                     bne tinc10
5332 : ca                       dex
5333 : e612                     inc zpt
5335 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
5335 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5337 : 48              >            pha         ;use stack to load status
5338 : 28              >            plp
                        
5339 : c612                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
533b : 08              >            php         ;save flags
533c : a512            >            lda zpt
533e : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5341 : f003            >        beq skip2975
                       >        trap            ;failed not equal (non zero)
5343 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5346 :                 >skip2975
                       >
5346 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5347 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5349 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
534c : f003            >        beq skip2978
                       >        trap            ;failed not equal (non zero)
534e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5351 :                 >skip2978
                       >
                        
5351 : ca                       dex
5352 : 300a                     bmi tdec11
5354 : e001                     cpx #1
5356 : d0dd                     bne tdec10
5358 : a981                     lda #$81
535a : 8512                     sta zpt
535c : d0d7                     bne tdec10
535e :                  tdec11
                                next_test
535e : ad0002          >            lda test_case   ;previous test
5361 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5363 : f003            >        beq skip2981
                       >        trap            ;failed not equal (non zero)
5365 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5368 :                 >skip2981
                       >
0023 =                 >test_num = test_num + 1
5368 : a923            >            lda #test_num   ;*** next tests' number
536a : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
536d : d8              >            cld
536e : a900            >            lda #0
5370 : 8512            >            sta zpt         ;set low byte of indirect pointer
5372 : 8515            >            sta zpt+3       ;checksum high byte
5374 : 8dbb11          >            sta range_adr   ;reset self modifying code
5377 : 8dfb57          >            sta tandi1
537a : 8d2258          >            sta tandi2
537d : 8dbc5a          >            sta teori1
5380 : 8de35a          >            sta teori2
5383 : 8d7c5d          >            sta torai1
5386 : 8da35d          >            sta torai2
5389 : 8dba63          >            sta chkdadi  
538c : 8dd763          >            sta chkdsbi
538f : 8d6365          >            sta chkadi
5392 : 8d8065          >            sta chksbi
5395 : 18              >            clc
5396 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
5398 : 7510            >ccs32983      adc zero_page,x
539a : 9003            >            bcc ccs22983
539c : e615            >            inc zpt+3       ;carry to high byte
539e : 18              >            clc
539f : e8              >ccs22983      inx
53a0 : d0f6            >            bne ccs32983
53a2 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
53a4 : 8613            >            stx zpt+1
53a6 : a008            >            ldy #lo(data_bss) ;data after write test area
53a8 : 7112            >ccs52983      adc (zpt),y
53aa : 9003            >            bcc ccs42983
53ac : e615            >            inc zpt+3       ;carry to high byte
53ae : 18              >            clc
53af : c8              >ccs42983      iny
53b0 : d0f6            >            bne ccs52983
53b2 : e8              >            inx             ;advance RAM high address
53b3 : 8613            >            stx zpt+1
53b5 : e0e0            >            cpx #ram_top
53b7 : d0ef            >            bne ccs52983
53b9 : 8514            >            sta zpt+2       ;checksum low is
53bb : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
53be : f003            >        beq skip2984
                       >        trap            ;failed not equal (non zero)
53c0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
53c3 :                 >skip2984
                       >
53c3 : a515            >            lda zpt+3       ;checksum high is
53c5 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
53c8 : f003            >        beq skip2986
                       >        trap            ;failed not equal (non zero)
53ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
53cd :                 >skip2986
                       >
                       >
                        
                        
53cd : 8d04ef            sta $ef04
53d0 : 6162736f6c7574..  db "absolute memory", 10, 0
53e1 : a200                     ldx #0
53e3 : a97e                     lda #$7e
53e5 : 8d0302                   sta abst
53e8 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
53e8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
53ea : 48              >            pha         ;use stack to load status
53eb : 28              >            plp
                        
53ec : ee0302                   inc abst
                                tst_abs rINC,fINC,0
53ef : 08              >            php         ;save flags
53f0 : ad0302          >            lda abst
53f3 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
53f6 : f003            >        beq skip2991
                       >        trap            ;failed not equal (non zero)
53f8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
53fb :                 >skip2991
                       >
53fb : 68              >            pla         ;load status
                       >            eor_flag 0
53fc : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
53fe : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5401 : f003            >        beq skip2994
                       >        trap            ;failed not equal (non zero)
5403 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5406 :                 >skip2994
                       >
                        
5406 : e8                       inx
5407 : e002                     cpx #2
5409 : d005                     bne tinc3
540b : a9fe                     lda #$fe
540d : 8d0302                   sta abst
5410 : e005             tinc3   cpx #5
5412 : d0d4                     bne tinc2
5414 : ca                       dex
5415 : ee0302                   inc abst
5418 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
5418 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
541a : 48              >            pha         ;use stack to load status
541b : 28              >            plp
                        
541c : ce0302                   dec abst
                                tst_abs rINC,fINC,0
541f : 08              >            php         ;save flags
5420 : ad0302          >            lda abst
5423 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5426 : f003            >        beq skip2999
                       >        trap            ;failed not equal (non zero)
5428 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
542b :                 >skip2999
                       >
542b : 68              >            pla         ;load status
                       >            eor_flag 0
542c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
542e : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5431 : f003            >        beq skip3002
                       >        trap            ;failed not equal (non zero)
5433 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5436 :                 >skip3002
                       >
                        
5436 : ca                       dex
5437 : 300b                     bmi tdec3
5439 : e001                     cpx #1
543b : d0db                     bne tdec2
543d : a981                     lda #$81
543f : 8d0302                   sta abst
5442 : d0d4                     bne tdec2
5444 :                  tdec3
5444 : a200                     ldx #0
5446 : a97e                     lda #$7e
5448 : 8d0302                   sta abst
544b :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
544b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
544d : 48              >            pha         ;use stack to load status
544e : 28              >            plp
                        
544f : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
5452 : 08              >            php         ;save flags
5453 : ad0302          >            lda abst
5456 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5459 : f003            >        beq skip3007
                       >        trap            ;failed not equal (non zero)
545b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
545e :                 >skip3007
                       >
545e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
545f : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5461 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5464 : f003            >        beq skip3010
                       >        trap            ;failed not equal (non zero)
5466 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5469 :                 >skip3010
                       >
                        
5469 : e8                       inx
546a : e002                     cpx #2
546c : d005                     bne tinc13
546e : a9fe                     lda #$fe
5470 : 8d0302                   sta abst
5473 : e005             tinc13   cpx #5
5475 : d0d4                     bne tinc12
5477 : ca                       dex
5478 : ee0302                   inc abst
547b :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
547b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
547d : 48              >            pha         ;use stack to load status
547e : 28              >            plp
                        
547f : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
5482 : 08              >            php         ;save flags
5483 : ad0302          >            lda abst
5486 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5489 : f003            >        beq skip3015
                       >        trap            ;failed not equal (non zero)
548b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
548e :                 >skip3015
                       >
548e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
548f : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5491 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5494 : f003            >        beq skip3018
                       >        trap            ;failed not equal (non zero)
5496 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5499 :                 >skip3018
                       >
                        
5499 : ca                       dex
549a : 300b                     bmi tdec13
549c : e001                     cpx #1
549e : d0db                     bne tdec12
54a0 : a981                     lda #$81
54a2 : 8d0302                   sta abst
54a5 : d0d4                     bne tdec12
54a7 :                  tdec13
                                next_test
54a7 : ad0002          >            lda test_case   ;previous test
54aa : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
54ac : f003            >        beq skip3021
                       >        trap            ;failed not equal (non zero)
54ae : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
54b1 :                 >skip3021
                       >
0024 =                 >test_num = test_num + 1
54b1 : a924            >            lda #test_num   ;*** next tests' number
54b3 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
54b6 : d8              >            cld
54b7 : a900            >            lda #0
54b9 : 8512            >            sta zpt         ;set low byte of indirect pointer
54bb : 8515            >            sta zpt+3       ;checksum high byte
54bd : 8dbb11          >            sta range_adr   ;reset self modifying code
54c0 : 8dfb57          >            sta tandi1
54c3 : 8d2258          >            sta tandi2
54c6 : 8dbc5a          >            sta teori1
54c9 : 8de35a          >            sta teori2
54cc : 8d7c5d          >            sta torai1
54cf : 8da35d          >            sta torai2
54d2 : 8dba63          >            sta chkdadi  
54d5 : 8dd763          >            sta chkdsbi
54d8 : 8d6365          >            sta chkadi
54db : 8d8065          >            sta chksbi
54de : 18              >            clc
54df : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
54e1 : 7510            >ccs33023      adc zero_page,x
54e3 : 9003            >            bcc ccs23023
54e5 : e615            >            inc zpt+3       ;carry to high byte
54e7 : 18              >            clc
54e8 : e8              >ccs23023      inx
54e9 : d0f6            >            bne ccs33023
54eb : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
54ed : 8613            >            stx zpt+1
54ef : a008            >            ldy #lo(data_bss) ;data after write test area
54f1 : 7112            >ccs53023      adc (zpt),y
54f3 : 9003            >            bcc ccs43023
54f5 : e615            >            inc zpt+3       ;carry to high byte
54f7 : 18              >            clc
54f8 : c8              >ccs43023      iny
54f9 : d0f6            >            bne ccs53023
54fb : e8              >            inx             ;advance RAM high address
54fc : 8613            >            stx zpt+1
54fe : e0e0            >            cpx #ram_top
5500 : d0ef            >            bne ccs53023
5502 : 8514            >            sta zpt+2       ;checksum low is
5504 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5507 : f003            >        beq skip3024
                       >        trap            ;failed not equal (non zero)
5509 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
550c :                 >skip3024
                       >
550c : a515            >            lda zpt+3       ;checksum high is
550e : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
5511 : f003            >        beq skip3026
                       >        trap            ;failed not equal (non zero)
5513 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5516 :                 >skip3026
                       >
                       >
                        
                        
5516 : 8d04ef            sta $ef04
5519 : 7a65726f706167..  db "zeropage indexed", 10, 0
552b : a200                     ldx #0
552d : a97e                     lda #$7e
552f : 9512             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
5531 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5533 : 48              >            pha         ;use stack to load status
5534 : 28              >            plp
                        
5535 : f612                     inc zpt,x
                                tst_zx rINC,fINC,0
5537 : 08              >            php         ;save flags
5538 : b512            >            lda zpt,x
553a : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
553d : f003            >        beq skip3031
                       >        trap            ;failed not equal (non zero)
553f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5542 :                 >skip3031
                       >
5542 : 68              >            pla         ;load status
                       >            eor_flag 0
5543 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5545 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5548 : f003            >        beq skip3034
                       >        trap            ;failed not equal (non zero)
554a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
554d :                 >skip3034
                       >
                        
554d : b512                     lda zpt,x
554f : e8                       inx
5550 : e002                     cpx #2
5552 : d002                     bne tinc5
5554 : a9fe                     lda #$fe
5556 : e005             tinc5   cpx #5
5558 : d0d5                     bne tinc4
555a : ca                       dex
555b : a902                     lda #2
555d : 9512             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
555f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5561 : 48              >            pha         ;use stack to load status
5562 : 28              >            plp
                        
5563 : d612                     dec zpt,x
                                tst_zx rINC,fINC,0
5565 : 08              >            php         ;save flags
5566 : b512            >            lda zpt,x
5568 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
556b : f003            >        beq skip3039
                       >        trap            ;failed not equal (non zero)
556d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5570 :                 >skip3039
                       >
5570 : 68              >            pla         ;load status
                       >            eor_flag 0
5571 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5573 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5576 : f003            >        beq skip3042
                       >        trap            ;failed not equal (non zero)
5578 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
557b :                 >skip3042
                       >
                        
557b : b512                     lda zpt,x
557d : ca                       dex
557e : 3008                     bmi tdec5
5580 : e001                     cpx #1
5582 : d0d9                     bne tdec4
5584 : a981                     lda #$81
5586 : d0d5                     bne tdec4
5588 :                  tdec5
5588 : a200                     ldx #0
558a : a97e                     lda #$7e
558c : 9512             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
558e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5590 : 48              >            pha         ;use stack to load status
5591 : 28              >            plp
                        
5592 : f612                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
5594 : 08              >            php         ;save flags
5595 : b512            >            lda zpt,x
5597 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
559a : f003            >        beq skip3047
                       >        trap            ;failed not equal (non zero)
559c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
559f :                 >skip3047
                       >
559f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
55a0 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
55a2 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
55a5 : f003            >        beq skip3050
                       >        trap            ;failed not equal (non zero)
55a7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
55aa :                 >skip3050
                       >
                        
55aa : b512                     lda zpt,x
55ac : e8                       inx
55ad : e002                     cpx #2
55af : d002                     bne tinc15
55b1 : a9fe                     lda #$fe
55b3 : e005             tinc15  cpx #5
55b5 : d0d5                     bne tinc14
55b7 : ca                       dex
55b8 : a902                     lda #2
55ba : 9512             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
55bc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
55be : 48              >            pha         ;use stack to load status
55bf : 28              >            plp
                        
55c0 : d612                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
55c2 : 08              >            php         ;save flags
55c3 : b512            >            lda zpt,x
55c5 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
55c8 : f003            >        beq skip3055
                       >        trap            ;failed not equal (non zero)
55ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
55cd :                 >skip3055
                       >
55cd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
55ce : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
55d0 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
55d3 : f003            >        beq skip3058
                       >        trap            ;failed not equal (non zero)
55d5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
55d8 :                 >skip3058
                       >
                        
55d8 : b512                     lda zpt,x
55da : ca                       dex
55db : 3008                     bmi tdec15
55dd : e001                     cpx #1
55df : d0d9                     bne tdec14
55e1 : a981                     lda #$81
55e3 : d0d5                     bne tdec14
55e5 :                  tdec15
                                next_test
55e5 : ad0002          >            lda test_case   ;previous test
55e8 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
55ea : f003            >        beq skip3061
                       >        trap            ;failed not equal (non zero)
55ec : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
55ef :                 >skip3061
                       >
0025 =                 >test_num = test_num + 1
55ef : a925            >            lda #test_num   ;*** next tests' number
55f1 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
55f4 : d8              >            cld
55f5 : a900            >            lda #0
55f7 : 8512            >            sta zpt         ;set low byte of indirect pointer
55f9 : 8515            >            sta zpt+3       ;checksum high byte
55fb : 8dbb11          >            sta range_adr   ;reset self modifying code
55fe : 8dfb57          >            sta tandi1
5601 : 8d2258          >            sta tandi2
5604 : 8dbc5a          >            sta teori1
5607 : 8de35a          >            sta teori2
560a : 8d7c5d          >            sta torai1
560d : 8da35d          >            sta torai2
5610 : 8dba63          >            sta chkdadi  
5613 : 8dd763          >            sta chkdsbi
5616 : 8d6365          >            sta chkadi
5619 : 8d8065          >            sta chksbi
561c : 18              >            clc
561d : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
561f : 7510            >ccs33063      adc zero_page,x
5621 : 9003            >            bcc ccs23063
5623 : e615            >            inc zpt+3       ;carry to high byte
5625 : 18              >            clc
5626 : e8              >ccs23063      inx
5627 : d0f6            >            bne ccs33063
5629 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
562b : 8613            >            stx zpt+1
562d : a008            >            ldy #lo(data_bss) ;data after write test area
562f : 7112            >ccs53063      adc (zpt),y
5631 : 9003            >            bcc ccs43063
5633 : e615            >            inc zpt+3       ;carry to high byte
5635 : 18              >            clc
5636 : c8              >ccs43063      iny
5637 : d0f6            >            bne ccs53063
5639 : e8              >            inx             ;advance RAM high address
563a : 8613            >            stx zpt+1
563c : e0e0            >            cpx #ram_top
563e : d0ef            >            bne ccs53063
5640 : 8514            >            sta zpt+2       ;checksum low is
5642 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5645 : f003            >        beq skip3064
                       >        trap            ;failed not equal (non zero)
5647 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
564a :                 >skip3064
                       >
564a : a515            >            lda zpt+3       ;checksum high is
564c : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
564f : f003            >        beq skip3066
                       >        trap            ;failed not equal (non zero)
5651 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5654 :                 >skip3066
                       >
                       >
                        
                        
5654 : 8d04ef            sta $ef04
5657 : 6d656d6f727920..  db "memory indexed", 10, 0
5667 : a200                     ldx #0
5669 : a97e                     lda #$7e
566b : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
566e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5670 : 48              >            pha         ;use stack to load status
5671 : 28              >            plp
                        
5672 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
5675 : 08              >            php         ;save flags
5676 : bd0302          >            lda abst,x
5679 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
567c : f003            >        beq skip3071
                       >        trap            ;failed not equal (non zero)
567e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5681 :                 >skip3071
                       >
5681 : 68              >            pla         ;load status
                       >            eor_flag 0
5682 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5684 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
5687 : f003            >        beq skip3074
                       >        trap            ;failed not equal (non zero)
5689 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
568c :                 >skip3074
                       >
                        
568c : bd0302                   lda abst,x
568f : e8                       inx
5690 : e002                     cpx #2
5692 : d002                     bne tinc7
5694 : a9fe                     lda #$fe
5696 : e005             tinc7   cpx #5
5698 : d0d1                     bne tinc6
569a : ca                       dex
569b : a902                     lda #2
569d : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
56a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
56a2 : 48              >            pha         ;use stack to load status
56a3 : 28              >            plp
                        
56a4 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
56a7 : 08              >            php         ;save flags
56a8 : bd0302          >            lda abst,x
56ab : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
56ae : f003            >        beq skip3079
                       >        trap            ;failed not equal (non zero)
56b0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
56b3 :                 >skip3079
                       >
56b3 : 68              >            pla         ;load status
                       >            eor_flag 0
56b4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
56b6 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
56b9 : f003            >        beq skip3082
                       >        trap            ;failed not equal (non zero)
56bb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
56be :                 >skip3082
                       >
                        
56be : bd0302                   lda abst,x
56c1 : ca                       dex
56c2 : 3008                     bmi tdec7
56c4 : e001                     cpx #1
56c6 : d0d5                     bne tdec6
56c8 : a981                     lda #$81
56ca : d0d1                     bne tdec6
56cc :                  tdec7
56cc : a200                     ldx #0
56ce : a97e                     lda #$7e
56d0 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
56d3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
56d5 : 48              >            pha         ;use stack to load status
56d6 : 28              >            plp
                        
56d7 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
56da : 08              >            php         ;save flags
56db : bd0302          >            lda abst,x
56de : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
56e1 : f003            >        beq skip3087
                       >        trap            ;failed not equal (non zero)
56e3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
56e6 :                 >skip3087
                       >
56e6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
56e7 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
56e9 : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
56ec : f003            >        beq skip3090
                       >        trap            ;failed not equal (non zero)
56ee : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
56f1 :                 >skip3090
                       >
                        
56f1 : bd0302                   lda abst,x
56f4 : e8                       inx
56f5 : e002                     cpx #2
56f7 : d002                     bne tinc17
56f9 : a9fe                     lda #$fe
56fb : e005             tinc17  cpx #5
56fd : d0d1                     bne tinc16
56ff : ca                       dex
5700 : a902                     lda #2
5702 : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
5705 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5707 : 48              >            pha         ;use stack to load status
5708 : 28              >            plp
                        
5709 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
570c : 08              >            php         ;save flags
570d : bd0302          >            lda abst,x
5710 : dd3102          >            cmp rINC,x    ;test result
                       >            trap_ne
5713 : f003            >        beq skip3095
                       >        trap            ;failed not equal (non zero)
5715 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5718 :                 >skip3095
                       >
5718 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5719 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
571b : dd3602          >            cmp fINC,x    ;test flags
                       >            trap_ne
571e : f003            >        beq skip3098
                       >        trap            ;failed not equal (non zero)
5720 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5723 :                 >skip3098
                       >
                        
5723 : bd0302                   lda abst,x
5726 : ca                       dex
5727 : 3008                     bmi tdec17
5729 : e001                     cpx #1
572b : d0d5                     bne tdec16
572d : a981                     lda #$81
572f : d0d1                     bne tdec16
5731 :                  tdec17
                                next_test
5731 : ad0002          >            lda test_case   ;previous test
5734 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5736 : f003            >        beq skip3101
                       >        trap            ;failed not equal (non zero)
5738 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
573b :                 >skip3101
                       >
0026 =                 >test_num = test_num + 1
573b : a926            >            lda #test_num   ;*** next tests' number
573d : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
5740 : d8              >            cld
5741 : a900            >            lda #0
5743 : 8512            >            sta zpt         ;set low byte of indirect pointer
5745 : 8515            >            sta zpt+3       ;checksum high byte
5747 : 8dbb11          >            sta range_adr   ;reset self modifying code
574a : 8dfb57          >            sta tandi1
574d : 8d2258          >            sta tandi2
5750 : 8dbc5a          >            sta teori1
5753 : 8de35a          >            sta teori2
5756 : 8d7c5d          >            sta torai1
5759 : 8da35d          >            sta torai2
575c : 8dba63          >            sta chkdadi  
575f : 8dd763          >            sta chkdsbi
5762 : 8d6365          >            sta chkadi
5765 : 8d8065          >            sta chksbi
5768 : 18              >            clc
5769 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
576b : 7510            >ccs33103      adc zero_page,x
576d : 9003            >            bcc ccs23103
576f : e615            >            inc zpt+3       ;carry to high byte
5771 : 18              >            clc
5772 : e8              >ccs23103      inx
5773 : d0f6            >            bne ccs33103
5775 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
5777 : 8613            >            stx zpt+1
5779 : a008            >            ldy #lo(data_bss) ;data after write test area
577b : 7112            >ccs53103      adc (zpt),y
577d : 9003            >            bcc ccs43103
577f : e615            >            inc zpt+3       ;carry to high byte
5781 : 18              >            clc
5782 : c8              >ccs43103      iny
5783 : d0f6            >            bne ccs53103
5785 : e8              >            inx             ;advance RAM high address
5786 : 8613            >            stx zpt+1
5788 : e0e0            >            cpx #ram_top
578a : d0ef            >            bne ccs53103
578c : 8514            >            sta zpt+2       ;checksum low is
578e : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5791 : f003            >        beq skip3104
                       >        trap            ;failed not equal (non zero)
5793 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5796 :                 >skip3104
                       >
5796 : a515            >            lda zpt+3       ;checksum high is
5798 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
579b : f003            >        beq skip3106
                       >        trap            ;failed not equal (non zero)
579d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
57a0 :                 >skip3106
                       >
                       >
                        
                        
57a0 : 8d04ef            sta $ef04
57a3 : 74657374696e67..  db "testing logical instructions - AND EOR ORA all addressing modes", 10, 0
57e4 : 8d04ef            sta $ef04
57e7 : 414e440a00        db "AND", 10, 0
57ec : a203                     ldx #3      ;immediate - self modifying code
57ee : b522             tand    lda zpAN,x
57f0 : 8dfb57                   sta tandi1
                                set_ax  absANa,0
                       >            load_flag 0
57f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
57f5 : 48              >            pha         ;use stack to load status
57f6 : bd4b02          >            lda absANa,x    ;precharge accu
57f9 : 28              >            plp
                        
57fb =                  tandi1  equ *+1     ;target for immediate operand
57fa : 2963                     and #99
                                tst_ax  absrlo,absflo,0
57fc : 08              >            php         ;save flags
57fd : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5800 : f003            >        beq skip3111
                       >        trap            ;failed not equal (non zero)
5802 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5805 :                 >skip3111
                       >
5805 : 68              >            pla         ;load status
                       >            eor_flag 0
5806 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5808 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
580b : f003            >        beq skip3114
                       >        trap            ;failed not equal (non zero)
580d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5810 :                 >skip3114
                       >
                        
5810 : ca                       dex
5811 : 10db                     bpl tand
5813 : a203                     ldx #3
5815 : b522             tand1   lda zpAN,x
5817 : 8d2258                   sta tandi2
                                set_ax  absANa,$ff
                       >            load_flag $ff
581a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
581c : 48              >            pha         ;use stack to load status
581d : bd4b02          >            lda absANa,x    ;precharge accu
5820 : 28              >            plp
                        
5822 =                  tandi2  equ *+1     ;target for immediate operand
5821 : 2963                     and #99
                                tst_ax  absrlo,absflo,$ff-fnz
5823 : 08              >            php         ;save flags
5824 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5827 : f003            >        beq skip3119
                       >        trap            ;failed not equal (non zero)
5829 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
582c :                 >skip3119
                       >
582c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
582d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
582f : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5832 : f003            >        beq skip3122
                       >        trap            ;failed not equal (non zero)
5834 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5837 :                 >skip3122
                       >
                        
5837 : ca                       dex
5838 : 10db                     bpl tand1
                        
583a : a203                     ldx #3      ;zp
583c : b522             tand2    lda zpAN,x
583e : 8512                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
5840 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5842 : 48              >            pha         ;use stack to load status
5843 : bd4b02          >            lda absANa,x    ;precharge accu
5846 : 28              >            plp
                        
5847 : 2512                     and zpt
                                tst_ax  absrlo,absflo,0
5849 : 08              >            php         ;save flags
584a : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
584d : f003            >        beq skip3127
                       >        trap            ;failed not equal (non zero)
584f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5852 :                 >skip3127
                       >
5852 : 68              >            pla         ;load status
                       >            eor_flag 0
5853 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5855 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5858 : f003            >        beq skip3130
                       >        trap            ;failed not equal (non zero)
585a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
585d :                 >skip3130
                       >
                        
585d : ca                       dex
585e : 10dc                     bpl tand2
5860 : a203                     ldx #3
5862 : b522             tand3   lda zpAN,x
5864 : 8512                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
5866 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5868 : 48              >            pha         ;use stack to load status
5869 : bd4b02          >            lda absANa,x    ;precharge accu
586c : 28              >            plp
                        
586d : 2512                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
586f : 08              >            php         ;save flags
5870 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5873 : f003            >        beq skip3135
                       >        trap            ;failed not equal (non zero)
5875 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5878 :                 >skip3135
                       >
5878 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5879 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
587b : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
587e : f003            >        beq skip3138
                       >        trap            ;failed not equal (non zero)
5880 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5883 :                 >skip3138
                       >
                        
5883 : ca                       dex
5884 : 10dc                     bpl tand3
                        
5886 : a203                     ldx #3      ;abs
5888 : b522             tand4   lda zpAN,x
588a : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
588d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
588f : 48              >            pha         ;use stack to load status
5890 : bd4b02          >            lda absANa,x    ;precharge accu
5893 : 28              >            plp
                        
5894 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
5897 : 08              >            php         ;save flags
5898 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
589b : f003            >        beq skip3143
                       >        trap            ;failed not equal (non zero)
589d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58a0 :                 >skip3143
                       >
58a0 : 68              >            pla         ;load status
                       >            eor_flag 0
58a1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
58a3 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
58a6 : f003            >        beq skip3146
                       >        trap            ;failed not equal (non zero)
58a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58ab :                 >skip3146
                       >
                        
58ab : ca                       dex
58ac : 10da                     bpl tand4
58ae : a203                     ldx #3
58b0 : b522             tand5   lda zpAN,x
58b2 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
58b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
58b7 : 48              >            pha         ;use stack to load status
58b8 : bd4b02          >            lda absANa,x    ;precharge accu
58bb : 28              >            plp
                        
58bc : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
58bf : 08              >            php         ;save flags
58c0 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
58c3 : f003            >        beq skip3151
                       >        trap            ;failed not equal (non zero)
58c5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58c8 :                 >skip3151
                       >
58c8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
58c9 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
58cb : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
58ce : f003            >        beq skip3154
                       >        trap            ;failed not equal (non zero)
58d0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58d3 :                 >skip3154
                       >
                        
58d3 : ca                       dex
58d4 : 1002                     bpl tand6
                        
58d6 : a203                     ldx #3      ;zp,x
58d8 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
58d8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
58da : 48              >            pha         ;use stack to load status
58db : bd4b02          >            lda absANa,x    ;precharge accu
58de : 28              >            plp
                        
58df : 3522                     and zpAN,x
                                tst_ax  absrlo,absflo,0
58e1 : 08              >            php         ;save flags
58e2 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
58e5 : f003            >        beq skip3159
                       >        trap            ;failed not equal (non zero)
58e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58ea :                 >skip3159
                       >
58ea : 68              >            pla         ;load status
                       >            eor_flag 0
58eb : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
58ed : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
58f0 : f003            >        beq skip3162
                       >        trap            ;failed not equal (non zero)
58f2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
58f5 :                 >skip3162
                       >
                        
58f5 : ca                       dex
58f6 : 10e0                     bpl tand6
58f8 : a203                     ldx #3
58fa :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
58fa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
58fc : 48              >            pha         ;use stack to load status
58fd : bd4b02          >            lda absANa,x    ;precharge accu
5900 : 28              >            plp
                        
5901 : 3522                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
5903 : 08              >            php         ;save flags
5904 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5907 : f003            >        beq skip3167
                       >        trap            ;failed not equal (non zero)
5909 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
590c :                 >skip3167
                       >
590c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
590d : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
590f : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5912 : f003            >        beq skip3170
                       >        trap            ;failed not equal (non zero)
5914 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5917 :                 >skip3170
                       >
                        
5917 : ca                       dex
5918 : 10e0                     bpl tand7
                        
591a : a203                     ldx #3      ;abs,x
591c :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
591c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
591e : 48              >            pha         ;use stack to load status
591f : bd4b02          >            lda absANa,x    ;precharge accu
5922 : 28              >            plp
                        
5923 : 3d3f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
5926 : 08              >            php         ;save flags
5927 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
592a : f003            >        beq skip3175
                       >        trap            ;failed not equal (non zero)
592c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
592f :                 >skip3175
                       >
592f : 68              >            pla         ;load status
                       >            eor_flag 0
5930 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5932 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5935 : f003            >        beq skip3178
                       >        trap            ;failed not equal (non zero)
5937 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
593a :                 >skip3178
                       >
                        
593a : ca                       dex
593b : 10df                     bpl tand8
593d : a203                     ldx #3
593f :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
593f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5941 : 48              >            pha         ;use stack to load status
5942 : bd4b02          >            lda absANa,x    ;precharge accu
5945 : 28              >            plp
                        
5946 : 3d3f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
5949 : 08              >            php         ;save flags
594a : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
594d : f003            >        beq skip3183
                       >        trap            ;failed not equal (non zero)
594f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5952 :                 >skip3183
                       >
5952 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5953 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5955 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5958 : f003            >        beq skip3186
                       >        trap            ;failed not equal (non zero)
595a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
595d :                 >skip3186
                       >
                        
595d : ca                       dex
595e : 10df                     bpl tand9
                        
5960 : a003                     ldy #3      ;abs,y
5962 :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
5962 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5964 : 48              >            pha         ;use stack to load status
5965 : b94b02          >            lda absANa,y    ;precharge accu
5968 : 28              >            plp
                        
5969 : 393f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
596c : 08              >            php         ;save flags
596d : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5970 : f003            >        beq skip3191
                       >        trap            ;failed not equal (non zero)
5972 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5975 :                 >skip3191
                       >
5975 : 68              >            pla         ;load status
                       >            eor_flag 0
5976 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5978 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
597b : f003            >        beq skip3194
                       >        trap            ;failed not equal (non zero)
597d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5980 :                 >skip3194
                       >
                        
5980 : 88                       dey
5981 : 10df                     bpl tand10
5983 : a003                     ldy #3
5985 :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
5985 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5987 : 48              >            pha         ;use stack to load status
5988 : b94b02          >            lda absANa,y    ;precharge accu
598b : 28              >            plp
                        
598c : 393f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
598f : 08              >            php         ;save flags
5990 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5993 : f003            >        beq skip3199
                       >        trap            ;failed not equal (non zero)
5995 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5998 :                 >skip3199
                       >
5998 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5999 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
599b : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
599e : f003            >        beq skip3202
                       >        trap            ;failed not equal (non zero)
59a0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
59a3 :                 >skip3202
                       >
                        
59a3 : 88                       dey
59a4 : 10df                     bpl tand11
                        
59a6 : a206                     ldx #6      ;(zp,x)
59a8 : a003                     ldy #3
59aa :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
59aa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59ac : 48              >            pha         ;use stack to load status
59ad : b94b02          >            lda absANa,y    ;precharge accu
59b0 : 28              >            plp
                        
59b1 : 2140                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
59b3 : 08              >            php         ;save flags
59b4 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
59b7 : f003            >        beq skip3207
                       >        trap            ;failed not equal (non zero)
59b9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
59bc :                 >skip3207
                       >
59bc : 68              >            pla         ;load status
                       >            eor_flag 0
59bd : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
59bf : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
59c2 : f003            >        beq skip3210
                       >        trap            ;failed not equal (non zero)
59c4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
59c7 :                 >skip3210
                       >
                        
59c7 : ca                       dex
59c8 : ca                       dex
59c9 : 88                       dey
59ca : 10de                     bpl tand12
59cc : a206                     ldx #6
59ce : a003                     ldy #3
59d0 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
59d0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
59d2 : 48              >            pha         ;use stack to load status
59d3 : b94b02          >            lda absANa,y    ;precharge accu
59d6 : 28              >            plp
                        
59d7 : 2140                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
59d9 : 08              >            php         ;save flags
59da : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
59dd : f003            >        beq skip3215
                       >        trap            ;failed not equal (non zero)
59df : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
59e2 :                 >skip3215
                       >
59e2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
59e3 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
59e5 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
59e8 : f003            >        beq skip3218
                       >        trap            ;failed not equal (non zero)
59ea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
59ed :                 >skip3218
                       >
                        
59ed : ca                       dex
59ee : ca                       dex
59ef : 88                       dey
59f0 : 10de                     bpl tand13
                        
59f2 : a003                     ldy #3      ;(zp),y
59f4 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
59f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
59f6 : 48              >            pha         ;use stack to load status
59f7 : b94b02          >            lda absANa,y    ;precharge accu
59fa : 28              >            plp
                        
59fb : 3140                     and (indAN),y
                                tst_ay  absrlo,absflo,0
59fd : 08              >            php         ;save flags
59fe : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5a01 : f003            >        beq skip3223
                       >        trap            ;failed not equal (non zero)
5a03 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a06 :                 >skip3223
                       >
5a06 : 68              >            pla         ;load status
                       >            eor_flag 0
5a07 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5a09 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5a0c : f003            >        beq skip3226
                       >        trap            ;failed not equal (non zero)
5a0e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a11 :                 >skip3226
                       >
                        
5a11 : 88                       dey
5a12 : 10e0                     bpl tand14
5a14 : a003                     ldy #3
5a16 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
5a16 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5a18 : 48              >            pha         ;use stack to load status
5a19 : b94b02          >            lda absANa,y    ;precharge accu
5a1c : 28              >            plp
                        
5a1d : 3140                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
5a1f : 08              >            php         ;save flags
5a20 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5a23 : f003            >        beq skip3231
                       >        trap            ;failed not equal (non zero)
5a25 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a28 :                 >skip3231
                       >
5a28 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5a29 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5a2b : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5a2e : f003            >        beq skip3234
                       >        trap            ;failed not equal (non zero)
5a30 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a33 :                 >skip3234
                       >
                        
5a33 : 88                       dey
5a34 : 10e0                     bpl tand15
                                next_test
5a36 : ad0002          >            lda test_case   ;previous test
5a39 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5a3b : f003            >        beq skip3237
                       >        trap            ;failed not equal (non zero)
5a3d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a40 :                 >skip3237
                       >
0027 =                 >test_num = test_num + 1
5a40 : a927            >            lda #test_num   ;*** next tests' number
5a42 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
5a45 : d8              >            cld
5a46 : a900            >            lda #0
5a48 : 8512            >            sta zpt         ;set low byte of indirect pointer
5a4a : 8515            >            sta zpt+3       ;checksum high byte
5a4c : 8dbb11          >            sta range_adr   ;reset self modifying code
5a4f : 8dfb57          >            sta tandi1
5a52 : 8d2258          >            sta tandi2
5a55 : 8dbc5a          >            sta teori1
5a58 : 8de35a          >            sta teori2
5a5b : 8d7c5d          >            sta torai1
5a5e : 8da35d          >            sta torai2
5a61 : 8dba63          >            sta chkdadi  
5a64 : 8dd763          >            sta chkdsbi
5a67 : 8d6365          >            sta chkadi
5a6a : 8d8065          >            sta chksbi
5a6d : 18              >            clc
5a6e : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
5a70 : 7510            >ccs33239      adc zero_page,x
5a72 : 9003            >            bcc ccs23239
5a74 : e615            >            inc zpt+3       ;carry to high byte
5a76 : 18              >            clc
5a77 : e8              >ccs23239      inx
5a78 : d0f6            >            bne ccs33239
5a7a : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
5a7c : 8613            >            stx zpt+1
5a7e : a008            >            ldy #lo(data_bss) ;data after write test area
5a80 : 7112            >ccs53239      adc (zpt),y
5a82 : 9003            >            bcc ccs43239
5a84 : e615            >            inc zpt+3       ;carry to high byte
5a86 : 18              >            clc
5a87 : c8              >ccs43239      iny
5a88 : d0f6            >            bne ccs53239
5a8a : e8              >            inx             ;advance RAM high address
5a8b : 8613            >            stx zpt+1
5a8d : e0e0            >            cpx #ram_top
5a8f : d0ef            >            bne ccs53239
5a91 : 8514            >            sta zpt+2       ;checksum low is
5a93 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5a96 : f003            >        beq skip3240
                       >        trap            ;failed not equal (non zero)
5a98 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5a9b :                 >skip3240
                       >
5a9b : a515            >            lda zpt+3       ;checksum high is
5a9d : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
5aa0 : f003            >        beq skip3242
                       >        trap            ;failed not equal (non zero)
5aa2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5aa5 :                 >skip3242
                       >
                       >
                        
                        
5aa5 : 8d04ef            sta $ef04
5aa8 : 454f520a00        db "EOR", 10, 0
5aad : a203                     ldx #3      ;immediate - self modifying code
5aaf : b526             teor    lda zpEO,x
5ab1 : 8dbc5a                   sta teori1
                                set_ax  absEOa,0
                       >            load_flag 0
5ab4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ab6 : 48              >            pha         ;use stack to load status
5ab7 : bd4f02          >            lda absEOa,x    ;precharge accu
5aba : 28              >            plp
                        
5abc =                  teori1  equ *+1     ;target for immediate operand
5abb : 4963                     eor #99
                                tst_ax  absrlo,absflo,0
5abd : 08              >            php         ;save flags
5abe : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5ac1 : f003            >        beq skip3247
                       >        trap            ;failed not equal (non zero)
5ac3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ac6 :                 >skip3247
                       >
5ac6 : 68              >            pla         ;load status
                       >            eor_flag 0
5ac7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ac9 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5acc : f003            >        beq skip3250
                       >        trap            ;failed not equal (non zero)
5ace : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ad1 :                 >skip3250
                       >
                        
5ad1 : ca                       dex
5ad2 : 10db                     bpl teor
5ad4 : a203                     ldx #3
5ad6 : b526             teor1   lda zpEO,x
5ad8 : 8de35a                   sta teori2
                                set_ax  absEOa,$ff
                       >            load_flag $ff
5adb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5add : 48              >            pha         ;use stack to load status
5ade : bd4f02          >            lda absEOa,x    ;precharge accu
5ae1 : 28              >            plp
                        
5ae3 =                  teori2  equ *+1     ;target for immediate operand
5ae2 : 4963                     eor #99
                                tst_ax  absrlo,absflo,$ff-fnz
5ae4 : 08              >            php         ;save flags
5ae5 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5ae8 : f003            >        beq skip3255
                       >        trap            ;failed not equal (non zero)
5aea : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5aed :                 >skip3255
                       >
5aed : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5aee : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5af0 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5af3 : f003            >        beq skip3258
                       >        trap            ;failed not equal (non zero)
5af5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5af8 :                 >skip3258
                       >
                        
5af8 : ca                       dex
5af9 : 10db                     bpl teor1
                        
5afb : a203                     ldx #3      ;zp
5afd : b526             teor2    lda zpEO,x
5aff : 8512                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
5b01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b03 : 48              >            pha         ;use stack to load status
5b04 : bd4f02          >            lda absEOa,x    ;precharge accu
5b07 : 28              >            plp
                        
5b08 : 4512                     eor zpt
                                tst_ax  absrlo,absflo,0
5b0a : 08              >            php         ;save flags
5b0b : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5b0e : f003            >        beq skip3263
                       >        trap            ;failed not equal (non zero)
5b10 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b13 :                 >skip3263
                       >
5b13 : 68              >            pla         ;load status
                       >            eor_flag 0
5b14 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5b16 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5b19 : f003            >        beq skip3266
                       >        trap            ;failed not equal (non zero)
5b1b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b1e :                 >skip3266
                       >
                        
5b1e : ca                       dex
5b1f : 10dc                     bpl teor2
5b21 : a203                     ldx #3
5b23 : b526             teor3   lda zpEO,x
5b25 : 8512                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
5b27 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b29 : 48              >            pha         ;use stack to load status
5b2a : bd4f02          >            lda absEOa,x    ;precharge accu
5b2d : 28              >            plp
                        
5b2e : 4512                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
5b30 : 08              >            php         ;save flags
5b31 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5b34 : f003            >        beq skip3271
                       >        trap            ;failed not equal (non zero)
5b36 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b39 :                 >skip3271
                       >
5b39 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5b3a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5b3c : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5b3f : f003            >        beq skip3274
                       >        trap            ;failed not equal (non zero)
5b41 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b44 :                 >skip3274
                       >
                        
5b44 : ca                       dex
5b45 : 10dc                     bpl teor3
                        
5b47 : a203                     ldx #3      ;abs
5b49 : b526             teor4   lda zpEO,x
5b4b : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
5b4e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b50 : 48              >            pha         ;use stack to load status
5b51 : bd4f02          >            lda absEOa,x    ;precharge accu
5b54 : 28              >            plp
                        
5b55 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
5b58 : 08              >            php         ;save flags
5b59 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5b5c : f003            >        beq skip3279
                       >        trap            ;failed not equal (non zero)
5b5e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b61 :                 >skip3279
                       >
5b61 : 68              >            pla         ;load status
                       >            eor_flag 0
5b62 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5b64 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5b67 : f003            >        beq skip3282
                       >        trap            ;failed not equal (non zero)
5b69 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b6c :                 >skip3282
                       >
                        
5b6c : ca                       dex
5b6d : 10da                     bpl teor4
5b6f : a203                     ldx #3
5b71 : b526             teor5   lda zpEO,x
5b73 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
5b76 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5b78 : 48              >            pha         ;use stack to load status
5b79 : bd4f02          >            lda absEOa,x    ;precharge accu
5b7c : 28              >            plp
                        
5b7d : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
5b80 : 08              >            php         ;save flags
5b81 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5b84 : f003            >        beq skip3287
                       >        trap            ;failed not equal (non zero)
5b86 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b89 :                 >skip3287
                       >
5b89 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5b8a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5b8c : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5b8f : f003            >        beq skip3290
                       >        trap            ;failed not equal (non zero)
5b91 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5b94 :                 >skip3290
                       >
                        
5b94 : ca                       dex
5b95 : 1002                     bpl teor6
                        
5b97 : a203                     ldx #3      ;zp,x
5b99 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
5b99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5b9b : 48              >            pha         ;use stack to load status
5b9c : bd4f02          >            lda absEOa,x    ;precharge accu
5b9f : 28              >            plp
                        
5ba0 : 5526                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
5ba2 : 08              >            php         ;save flags
5ba3 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5ba6 : f003            >        beq skip3295
                       >        trap            ;failed not equal (non zero)
5ba8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bab :                 >skip3295
                       >
5bab : 68              >            pla         ;load status
                       >            eor_flag 0
5bac : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5bae : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5bb1 : f003            >        beq skip3298
                       >        trap            ;failed not equal (non zero)
5bb3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bb6 :                 >skip3298
                       >
                        
5bb6 : ca                       dex
5bb7 : 10e0                     bpl teor6
5bb9 : a203                     ldx #3
5bbb :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
5bbb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5bbd : 48              >            pha         ;use stack to load status
5bbe : bd4f02          >            lda absEOa,x    ;precharge accu
5bc1 : 28              >            plp
                        
5bc2 : 5526                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
5bc4 : 08              >            php         ;save flags
5bc5 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5bc8 : f003            >        beq skip3303
                       >        trap            ;failed not equal (non zero)
5bca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bcd :                 >skip3303
                       >
5bcd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5bce : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5bd0 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5bd3 : f003            >        beq skip3306
                       >        trap            ;failed not equal (non zero)
5bd5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bd8 :                 >skip3306
                       >
                        
5bd8 : ca                       dex
5bd9 : 10e0                     bpl teor7
                        
5bdb : a203                     ldx #3      ;abs,x
5bdd :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
5bdd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5bdf : 48              >            pha         ;use stack to load status
5be0 : bd4f02          >            lda absEOa,x    ;precharge accu
5be3 : 28              >            plp
                        
5be4 : 5d4302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
5be7 : 08              >            php         ;save flags
5be8 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5beb : f003            >        beq skip3311
                       >        trap            ;failed not equal (non zero)
5bed : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bf0 :                 >skip3311
                       >
5bf0 : 68              >            pla         ;load status
                       >            eor_flag 0
5bf1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5bf3 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5bf6 : f003            >        beq skip3314
                       >        trap            ;failed not equal (non zero)
5bf8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5bfb :                 >skip3314
                       >
                        
5bfb : ca                       dex
5bfc : 10df                     bpl teor8
5bfe : a203                     ldx #3
5c00 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
5c00 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c02 : 48              >            pha         ;use stack to load status
5c03 : bd4f02          >            lda absEOa,x    ;precharge accu
5c06 : 28              >            plp
                        
5c07 : 5d4302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
5c0a : 08              >            php         ;save flags
5c0b : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5c0e : f003            >        beq skip3319
                       >        trap            ;failed not equal (non zero)
5c10 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c13 :                 >skip3319
                       >
5c13 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5c14 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5c16 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5c19 : f003            >        beq skip3322
                       >        trap            ;failed not equal (non zero)
5c1b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c1e :                 >skip3322
                       >
                        
5c1e : ca                       dex
5c1f : 10df                     bpl teor9
                        
5c21 : a003                     ldy #3      ;abs,y
5c23 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
5c23 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c25 : 48              >            pha         ;use stack to load status
5c26 : b94f02          >            lda absEOa,y    ;precharge accu
5c29 : 28              >            plp
                        
5c2a : 594302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
5c2d : 08              >            php         ;save flags
5c2e : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5c31 : f003            >        beq skip3327
                       >        trap            ;failed not equal (non zero)
5c33 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c36 :                 >skip3327
                       >
5c36 : 68              >            pla         ;load status
                       >            eor_flag 0
5c37 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5c39 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5c3c : f003            >        beq skip3330
                       >        trap            ;failed not equal (non zero)
5c3e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c41 :                 >skip3330
                       >
                        
5c41 : 88                       dey
5c42 : 10df                     bpl teor10
5c44 : a003                     ldy #3
5c46 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
5c46 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c48 : 48              >            pha         ;use stack to load status
5c49 : b94f02          >            lda absEOa,y    ;precharge accu
5c4c : 28              >            plp
                        
5c4d : 594302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
5c50 : 08              >            php         ;save flags
5c51 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5c54 : f003            >        beq skip3335
                       >        trap            ;failed not equal (non zero)
5c56 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c59 :                 >skip3335
                       >
5c59 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5c5a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5c5c : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5c5f : f003            >        beq skip3338
                       >        trap            ;failed not equal (non zero)
5c61 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c64 :                 >skip3338
                       >
                        
5c64 : 88                       dey
5c65 : 10df                     bpl teor11
                        
5c67 : a206                     ldx #6      ;(zp,x)
5c69 : a003                     ldy #3
5c6b :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
5c6b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5c6d : 48              >            pha         ;use stack to load status
5c6e : b94f02          >            lda absEOa,y    ;precharge accu
5c71 : 28              >            plp
                        
5c72 : 4148                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
5c74 : 08              >            php         ;save flags
5c75 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5c78 : f003            >        beq skip3343
                       >        trap            ;failed not equal (non zero)
5c7a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c7d :                 >skip3343
                       >
5c7d : 68              >            pla         ;load status
                       >            eor_flag 0
5c7e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5c80 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5c83 : f003            >        beq skip3346
                       >        trap            ;failed not equal (non zero)
5c85 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5c88 :                 >skip3346
                       >
                        
5c88 : ca                       dex
5c89 : ca                       dex
5c8a : 88                       dey
5c8b : 10de                     bpl teor12
5c8d : a206                     ldx #6
5c8f : a003                     ldy #3
5c91 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
5c91 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5c93 : 48              >            pha         ;use stack to load status
5c94 : b94f02          >            lda absEOa,y    ;precharge accu
5c97 : 28              >            plp
                        
5c98 : 4148                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
5c9a : 08              >            php         ;save flags
5c9b : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5c9e : f003            >        beq skip3351
                       >        trap            ;failed not equal (non zero)
5ca0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ca3 :                 >skip3351
                       >
5ca3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5ca4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5ca6 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5ca9 : f003            >        beq skip3354
                       >        trap            ;failed not equal (non zero)
5cab : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5cae :                 >skip3354
                       >
                        
5cae : ca                       dex
5caf : ca                       dex
5cb0 : 88                       dey
5cb1 : 10de                     bpl teor13
                        
5cb3 : a003                     ldy #3      ;(zp),y
5cb5 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
5cb5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5cb7 : 48              >            pha         ;use stack to load status
5cb8 : b94f02          >            lda absEOa,y    ;precharge accu
5cbb : 28              >            plp
                        
5cbc : 5148                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
5cbe : 08              >            php         ;save flags
5cbf : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5cc2 : f003            >        beq skip3359
                       >        trap            ;failed not equal (non zero)
5cc4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5cc7 :                 >skip3359
                       >
5cc7 : 68              >            pla         ;load status
                       >            eor_flag 0
5cc8 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5cca : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5ccd : f003            >        beq skip3362
                       >        trap            ;failed not equal (non zero)
5ccf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5cd2 :                 >skip3362
                       >
                        
5cd2 : 88                       dey
5cd3 : 10e0                     bpl teor14
5cd5 : a003                     ldy #3
5cd7 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
5cd7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5cd9 : 48              >            pha         ;use stack to load status
5cda : b94f02          >            lda absEOa,y    ;precharge accu
5cdd : 28              >            plp
                        
5cde : 5148                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
5ce0 : 08              >            php         ;save flags
5ce1 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5ce4 : f003            >        beq skip3367
                       >        trap            ;failed not equal (non zero)
5ce6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ce9 :                 >skip3367
                       >
5ce9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5cea : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5cec : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5cef : f003            >        beq skip3370
                       >        trap            ;failed not equal (non zero)
5cf1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5cf4 :                 >skip3370
                       >
                        
5cf4 : 88                       dey
5cf5 : 10e0                     bpl teor15
                                next_test
5cf7 : ad0002          >            lda test_case   ;previous test
5cfa : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5cfc : f003            >        beq skip3373
                       >        trap            ;failed not equal (non zero)
5cfe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5d01 :                 >skip3373
                       >
0028 =                 >test_num = test_num + 1
5d01 : a928            >            lda #test_num   ;*** next tests' number
5d03 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
5d06 : d8              >            cld
5d07 : a900            >            lda #0
5d09 : 8512            >            sta zpt         ;set low byte of indirect pointer
5d0b : 8515            >            sta zpt+3       ;checksum high byte
5d0d : 8dbb11          >            sta range_adr   ;reset self modifying code
5d10 : 8dfb57          >            sta tandi1
5d13 : 8d2258          >            sta tandi2
5d16 : 8dbc5a          >            sta teori1
5d19 : 8de35a          >            sta teori2
5d1c : 8d7c5d          >            sta torai1
5d1f : 8da35d          >            sta torai2
5d22 : 8dba63          >            sta chkdadi  
5d25 : 8dd763          >            sta chkdsbi
5d28 : 8d6365          >            sta chkadi
5d2b : 8d8065          >            sta chksbi
5d2e : 18              >            clc
5d2f : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
5d31 : 7510            >ccs33375      adc zero_page,x
5d33 : 9003            >            bcc ccs23375
5d35 : e615            >            inc zpt+3       ;carry to high byte
5d37 : 18              >            clc
5d38 : e8              >ccs23375      inx
5d39 : d0f6            >            bne ccs33375
5d3b : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
5d3d : 8613            >            stx zpt+1
5d3f : a008            >            ldy #lo(data_bss) ;data after write test area
5d41 : 7112            >ccs53375      adc (zpt),y
5d43 : 9003            >            bcc ccs43375
5d45 : e615            >            inc zpt+3       ;carry to high byte
5d47 : 18              >            clc
5d48 : c8              >ccs43375      iny
5d49 : d0f6            >            bne ccs53375
5d4b : e8              >            inx             ;advance RAM high address
5d4c : 8613            >            stx zpt+1
5d4e : e0e0            >            cpx #ram_top
5d50 : d0ef            >            bne ccs53375
5d52 : 8514            >            sta zpt+2       ;checksum low is
5d54 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
5d57 : f003            >        beq skip3376
                       >        trap            ;failed not equal (non zero)
5d59 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5d5c :                 >skip3376
                       >
5d5c : a515            >            lda zpt+3       ;checksum high is
5d5e : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
5d61 : f003            >        beq skip3378
                       >        trap            ;failed not equal (non zero)
5d63 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5d66 :                 >skip3378
                       >
                       >
                        
                        
5d66 : 8d04ef            sta $ef04
5d69 : 4f520a00          db "OR", 10, 0
5d6d : a203                     ldx #3      ;immediate - self modifying code
5d6f : b51e             tora    lda zpOR,x
5d71 : 8d7c5d                   sta torai1
                                set_ax  absORa,0
                       >            load_flag 0
5d74 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5d76 : 48              >            pha         ;use stack to load status
5d77 : bd4702          >            lda absORa,x    ;precharge accu
5d7a : 28              >            plp
                        
5d7c =                  torai1  equ *+1     ;target for immediate operand
5d7b : 0963                     ora #99
                                tst_ax  absrlo,absflo,0
5d7d : 08              >            php         ;save flags
5d7e : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5d81 : f003            >        beq skip3383
                       >        trap            ;failed not equal (non zero)
5d83 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5d86 :                 >skip3383
                       >
5d86 : 68              >            pla         ;load status
                       >            eor_flag 0
5d87 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5d89 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5d8c : f003            >        beq skip3386
                       >        trap            ;failed not equal (non zero)
5d8e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5d91 :                 >skip3386
                       >
                        
5d91 : ca                       dex
5d92 : 10db                     bpl tora
5d94 : a203                     ldx #3
5d96 : b51e             tora1   lda zpOR,x
5d98 : 8da35d                   sta torai2
                                set_ax  absORa,$ff
                       >            load_flag $ff
5d9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5d9d : 48              >            pha         ;use stack to load status
5d9e : bd4702          >            lda absORa,x    ;precharge accu
5da1 : 28              >            plp
                        
5da3 =                  torai2  equ *+1     ;target for immediate operand
5da2 : 0963                     ora #99
                                tst_ax  absrlo,absflo,$ff-fnz
5da4 : 08              >            php         ;save flags
5da5 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5da8 : f003            >        beq skip3391
                       >        trap            ;failed not equal (non zero)
5daa : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5dad :                 >skip3391
                       >
5dad : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5dae : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5db0 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5db3 : f003            >        beq skip3394
                       >        trap            ;failed not equal (non zero)
5db5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5db8 :                 >skip3394
                       >
                        
5db8 : ca                       dex
5db9 : 10db                     bpl tora1
                        
5dbb : a203                     ldx #3      ;zp
5dbd : b51e             tora2   lda zpOR,x
5dbf : 8512                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
5dc1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5dc3 : 48              >            pha         ;use stack to load status
5dc4 : bd4702          >            lda absORa,x    ;precharge accu
5dc7 : 28              >            plp
                        
5dc8 : 0512                     ora zpt
                                tst_ax  absrlo,absflo,0
5dca : 08              >            php         ;save flags
5dcb : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5dce : f003            >        beq skip3399
                       >        trap            ;failed not equal (non zero)
5dd0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5dd3 :                 >skip3399
                       >
5dd3 : 68              >            pla         ;load status
                       >            eor_flag 0
5dd4 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5dd6 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5dd9 : f003            >        beq skip3402
                       >        trap            ;failed not equal (non zero)
5ddb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5dde :                 >skip3402
                       >
                        
5dde : ca                       dex
5ddf : 10dc                     bpl tora2
5de1 : a203                     ldx #3
5de3 : b51e             tora3   lda zpOR,x
5de5 : 8512                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
5de7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5de9 : 48              >            pha         ;use stack to load status
5dea : bd4702          >            lda absORa,x    ;precharge accu
5ded : 28              >            plp
                        
5dee : 0512                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
5df0 : 08              >            php         ;save flags
5df1 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5df4 : f003            >        beq skip3407
                       >        trap            ;failed not equal (non zero)
5df6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5df9 :                 >skip3407
                       >
5df9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5dfa : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5dfc : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5dff : f003            >        beq skip3410
                       >        trap            ;failed not equal (non zero)
5e01 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e04 :                 >skip3410
                       >
                        
5e04 : ca                       dex
5e05 : 10dc                     bpl tora3
                        
5e07 : a203                     ldx #3      ;abs
5e09 : b51e             tora4   lda zpOR,x
5e0b : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
5e0e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e10 : 48              >            pha         ;use stack to load status
5e11 : bd4702          >            lda absORa,x    ;precharge accu
5e14 : 28              >            plp
                        
5e15 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
5e18 : 08              >            php         ;save flags
5e19 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5e1c : f003            >        beq skip3415
                       >        trap            ;failed not equal (non zero)
5e1e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e21 :                 >skip3415
                       >
5e21 : 68              >            pla         ;load status
                       >            eor_flag 0
5e22 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5e24 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5e27 : f003            >        beq skip3418
                       >        trap            ;failed not equal (non zero)
5e29 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e2c :                 >skip3418
                       >
                        
5e2c : ca                       dex
5e2d : 10da                     bpl tora4
5e2f : a203                     ldx #3
5e31 : b51e             tora5   lda zpOR,x
5e33 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
5e36 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e38 : 48              >            pha         ;use stack to load status
5e39 : bd4702          >            lda absORa,x    ;precharge accu
5e3c : 28              >            plp
                        
5e3d : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
5e40 : 08              >            php         ;save flags
5e41 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5e44 : f003            >        beq skip3423
                       >        trap            ;failed not equal (non zero)
5e46 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e49 :                 >skip3423
                       >
5e49 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5e4a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5e4c : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5e4f : f003            >        beq skip3426
                       >        trap            ;failed not equal (non zero)
5e51 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e54 :                 >skip3426
                       >
                        
5e54 : ca                       dex
5e55 : 1002                     bpl tora6
                        
5e57 : a203                     ldx #3      ;zp,x
5e59 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
5e59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e5b : 48              >            pha         ;use stack to load status
5e5c : bd4702          >            lda absORa,x    ;precharge accu
5e5f : 28              >            plp
                        
5e60 : 151e                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
5e62 : 08              >            php         ;save flags
5e63 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5e66 : f003            >        beq skip3431
                       >        trap            ;failed not equal (non zero)
5e68 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e6b :                 >skip3431
                       >
5e6b : 68              >            pla         ;load status
                       >            eor_flag 0
5e6c : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5e6e : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5e71 : f003            >        beq skip3434
                       >        trap            ;failed not equal (non zero)
5e73 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e76 :                 >skip3434
                       >
                        
5e76 : ca                       dex
5e77 : 10e0                     bpl tora6
5e79 : a203                     ldx #3
5e7b :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
5e7b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5e7d : 48              >            pha         ;use stack to load status
5e7e : bd4702          >            lda absORa,x    ;precharge accu
5e81 : 28              >            plp
                        
5e82 : 151e                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
5e84 : 08              >            php         ;save flags
5e85 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5e88 : f003            >        beq skip3439
                       >        trap            ;failed not equal (non zero)
5e8a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e8d :                 >skip3439
                       >
5e8d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5e8e : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5e90 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5e93 : f003            >        beq skip3442
                       >        trap            ;failed not equal (non zero)
5e95 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5e98 :                 >skip3442
                       >
                        
5e98 : ca                       dex
5e99 : 10e0                     bpl tora7
                        
5e9b : a203                     ldx #3      ;abs,x
5e9d :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
5e9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5e9f : 48              >            pha         ;use stack to load status
5ea0 : bd4702          >            lda absORa,x    ;precharge accu
5ea3 : 28              >            plp
                        
5ea4 : 1d3b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
5ea7 : 08              >            php         ;save flags
5ea8 : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5eab : f003            >        beq skip3447
                       >        trap            ;failed not equal (non zero)
5ead : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5eb0 :                 >skip3447
                       >
5eb0 : 68              >            pla         ;load status
                       >            eor_flag 0
5eb1 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5eb3 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5eb6 : f003            >        beq skip3450
                       >        trap            ;failed not equal (non zero)
5eb8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ebb :                 >skip3450
                       >
                        
5ebb : ca                       dex
5ebc : 10df                     bpl tora8
5ebe : a203                     ldx #3
5ec0 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
5ec0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5ec2 : 48              >            pha         ;use stack to load status
5ec3 : bd4702          >            lda absORa,x    ;precharge accu
5ec6 : 28              >            plp
                        
5ec7 : 1d3b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
5eca : 08              >            php         ;save flags
5ecb : dd5302          >            cmp absrlo,x    ;test result
                       >            trap_ne
5ece : f003            >        beq skip3455
                       >        trap            ;failed not equal (non zero)
5ed0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ed3 :                 >skip3455
                       >
5ed3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5ed4 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5ed6 : dd5702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
5ed9 : f003            >        beq skip3458
                       >        trap            ;failed not equal (non zero)
5edb : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ede :                 >skip3458
                       >
                        
5ede : ca                       dex
5edf : 10df                     bpl tora9
                        
5ee1 : a003                     ldy #3      ;abs,y
5ee3 :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
5ee3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5ee5 : 48              >            pha         ;use stack to load status
5ee6 : b94702          >            lda absORa,y    ;precharge accu
5ee9 : 28              >            plp
                        
5eea : 193b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
5eed : 08              >            php         ;save flags
5eee : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5ef1 : f003            >        beq skip3463
                       >        trap            ;failed not equal (non zero)
5ef3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5ef6 :                 >skip3463
                       >
5ef6 : 68              >            pla         ;load status
                       >            eor_flag 0
5ef7 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5ef9 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5efc : f003            >        beq skip3466
                       >        trap            ;failed not equal (non zero)
5efe : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f01 :                 >skip3466
                       >
                        
5f01 : 88                       dey
5f02 : 10df                     bpl tora10
5f04 : a003                     ldy #3
5f06 :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
5f06 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f08 : 48              >            pha         ;use stack to load status
5f09 : b94702          >            lda absORa,y    ;precharge accu
5f0c : 28              >            plp
                        
5f0d : 193b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
5f10 : 08              >            php         ;save flags
5f11 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5f14 : f003            >        beq skip3471
                       >        trap            ;failed not equal (non zero)
5f16 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f19 :                 >skip3471
                       >
5f19 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5f1a : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5f1c : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5f1f : f003            >        beq skip3474
                       >        trap            ;failed not equal (non zero)
5f21 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f24 :                 >skip3474
                       >
                        
5f24 : 88                       dey
5f25 : 10df                     bpl tora11
                        
5f27 : a206                     ldx #6      ;(zp,x)
5f29 : a003                     ldy #3
5f2b :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
5f2b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f2d : 48              >            pha         ;use stack to load status
5f2e : b94702          >            lda absORa,y    ;precharge accu
5f31 : 28              >            plp
                        
5f32 : 0150                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
5f34 : 08              >            php         ;save flags
5f35 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5f38 : f003            >        beq skip3479
                       >        trap            ;failed not equal (non zero)
5f3a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f3d :                 >skip3479
                       >
5f3d : 68              >            pla         ;load status
                       >            eor_flag 0
5f3e : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f40 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5f43 : f003            >        beq skip3482
                       >        trap            ;failed not equal (non zero)
5f45 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f48 :                 >skip3482
                       >
                        
5f48 : ca                       dex
5f49 : ca                       dex
5f4a : 88                       dey
5f4b : 10de                     bpl tora12
5f4d : a206                     ldx #6
5f4f : a003                     ldy #3
5f51 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
5f51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f53 : 48              >            pha         ;use stack to load status
5f54 : b94702          >            lda absORa,y    ;precharge accu
5f57 : 28              >            plp
                        
5f58 : 0150                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
5f5a : 08              >            php         ;save flags
5f5b : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5f5e : f003            >        beq skip3487
                       >        trap            ;failed not equal (non zero)
5f60 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f63 :                 >skip3487
                       >
5f63 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5f64 : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5f66 : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5f69 : f003            >        beq skip3490
                       >        trap            ;failed not equal (non zero)
5f6b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f6e :                 >skip3490
                       >
                        
5f6e : ca                       dex
5f6f : ca                       dex
5f70 : 88                       dey
5f71 : 10de                     bpl tora13
                        
5f73 : a003                     ldy #3      ;(zp),y
5f75 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
5f75 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
5f77 : 48              >            pha         ;use stack to load status
5f78 : b94702          >            lda absORa,y    ;precharge accu
5f7b : 28              >            plp
                        
5f7c : 1150                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
5f7e : 08              >            php         ;save flags
5f7f : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5f82 : f003            >        beq skip3495
                       >        trap            ;failed not equal (non zero)
5f84 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f87 :                 >skip3495
                       >
5f87 : 68              >            pla         ;load status
                       >            eor_flag 0
5f88 : 4930            >            eor #0|fao         ;invert expected flags + always on bits
                       >
5f8a : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5f8d : f003            >        beq skip3498
                       >        trap            ;failed not equal (non zero)
5f8f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5f92 :                 >skip3498
                       >
                        
5f92 : 88                       dey
5f93 : 10e0                     bpl tora14
5f95 : a003                     ldy #3
5f97 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
5f97 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
5f99 : 48              >            pha         ;use stack to load status
5f9a : b94702          >            lda absORa,y    ;precharge accu
5f9d : 28              >            plp
                        
5f9e : 1150                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
5fa0 : 08              >            php         ;save flags
5fa1 : d95302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
5fa4 : f003            >        beq skip3503
                       >        trap            ;failed not equal (non zero)
5fa6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5fa9 :                 >skip3503
                       >
5fa9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
5faa : 497d            >            eor #$ff-fnz|fao         ;invert expected flags + always on bits
                       >
5fac : d95702          >            cmp absflo,y    ;test flags
                       >            trap_ne
5faf : f003            >        beq skip3506
                       >        trap            ;failed not equal (non zero)
5fb1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5fb4 :                 >skip3506
                       >
                        
5fb4 : 88                       dey
5fb5 : 10e0                     bpl tora15
                            if I_flag = 3
5fb7 : 58                       cli
                            endif                
                                next_test
5fb8 : ad0002          >            lda test_case   ;previous test
5fbb : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
5fbd : f003            >        beq skip3509
                       >        trap            ;failed not equal (non zero)
5fbf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
5fc2 :                 >skip3509
                       >
0029 =                 >test_num = test_num + 1
5fc2 : a929            >            lda #test_num   ;*** next tests' number
5fc4 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
5fc7 : d8              >            cld
5fc8 : a900            >            lda #0
5fca : 8512            >            sta zpt         ;set low byte of indirect pointer
5fcc : 8515            >            sta zpt+3       ;checksum high byte
5fce : 8dbb11          >            sta range_adr   ;reset self modifying code
5fd1 : 8dfb57          >            sta tandi1
5fd4 : 8d2258          >            sta tandi2
5fd7 : 8dbc5a          >            sta teori1
5fda : 8de35a          >            sta teori2
5fdd : 8d7c5d          >            sta torai1
5fe0 : 8da35d          >            sta torai2
5fe3 : 8dba63          >            sta chkdadi  
5fe6 : 8dd763          >            sta chkdsbi
5fe9 : 8d6365          >            sta chkadi
5fec : 8d8065          >            sta chksbi
5fef : 18              >            clc
5ff0 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
5ff2 : 7510            >ccs33511      adc zero_page,x
5ff4 : 9003            >            bcc ccs23511
5ff6 : e615            >            inc zpt+3       ;carry to high byte
5ff8 : 18              >            clc
5ff9 : e8              >ccs23511      inx
5ffa : d0f6            >            bne ccs33511
5ffc : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
5ffe : 8613            >            stx zpt+1
6000 : a008            >            ldy #lo(data_bss) ;data after write test area
6002 : 7112            >ccs53511      adc (zpt),y
6004 : 9003            >            bcc ccs43511
6006 : e615            >            inc zpt+3       ;carry to high byte
6008 : 18              >            clc
6009 : c8              >ccs43511      iny
600a : d0f6            >            bne ccs53511
600c : e8              >            inx             ;advance RAM high address
600d : 8613            >            stx zpt+1
600f : e0e0            >            cpx #ram_top
6011 : d0ef            >            bne ccs53511
6013 : 8514            >            sta zpt+2       ;checksum low is
6015 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
6018 : f003            >        beq skip3512
                       >        trap            ;failed not equal (non zero)
601a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
601d :                 >skip3512
                       >
601d : a515            >            lda zpt+3       ;checksum high is
601f : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
6022 : f003            >        beq skip3514
                       >        trap            ;failed not equal (non zero)
6024 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6027 :                 >skip3514
                       >
                       >
                        
                        
6027 : 8d04ef            sta $ef04
602a : 66756c6c206269..  db "full binary add/subtract test", 10, 0
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
6049 : d8                       cld
604a : a214                     ldx #ad2        ;for indexed test
604c : a0ff                     ldy #$ff        ;max range
604e : a900                     lda #0          ;start with adding zeroes & no carry
6050 : 8512                     sta adfc        ;carry in - for diag
6052 : 8513                     sta ad1         ;operand 1 - accumulator
6054 : 8514                     sta ad2         ;operand 2 - memory or immediate
6056 : 8d0302                   sta ada2        ;non zp
6059 : 8515                     sta adrl        ;expected result bits 0-7
605b : 8516                     sta adrh        ;expected result bit 8 (carry out)
605d : a9ff                     lda #$ff        ;complemented operand 2 for subtract
605f : 8518                     sta sb2
6061 : 8d0402                   sta sba2        ;non zp
6064 : a902                     lda #2          ;expected Z-flag
6066 : 8517                     sta adrf
6068 : 18               tadd    clc             ;test with carry clear
6069 : 20e064                   jsr chkadd
606c : e612                     inc adfc        ;now with carry
606e : e615                     inc adrl        ;result +1
6070 : 08                       php             ;save N & Z from low result
6071 : 08                       php
6072 : 68                       pla             ;accu holds expected flags
6073 : 2982                     and #$82        ;mask N & Z
6075 : 28                       plp
6076 : d002                     bne tadd1
6078 : e616                     inc adrh        ;result bit 8 - carry
607a : 0516             tadd1   ora adrh        ;merge C to expected flags
607c : 8517                     sta adrf        ;save expected flags except overflow
607e : 38                       sec             ;test with carry set
607f : 20e064                   jsr chkadd
6082 : c612                     dec adfc        ;same for operand +1 but no carry
6084 : e613                     inc ad1
6086 : d0e0                     bne tadd        ;iterate op1
6088 : a900                     lda #0          ;preset result to op2 when op1 = 0
608a : 8516                     sta adrh
608c : ee0302                   inc ada2
608f : e614                     inc ad2
6091 : 08                       php             ;save NZ as operand 2 becomes the new result
6092 : 68                       pla
6093 : 2982                     and #$82        ;mask N00000Z0
6095 : 8517                     sta adrf        ;no need to check carry as we are adding to 0
6097 : c618                     dec sb2         ;complement subtract operand 2
6099 : ce0402                   dec sba2
609c : a514                     lda ad2         
609e : 8515                     sta adrl
60a0 : d0c6                     bne tadd        ;iterate op2
                                next_test
60a2 : ad0002          >            lda test_case   ;previous test
60a5 : c929            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
60a7 : f003            >        beq skip3517
                       >        trap            ;failed not equal (non zero)
60a9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
60ac :                 >skip3517
                       >
002a =                 >test_num = test_num + 1
60ac : a92a            >            lda #test_num   ;*** next tests' number
60ae : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
60b1 : d8              >            cld
60b2 : a900            >            lda #0
60b4 : 8512            >            sta zpt         ;set low byte of indirect pointer
60b6 : 8515            >            sta zpt+3       ;checksum high byte
60b8 : 8dbb11          >            sta range_adr   ;reset self modifying code
60bb : 8dfb57          >            sta tandi1
60be : 8d2258          >            sta tandi2
60c1 : 8dbc5a          >            sta teori1
60c4 : 8de35a          >            sta teori2
60c7 : 8d7c5d          >            sta torai1
60ca : 8da35d          >            sta torai2
60cd : 8dba63          >            sta chkdadi  
60d0 : 8dd763          >            sta chkdsbi
60d3 : 8d6365          >            sta chkadi
60d6 : 8d8065          >            sta chksbi
60d9 : 18              >            clc
60da : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
60dc : 7510            >ccs33519      adc zero_page,x
60de : 9003            >            bcc ccs23519
60e0 : e615            >            inc zpt+3       ;carry to high byte
60e2 : 18              >            clc
60e3 : e8              >ccs23519      inx
60e4 : d0f6            >            bne ccs33519
60e6 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
60e8 : 8613            >            stx zpt+1
60ea : a008            >            ldy #lo(data_bss) ;data after write test area
60ec : 7112            >ccs53519      adc (zpt),y
60ee : 9003            >            bcc ccs43519
60f0 : e615            >            inc zpt+3       ;carry to high byte
60f2 : 18              >            clc
60f3 : c8              >ccs43519      iny
60f4 : d0f6            >            bne ccs53519
60f6 : e8              >            inx             ;advance RAM high address
60f7 : 8613            >            stx zpt+1
60f9 : e0e0            >            cpx #ram_top
60fb : d0ef            >            bne ccs53519
60fd : 8514            >            sta zpt+2       ;checksum low is
60ff : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
6102 : f003            >        beq skip3520
                       >        trap            ;failed not equal (non zero)
6104 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6107 :                 >skip3520
                       >
6107 : a515            >            lda zpt+3       ;checksum high is
6109 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
610c : f003            >        beq skip3522
                       >        trap            ;failed not equal (non zero)
610e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6111 :                 >skip3522
                       >
                       >
                        
                        
6111 : 8d04ef            sta $ef04
6114 : 646563696d616c..  db "decimal add/subtract test", 10, 0
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
612f : f8                       sed 
6130 : a214                     ldx #ad2        ;for indexed test
6132 : a0ff                     ldy #$ff        ;max range
6134 : a999                     lda #$99        ;start with adding 99 to 99 with carry
6136 : 8513                     sta ad1         ;operand 1 - accumulator
6138 : 8514                     sta ad2         ;operand 2 - memory or immediate
613a : 8d0302                   sta ada2        ;non zp
613d : 8515                     sta adrl        ;expected result bits 0-7
613f : a901                     lda #1          ;set carry in & out
6141 : 8512                     sta adfc        ;carry in - for diag
6143 : 8516                     sta adrh        ;expected result bit 8 (carry out)
6145 : a900                     lda #0          ;complemented operand 2 for subtract
6147 : 8518                     sta sb2
6149 : 8d0402                   sta sba2        ;non zp
614c : 38               tdad    sec             ;test with carry set
614d : 204f63                   jsr chkdad
6150 : c612                     dec adfc        ;now with carry clear
6152 : a515                     lda adrl        ;decimal adjust result
6154 : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
6156 : c616                     dec adrh
6158 : a999                     lda #$99
615a : 8515                     sta adrl
615c : d012                     bne tdad3
615e : 290f             tdad1   and #$f         ;lower nibble mask
6160 : d00c                     bne tdad2       ;no decimal adjust needed
6162 : c615                     dec adrl        ;decimal adjust (?0-6)
6164 : c615                     dec adrl
6166 : c615                     dec adrl
6168 : c615                     dec adrl
616a : c615                     dec adrl
616c : c615                     dec adrl
616e : c615             tdad2   dec adrl        ;result -1
6170 : 18               tdad3   clc             ;test with carry clear
6171 : 204f63                   jsr chkdad
6174 : e612                     inc adfc        ;same for operand -1 but with carry
6176 : a513                     lda ad1         ;decimal adjust operand 1
6178 : f015                     beq tdad5       ;iterate operand 2
617a : 290f                     and #$f         ;lower nibble mask
617c : d00c                     bne tdad4       ;skip decimal adjust
617e : c613                     dec ad1         ;decimal adjust (?0-6)
6180 : c613                     dec ad1
6182 : c613                     dec ad1
6184 : c613                     dec ad1
6186 : c613                     dec ad1
6188 : c613                     dec ad1
618a : c613             tdad4   dec ad1         ;operand 1 -1
618c : 4c4c61                   jmp tdad        ;iterate op1
                        
618f : a999             tdad5   lda #$99        ;precharge op1 max
6191 : 8513                     sta ad1
6193 : a514                     lda ad2         ;decimal adjust operand 2
6195 : f030                     beq tdad7       ;end of iteration
6197 : 290f                     and #$f         ;lower nibble mask
6199 : d018                     bne tdad6       ;skip decimal adjust
619b : c614                     dec ad2         ;decimal adjust (?0-6)
619d : c614                     dec ad2
619f : c614                     dec ad2
61a1 : c614                     dec ad2
61a3 : c614                     dec ad2
61a5 : c614                     dec ad2
61a7 : e618                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
61a9 : e618                     inc sb2
61ab : e618                     inc sb2
61ad : e618                     inc sb2
61af : e618                     inc sb2
61b1 : e618                     inc sb2
61b3 : c614             tdad6   dec ad2         ;operand 2 -1
61b5 : e618                     inc sb2         ;complemented operand for subtract
61b7 : a518                     lda sb2
61b9 : 8d0402                   sta sba2        ;copy as non zp operand
61bc : a514                     lda ad2
61be : 8d0302                   sta ada2        ;copy as non zp operand
61c1 : 8515                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
61c3 : e616                     inc adrh        ;result carry
61c5 : d085                     bne tdad        ;iterate op2
61c7 :                  tdad7
                                next_test
61c7 : ad0002          >            lda test_case   ;previous test
61ca : c92a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
61cc : f003            >        beq skip3525
                       >        trap            ;failed not equal (non zero)
61ce : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
61d1 :                 >skip3525
                       >
002b =                 >test_num = test_num + 1
61d1 : a92b            >            lda #test_num   ;*** next tests' number
61d3 : 8d0002          >            sta test_case
                       >            ;sta $ef03
                       >            check_ram       ;uncomment to find altered RAM after each test
61d6 : d8              >            cld
61d7 : a900            >            lda #0
61d9 : 8512            >            sta zpt         ;set low byte of indirect pointer
61db : 8515            >            sta zpt+3       ;checksum high byte
61dd : 8dbb11          >            sta range_adr   ;reset self modifying code
61e0 : 8dfb57          >            sta tandi1
61e3 : 8d2258          >            sta tandi2
61e6 : 8dbc5a          >            sta teori1
61e9 : 8de35a          >            sta teori2
61ec : 8d7c5d          >            sta torai1
61ef : 8da35d          >            sta torai2
61f2 : 8dba63          >            sta chkdadi  
61f5 : 8dd763          >            sta chkdsbi
61f8 : 8d6365          >            sta chkadi
61fb : 8d8065          >            sta chksbi
61fe : 18              >            clc
61ff : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
6201 : 7510            >ccs33527      adc zero_page,x
6203 : 9003            >            bcc ccs23527
6205 : e615            >            inc zpt+3       ;carry to high byte
6207 : 18              >            clc
6208 : e8              >ccs23527      inx
6209 : d0f6            >            bne ccs33527
620b : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
620d : 8613            >            stx zpt+1
620f : a008            >            ldy #lo(data_bss) ;data after write test area
6211 : 7112            >ccs53527      adc (zpt),y
6213 : 9003            >            bcc ccs43527
6215 : e615            >            inc zpt+3       ;carry to high byte
6217 : 18              >            clc
6218 : c8              >ccs43527      iny
6219 : d0f6            >            bne ccs53527
621b : e8              >            inx             ;advance RAM high address
621c : 8613            >            stx zpt+1
621e : e0e0            >            cpx #ram_top
6220 : d0ef            >            bne ccs53527
6222 : 8514            >            sta zpt+2       ;checksum low is
6224 : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
6227 : f003            >        beq skip3528
                       >        trap            ;failed not equal (non zero)
6229 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
622c :                 >skip3528
                       >
622c : a515            >            lda zpt+3       ;checksum high is
622e : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
6231 : f003            >        beq skip3530
                       >        trap            ;failed not equal (non zero)
6233 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6236 :                 >skip3530
                       >
                       >
                        
                        
6236 : 8d04ef            sta $ef04
6239 : 646563696d616c..  db "decimal/binary switch test", 10, 0
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
6255 : 18                       clc
6256 : d8                       cld
6257 : 08                       php
6258 : a955                     lda #$55
625a : 6955                     adc #$55
625c : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after cld
625e : f003            >        beq skip3532
                       >        trap            ;failed not equal (non zero)
6260 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6263 :                 >skip3532
                        
6263 : 18                       clc
6264 : f8                       sed
6265 : 08                       php
6266 : a955                     lda #$55
6268 : 6955                     adc #$55
626a : c910                     cmp #$10
                                trap_ne         ;expected decimal result after sed
626c : f003            >        beq skip3534
                       >        trap            ;failed not equal (non zero)
626e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6271 :                 >skip3534
                        
6271 : d8                       cld
6272 : 28                       plp
6273 : a955                     lda #$55
6275 : 6955                     adc #$55
6277 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
6279 : f003            >        beq skip3536
                       >        trap            ;failed not equal (non zero)
627b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
627e :                 >skip3536
                        
627e : 28                       plp
627f : a955                     lda #$55
6281 : 6955                     adc #$55
6283 : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
6285 : f003            >        beq skip3538
                       >        trap            ;failed not equal (non zero)
6287 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
628a :                 >skip3538
                        
628a : 18                       clc
628b : a962                     lda #hi bin_rti_ret ;emulated interrupt for rti
628d : 48                       pha
628e : a9a8                     lda #lo bin_rti_ret
6290 : 48                       pha
6291 : 08                       php
6292 : f8                       sed
6293 : a962                     lda #hi dec_rti_ret ;emulated interrupt for rti
6295 : 48                       pha
6296 : a99c                     lda #lo dec_rti_ret
6298 : 48                       pha
6299 : 08                       php
629a : d8                       cld
629b : 40                       rti
629c :                  dec_rti_ret
629c : a955                     lda #$55
629e : 6955                     adc #$55
62a0 : c910                     cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
62a2 : f003            >        beq skip3540
                       >        trap            ;failed not equal (non zero)
62a4 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
62a7 :                 >skip3540
                        
62a7 : 40                       rti
62a8 :                  bin_rti_ret        
62a8 : a955                     lda #$55
62aa : 6955                     adc #$55
62ac : c9aa                     cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
62ae : f003            >        beq skip3542
                       >        trap            ;failed not equal (non zero)
62b0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
62b3 :                 >skip3542
                        
                        
62b3 : ad0002                   lda test_case
62b6 : c92b                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
62b8 : f003            >        beq skip3544
                       >        trap            ;failed not equal (non zero)
62ba : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
62bd :                 >skip3544
                        
62bd : a9f0                     lda #$f0        ;mark opcode testing complete
62bf : 8d0002                   sta test_case
                                
62c2 : 8d04ef            sta $ef04
62c5 : 66696e616c2052..  db "final RAM integrity test", 10, 0
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
62df : d8              >            cld
62e0 : a900            >            lda #0
62e2 : 8512            >            sta zpt         ;set low byte of indirect pointer
62e4 : 8515            >            sta zpt+3       ;checksum high byte
62e6 : 8dbb11          >            sta range_adr   ;reset self modifying code
62e9 : 8dfb57          >            sta tandi1
62ec : 8d2258          >            sta tandi2
62ef : 8dbc5a          >            sta teori1
62f2 : 8de35a          >            sta teori2
62f5 : 8d7c5d          >            sta torai1
62f8 : 8da35d          >            sta torai2
62fb : 8dba63          >            sta chkdadi  
62fe : 8dd763          >            sta chkdsbi
6301 : 8d6365          >            sta chkadi
6304 : 8d8065          >            sta chksbi
6307 : 18              >            clc
6308 : a209            >            ldx #zp_bss-zero_page ;zeropage - write test area
630a : 7510            >ccs33546      adc zero_page,x
630c : 9003            >            bcc ccs23546
630e : e615            >            inc zpt+3       ;carry to high byte
6310 : 18              >            clc
6311 : e8              >ccs23546      inx
6312 : d0f6            >            bne ccs33546
6314 : a202            >            ldx #hi(data_segment) ;set high byte of indirect pointer
6316 : 8613            >            stx zpt+1
6318 : a008            >            ldy #lo(data_bss) ;data after write test area
631a : 7112            >ccs53546      adc (zpt),y
631c : 9003            >            bcc ccs43546
631e : e615            >            inc zpt+3       ;carry to high byte
6320 : 18              >            clc
6321 : c8              >ccs43546      iny
6322 : d0f6            >            bne ccs53546
6324 : e8              >            inx             ;advance RAM high address
6325 : 8613            >            stx zpt+1
6327 : e0e0            >            cpx #ram_top
6329 : d0ef            >            bne ccs53546
632b : 8514            >            sta zpt+2       ;checksum low is
632d : cd0102          >            cmp ram_chksm   ;checksum low expected
                       >            trap_ne         ;checksum mismatch
6330 : f003            >        beq skip3547
                       >        trap            ;failed not equal (non zero)
6332 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6335 :                 >skip3547
                       >
6335 : a515            >            lda zpt+3       ;checksum high is
6337 : cd0202          >            cmp ram_chksm+1 ;checksum high expected
                       >            trap_ne         ;checksum mismatch
633a : f003            >        beq skip3549
                       >        trap            ;failed not equal (non zero)
633c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
633f :                 >skip3549
                       >
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to 
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************       
                        ; -------------       
                                success         ;if you get here everything went well
633f : 8d04ef          > sta $ef04
6342 : 73756363657373..> db "success", 10, 0
634b : db              >        db $db
                       >        ;jsr report_success
                        
                        ; -------------       
                        ; S U C C E S S ************************************************ 
634c : 4c0410                   jmp start       ;run again      
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
634f :                  chkdad
                        ; decimal ADC / SBC zp
634f : 08                       php             ;save carry for subtract
6350 : a513                     lda ad1
6352 : 6514                     adc ad2         ;perform add
6354 : 08                       php          
6355 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6357 : f003            >        beq skip3552
                       >        trap            ;failed not equal (non zero)
6359 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
635c :                 >skip3552
                        
635c : 68                       pla             ;check flags
635d : 2901                     and #1          ;mask carry
635f : c516                     cmp adrh
                                trap_ne         ;bad carry
6361 : f003            >        beq skip3554
                       >        trap            ;failed not equal (non zero)
6363 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6366 :                 >skip3554
                        
6366 : 28                       plp
6367 : 08                       php             ;save carry for next add
6368 : a513                     lda ad1
636a : e518                     sbc sb2         ;perform subtract
636c : 08                       php          
636d : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
636f : f003            >        beq skip3556
                       >        trap            ;failed not equal (non zero)
6371 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6374 :                 >skip3556
                        
6374 : 68                       pla             ;check flags
6375 : 2901                     and #1          ;mask carry
6377 : c516                     cmp adrh
                                trap_ne         ;bad flags
6379 : f003            >        beq skip3558
                       >        trap            ;failed not equal (non zero)
637b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
637e :                 >skip3558
                        
637e : 28                       plp
                        ; decimal ADC / SBC abs
637f : 08                       php             ;save carry for subtract
6380 : a513                     lda ad1
6382 : 6d0302                   adc ada2        ;perform add
6385 : 08                       php          
6386 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6388 : f003            >        beq skip3560
                       >        trap            ;failed not equal (non zero)
638a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
638d :                 >skip3560
                        
638d : 68                       pla             ;check flags
638e : 2901                     and #1          ;mask carry
6390 : c516                     cmp adrh
                                trap_ne         ;bad carry
6392 : f003            >        beq skip3562
                       >        trap            ;failed not equal (non zero)
6394 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6397 :                 >skip3562
                        
6397 : 28                       plp
6398 : 08                       php             ;save carry for next add
6399 : a513                     lda ad1
639b : ed0402                   sbc sba2        ;perform subtract
639e : 08                       php          
639f : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
63a1 : f003            >        beq skip3564
                       >        trap            ;failed not equal (non zero)
63a3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63a6 :                 >skip3564
                        
63a6 : 68                       pla             ;check flags
63a7 : 2901                     and #1          ;mask carry
63a9 : c516                     cmp adrh
                                trap_ne         ;bad carry
63ab : f003            >        beq skip3566
                       >        trap            ;failed not equal (non zero)
63ad : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63b0 :                 >skip3566
                        
63b0 : 28                       plp
                        ; decimal ADC / SBC #
63b1 : 08                       php             ;save carry for subtract
63b2 : a514                     lda ad2
63b4 : 8dba63                   sta chkdadi     ;self modify immediate
63b7 : a513                     lda ad1
63ba =                  chkdadi = * + 1         ;operand of the immediate ADC
63b9 : 6900                     adc #0          ;perform add
63bb : 08                       php          
63bc : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
63be : f003            >        beq skip3568
                       >        trap            ;failed not equal (non zero)
63c0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63c3 :                 >skip3568
                        
63c3 : 68                       pla             ;check flags
63c4 : 2901                     and #1          ;mask carry
63c6 : c516                     cmp adrh
                                trap_ne         ;bad carry
63c8 : f003            >        beq skip3570
                       >        trap            ;failed not equal (non zero)
63ca : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63cd :                 >skip3570
                        
63cd : 28                       plp
63ce : 08                       php             ;save carry for next add
63cf : a518                     lda sb2
63d1 : 8dd763                   sta chkdsbi     ;self modify immediate
63d4 : a513                     lda ad1
63d7 =                  chkdsbi = * + 1         ;operand of the immediate SBC
63d6 : e900                     sbc #0          ;perform subtract
63d8 : 08                       php          
63d9 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
63db : f003            >        beq skip3572
                       >        trap            ;failed not equal (non zero)
63dd : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63e0 :                 >skip3572
                        
63e0 : 68                       pla             ;check flags
63e1 : 2901                     and #1          ;mask carry
63e3 : c516                     cmp adrh
                                trap_ne         ;bad carry
63e5 : f003            >        beq skip3574
                       >        trap            ;failed not equal (non zero)
63e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63ea :                 >skip3574
                        
63ea : 28                       plp
                        ; decimal ADC / SBC zp,x
63eb : 08                       php             ;save carry for subtract
63ec : a513                     lda ad1
63ee : 7500                     adc 0,x         ;perform add
63f0 : 08                       php          
63f1 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
63f3 : f003            >        beq skip3576
                       >        trap            ;failed not equal (non zero)
63f5 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
63f8 :                 >skip3576
                        
63f8 : 68                       pla             ;check flags
63f9 : 2901                     and #1          ;mask carry
63fb : c516                     cmp adrh
                                trap_ne         ;bad carry
63fd : f003            >        beq skip3578
                       >        trap            ;failed not equal (non zero)
63ff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6402 :                 >skip3578
                        
6402 : 28                       plp
6403 : 08                       php             ;save carry for next add
6404 : a513                     lda ad1
6406 : f504                     sbc sb2-ad2,x   ;perform subtract
6408 : 08                       php          
6409 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
640b : f003            >        beq skip3580
                       >        trap            ;failed not equal (non zero)
640d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6410 :                 >skip3580
                        
6410 : 68                       pla             ;check flags
6411 : 2901                     and #1          ;mask carry
6413 : c516                     cmp adrh
                                trap_ne         ;bad carry
6415 : f003            >        beq skip3582
                       >        trap            ;failed not equal (non zero)
6417 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
641a :                 >skip3582
                        
641a : 28                       plp
                        ; decimal ADC / SBC abs,x
641b : 08                       php             ;save carry for subtract
641c : a513                     lda ad1
641e : 7def01                   adc ada2-ad2,x  ;perform add
6421 : 08                       php          
6422 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6424 : f003            >        beq skip3584
                       >        trap            ;failed not equal (non zero)
6426 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6429 :                 >skip3584
                        
6429 : 68                       pla             ;check flags
642a : 2901                     and #1          ;mask carry
642c : c516                     cmp adrh
                                trap_ne         ;bad carry
642e : f003            >        beq skip3586
                       >        trap            ;failed not equal (non zero)
6430 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6433 :                 >skip3586
                        
6433 : 28                       plp
6434 : 08                       php             ;save carry for next add
6435 : a513                     lda ad1
6437 : fdf001                   sbc sba2-ad2,x  ;perform subtract
643a : 08                       php          
643b : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
643d : f003            >        beq skip3588
                       >        trap            ;failed not equal (non zero)
643f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6442 :                 >skip3588
                        
6442 : 68                       pla             ;check flags
6443 : 2901                     and #1          ;mask carry
6445 : c516                     cmp adrh
                                trap_ne         ;bad carry
6447 : f003            >        beq skip3590
                       >        trap            ;failed not equal (non zero)
6449 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
644c :                 >skip3590
                        
644c : 28                       plp
                        ; decimal ADC / SBC abs,y
644d : 08                       php             ;save carry for subtract
644e : a513                     lda ad1
6450 : 790401                   adc ada2-$ff,y  ;perform add
6453 : 08                       php          
6454 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6456 : f003            >        beq skip3592
                       >        trap            ;failed not equal (non zero)
6458 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
645b :                 >skip3592
                        
645b : 68                       pla             ;check flags
645c : 2901                     and #1          ;mask carry
645e : c516                     cmp adrh
                                trap_ne         ;bad carry
6460 : f003            >        beq skip3594
                       >        trap            ;failed not equal (non zero)
6462 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6465 :                 >skip3594
                        
6465 : 28                       plp
6466 : 08                       php             ;save carry for next add
6467 : a513                     lda ad1
6469 : f90501                   sbc sba2-$ff,y  ;perform subtract
646c : 08                       php          
646d : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
646f : f003            >        beq skip3596
                       >        trap            ;failed not equal (non zero)
6471 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6474 :                 >skip3596
                        
6474 : 68                       pla             ;check flags
6475 : 2901                     and #1          ;mask carry
6477 : c516                     cmp adrh
                                trap_ne         ;bad carry
6479 : f003            >        beq skip3598
                       >        trap            ;failed not equal (non zero)
647b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
647e :                 >skip3598
                        
647e : 28                       plp
                        ; decimal ADC / SBC (zp,x)
647f : 08                       php             ;save carry for subtract
6480 : a513                     lda ad1
6482 : 6144                     adc (lo adi2-ad2,x) ;perform add
6484 : 08                       php          
6485 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6487 : f003            >        beq skip3600
                       >        trap            ;failed not equal (non zero)
6489 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
648c :                 >skip3600
                        
648c : 68                       pla             ;check flags
648d : 2901                     and #1          ;mask carry
648f : c516                     cmp adrh
                                trap_ne         ;bad carry
6491 : f003            >        beq skip3602
                       >        trap            ;failed not equal (non zero)
6493 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6496 :                 >skip3602
                        
6496 : 28                       plp
6497 : 08                       php             ;save carry for next add
6498 : a513                     lda ad1
649a : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
649c : 08                       php          
649d : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
649f : f003            >        beq skip3604
                       >        trap            ;failed not equal (non zero)
64a1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64a4 :                 >skip3604
                        
64a4 : 68                       pla             ;check flags
64a5 : 2901                     and #1          ;mask carry
64a7 : c516                     cmp adrh
                                trap_ne         ;bad carry
64a9 : f003            >        beq skip3606
                       >        trap            ;failed not equal (non zero)
64ab : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64ae :                 >skip3606
                        
64ae : 28                       plp
                        ; decimal ADC / SBC (abs),y
64af : 08                       php             ;save carry for subtract
64b0 : a513                     lda ad1
64b2 : 715c                     adc (adiy2),y   ;perform add
64b4 : 08                       php          
64b5 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
64b7 : f003            >        beq skip3608
                       >        trap            ;failed not equal (non zero)
64b9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64bc :                 >skip3608
                        
64bc : 68                       pla             ;check flags
64bd : 2901                     and #1          ;mask carry
64bf : c516                     cmp adrh
                                trap_ne         ;bad carry
64c1 : f003            >        beq skip3610
                       >        trap            ;failed not equal (non zero)
64c3 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64c6 :                 >skip3610
                        
64c6 : 28                       plp
64c7 : 08                       php             ;save carry for next add
64c8 : a513                     lda ad1
64ca : f15e                     sbc (sbiy2),y   ;perform subtract
64cc : 08                       php          
64cd : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
64cf : f003            >        beq skip3612
                       >        trap            ;failed not equal (non zero)
64d1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64d4 :                 >skip3612
                        
64d4 : 68                       pla             ;check flags
64d5 : 2901                     and #1          ;mask carry
64d7 : c516                     cmp adrh
                                trap_ne         ;bad carry
64d9 : f003            >        beq skip3614
                       >        trap            ;failed not equal (non zero)
64db : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
64de :                 >skip3614
                        
64de : 28                       plp
64df : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
64e0 : a517             chkadd  lda adrf        ;add V-flag if overflow
64e2 : 2983                     and #$83        ;keep N-----ZC / clear V
64e4 : 48                       pha
64e5 : a513                     lda ad1         ;test sign unequal between operands
64e7 : 4514                     eor ad2
64e9 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
64eb : a513                     lda ad1         ;test sign equal between operands and result
64ed : 4515                     eor adrl
64ef : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
64f1 : 68                       pla
64f2 : 0940                     ora #$40        ;set V
64f4 : 48                       pha
64f5 : 68               ckad1   pla
64f6 : 8517                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
64f8 : 08                       php             ;save carry for subtract
64f9 : a513                     lda ad1
64fb : 6514                     adc ad2         ;perform add
64fd : 08                       php          
64fe : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6500 : f003            >        beq skip3616
                       >        trap            ;failed not equal (non zero)
6502 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6505 :                 >skip3616
                        
6505 : 68                       pla             ;check flags
6506 : 29c3                     and #$c3        ;mask NV----ZC
6508 : c517                     cmp adrf
                                trap_ne         ;bad flags
650a : f003            >        beq skip3618
                       >        trap            ;failed not equal (non zero)
650c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
650f :                 >skip3618
                        
650f : 28                       plp
6510 : 08                       php             ;save carry for next add
6511 : a513                     lda ad1
6513 : e518                     sbc sb2         ;perform subtract
6515 : 08                       php          
6516 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6518 : f003            >        beq skip3620
                       >        trap            ;failed not equal (non zero)
651a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
651d :                 >skip3620
                        
651d : 68                       pla             ;check flags
651e : 29c3                     and #$c3        ;mask NV----ZC
6520 : c517                     cmp adrf
                                trap_ne         ;bad flags
6522 : f003            >        beq skip3622
                       >        trap            ;failed not equal (non zero)
6524 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6527 :                 >skip3622
                        
6527 : 28                       plp
                        ; binary ADC / SBC abs
6528 : 08                       php             ;save carry for subtract
6529 : a513                     lda ad1
652b : 6d0302                   adc ada2        ;perform add
652e : 08                       php          
652f : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6531 : f003            >        beq skip3624
                       >        trap            ;failed not equal (non zero)
6533 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6536 :                 >skip3624
                        
6536 : 68                       pla             ;check flags
6537 : 29c3                     and #$c3        ;mask NV----ZC
6539 : c517                     cmp adrf
                                trap_ne         ;bad flags
653b : f003            >        beq skip3626
                       >        trap            ;failed not equal (non zero)
653d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6540 :                 >skip3626
                        
6540 : 28                       plp
6541 : 08                       php             ;save carry for next add
6542 : a513                     lda ad1
6544 : ed0402                   sbc sba2        ;perform subtract
6547 : 08                       php          
6548 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
654a : f003            >        beq skip3628
                       >        trap            ;failed not equal (non zero)
654c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
654f :                 >skip3628
                        
654f : 68                       pla             ;check flags
6550 : 29c3                     and #$c3        ;mask NV----ZC
6552 : c517                     cmp adrf
                                trap_ne         ;bad flags
6554 : f003            >        beq skip3630
                       >        trap            ;failed not equal (non zero)
6556 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6559 :                 >skip3630
                        
6559 : 28                       plp
                        ; binary ADC / SBC #
655a : 08                       php             ;save carry for subtract
655b : a514                     lda ad2
655d : 8d6365                   sta chkadi      ;self modify immediate
6560 : a513                     lda ad1
6563 =                  chkadi  = * + 1         ;operand of the immediate ADC
6562 : 6900                     adc #0          ;perform add
6564 : 08                       php          
6565 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6567 : f003            >        beq skip3632
                       >        trap            ;failed not equal (non zero)
6569 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
656c :                 >skip3632
                        
656c : 68                       pla             ;check flags
656d : 29c3                     and #$c3        ;mask NV----ZC
656f : c517                     cmp adrf
                                trap_ne         ;bad flags
6571 : f003            >        beq skip3634
                       >        trap            ;failed not equal (non zero)
6573 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6576 :                 >skip3634
                        
6576 : 28                       plp
6577 : 08                       php             ;save carry for next add
6578 : a518                     lda sb2
657a : 8d8065                   sta chksbi      ;self modify immediate
657d : a513                     lda ad1
6580 =                  chksbi  = * + 1         ;operand of the immediate SBC
657f : e900                     sbc #0          ;perform subtract
6581 : 08                       php          
6582 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6584 : f003            >        beq skip3636
                       >        trap            ;failed not equal (non zero)
6586 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6589 :                 >skip3636
                        
6589 : 68                       pla             ;check flags
658a : 29c3                     and #$c3        ;mask NV----ZC
658c : c517                     cmp adrf
                                trap_ne         ;bad flags
658e : f003            >        beq skip3638
                       >        trap            ;failed not equal (non zero)
6590 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6593 :                 >skip3638
                        
6593 : 28                       plp
                        ; binary ADC / SBC zp,x
6594 : 08                       php             ;save carry for subtract
6595 : a513                     lda ad1
6597 : 7500                     adc 0,x         ;perform add
6599 : 08                       php          
659a : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
659c : f003            >        beq skip3640
                       >        trap            ;failed not equal (non zero)
659e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65a1 :                 >skip3640
                        
65a1 : 68                       pla             ;check flags
65a2 : 29c3                     and #$c3        ;mask NV----ZC
65a4 : c517                     cmp adrf
                                trap_ne         ;bad flags
65a6 : f003            >        beq skip3642
                       >        trap            ;failed not equal (non zero)
65a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65ab :                 >skip3642
                        
65ab : 28                       plp
65ac : 08                       php             ;save carry for next add
65ad : a513                     lda ad1
65af : f504                     sbc sb2-ad2,x   ;perform subtract
65b1 : 08                       php          
65b2 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
65b4 : f003            >        beq skip3644
                       >        trap            ;failed not equal (non zero)
65b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65b9 :                 >skip3644
                        
65b9 : 68                       pla             ;check flags
65ba : 29c3                     and #$c3        ;mask NV----ZC
65bc : c517                     cmp adrf
                                trap_ne         ;bad flags
65be : f003            >        beq skip3646
                       >        trap            ;failed not equal (non zero)
65c0 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65c3 :                 >skip3646
                        
65c3 : 28                       plp
                        ; binary ADC / SBC abs,x
65c4 : 08                       php             ;save carry for subtract
65c5 : a513                     lda ad1
65c7 : 7def01                   adc ada2-ad2,x  ;perform add
65ca : 08                       php          
65cb : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
65cd : f003            >        beq skip3648
                       >        trap            ;failed not equal (non zero)
65cf : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65d2 :                 >skip3648
                        
65d2 : 68                       pla             ;check flags
65d3 : 29c3                     and #$c3        ;mask NV----ZC
65d5 : c517                     cmp adrf
                                trap_ne         ;bad flags
65d7 : f003            >        beq skip3650
                       >        trap            ;failed not equal (non zero)
65d9 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65dc :                 >skip3650
                        
65dc : 28                       plp
65dd : 08                       php             ;save carry for next add
65de : a513                     lda ad1
65e0 : fdf001                   sbc sba2-ad2,x  ;perform subtract
65e3 : 08                       php          
65e4 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
65e6 : f003            >        beq skip3652
                       >        trap            ;failed not equal (non zero)
65e8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65eb :                 >skip3652
                        
65eb : 68                       pla             ;check flags
65ec : 29c3                     and #$c3        ;mask NV----ZC
65ee : c517                     cmp adrf
                                trap_ne         ;bad flags
65f0 : f003            >        beq skip3654
                       >        trap            ;failed not equal (non zero)
65f2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
65f5 :                 >skip3654
                        
65f5 : 28                       plp
                        ; binary ADC / SBC abs,y
65f6 : 08                       php             ;save carry for subtract
65f7 : a513                     lda ad1
65f9 : 790401                   adc ada2-$ff,y  ;perform add
65fc : 08                       php          
65fd : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
65ff : f003            >        beq skip3656
                       >        trap            ;failed not equal (non zero)
6601 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6604 :                 >skip3656
                        
6604 : 68                       pla             ;check flags
6605 : 29c3                     and #$c3        ;mask NV----ZC
6607 : c517                     cmp adrf
                                trap_ne         ;bad flags
6609 : f003            >        beq skip3658
                       >        trap            ;failed not equal (non zero)
660b : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
660e :                 >skip3658
                        
660e : 28                       plp
660f : 08                       php             ;save carry for next add
6610 : a513                     lda ad1
6612 : f90501                   sbc sba2-$ff,y  ;perform subtract
6615 : 08                       php          
6616 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6618 : f003            >        beq skip3660
                       >        trap            ;failed not equal (non zero)
661a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
661d :                 >skip3660
                        
661d : 68                       pla             ;check flags
661e : 29c3                     and #$c3        ;mask NV----ZC
6620 : c517                     cmp adrf
                                trap_ne         ;bad flags
6622 : f003            >        beq skip3662
                       >        trap            ;failed not equal (non zero)
6624 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6627 :                 >skip3662
                        
6627 : 28                       plp
                        ; binary ADC / SBC (zp,x)
6628 : 08                       php             ;save carry for subtract
6629 : a513                     lda ad1
662b : 6144                     adc (lo adi2-ad2,x) ;perform add
662d : 08                       php          
662e : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6630 : f003            >        beq skip3664
                       >        trap            ;failed not equal (non zero)
6632 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6635 :                 >skip3664
                        
6635 : 68                       pla             ;check flags
6636 : 29c3                     and #$c3        ;mask NV----ZC
6638 : c517                     cmp adrf
                                trap_ne         ;bad flags
663a : f003            >        beq skip3666
                       >        trap            ;failed not equal (non zero)
663c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
663f :                 >skip3666
                        
663f : 28                       plp
6640 : 08                       php             ;save carry for next add
6641 : a513                     lda ad1
6643 : e146                     sbc (lo sbi2-ad2,x) ;perform subtract
6645 : 08                       php          
6646 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6648 : f003            >        beq skip3668
                       >        trap            ;failed not equal (non zero)
664a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
664d :                 >skip3668
                        
664d : 68                       pla             ;check flags
664e : 29c3                     and #$c3        ;mask NV----ZC
6650 : c517                     cmp adrf
                                trap_ne         ;bad flags
6652 : f003            >        beq skip3670
                       >        trap            ;failed not equal (non zero)
6654 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6657 :                 >skip3670
                        
6657 : 28                       plp
                        ; binary ADC / SBC (abs),y
6658 : 08                       php             ;save carry for subtract
6659 : a513                     lda ad1
665b : 715c                     adc (adiy2),y   ;perform add
665d : 08                       php          
665e : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6660 : f003            >        beq skip3672
                       >        trap            ;failed not equal (non zero)
6662 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6665 :                 >skip3672
                        
6665 : 68                       pla             ;check flags
6666 : 29c3                     and #$c3        ;mask NV----ZC
6668 : c517                     cmp adrf
                                trap_ne         ;bad flags
666a : f003            >        beq skip3674
                       >        trap            ;failed not equal (non zero)
666c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
666f :                 >skip3674
                        
666f : 28                       plp
6670 : 08                       php             ;save carry for next add
6671 : a513                     lda ad1
6673 : f15e                     sbc (sbiy2),y   ;perform subtract
6675 : 08                       php          
6676 : c515                     cmp adrl        ;check result
                                trap_ne         ;bad result
6678 : f003            >        beq skip3676
                       >        trap            ;failed not equal (non zero)
667a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
667d :                 >skip3676
                        
667d : 68                       pla             ;check flags
667e : 29c3                     and #$c3        ;mask NV----ZC
6680 : c517                     cmp adrf
                                trap_ne         ;bad flags
6682 : f003            >        beq skip3678
                       >        trap            ;failed not equal (non zero)
6684 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6687 :                 >skip3678
                        
6687 : 28                       plp
6688 : 60                       rts
                        
                        ; target for the jump absolute test
6689 : 88                       dey
668a : 88                       dey
668b :                  test_far
668b : 08                       php             ;either SP or Y count will fail, if we do not hit
668c : 88                       dey
668d : 88                       dey
668e : 88                       dey
668f : 28                       plp
                                trap_cs         ;flags loaded?
6690 : 9003            >        bcc skip3680
                       >        trap            ;failed carry set
6692 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6695 :                 >skip3680
                        
                                trap_vs
6695 : 5003            >        bvc skip3682
                       >        trap            ;failed overflow set
6697 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
669a :                 >skip3682
                        
                                trap_mi
669a : 1003            >        bpl skip3684
                       >        trap            ;failed minus (bit 7 set)
669c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
669f :                 >skip3684
                        
                                trap_eq 
669f : d003            >        bne skip3686
                       >        trap           ;failed equal (zero)
66a1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66a4 :                 >skip3686
                        
66a4 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
66a6 : f003            >        beq skip3688
                       >        trap            ;failed not equal (non zero)
66a8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66ab :                 >skip3688
                        
66ab : e041                     cpx #'A'
                                trap_ne        
66ad : f003            >        beq skip3690
                       >        trap            ;failed not equal (non zero)
66af : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66b2 :                 >skip3690
                        
66b2 : c04f                     cpy #('R'-3)
                                trap_ne
66b4 : f003            >        beq skip3692
                       >        trap            ;failed not equal (non zero)
66b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66b9 :                 >skip3692
                        
66b9 : 48                       pha             ;save a,x
66ba : 8a                       txa
66bb : 48                       pha
66bc : ba                       tsx
66bd : e0fd                     cpx #$fd        ;check SP
                                trap_ne
66bf : f003            >        beq skip3694
                       >        trap            ;failed not equal (non zero)
66c1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66c4 :                 >skip3694
                        
66c4 : 68                       pla             ;restore x
66c5 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
66c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
66c8 : 48              >            pha         ;use stack to load status
66c9 : 28              >            plp
                        
66ca : 68                       pla             ;restore a
66cb : e8                       inx             ;return registers with modifications
66cc : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
66ce : 4cc21a                   jmp far_ret
                                
                        ; target for the jump indirect test
66d1 : 00                       align
66d2 : db66             ptr_tst_ind dw test_ind
66d4 : bc1b             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
66d6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
66d9 : 88                       dey
66da : 88                       dey
66db :                  test_ind
66db : 08                       php             ;either SP or Y count will fail, if we do not hit
66dc : 88                       dey
66dd : 88                       dey
66de : 88                       dey
66df : 28                       plp
                                trap_cs         ;flags loaded?
66e0 : 9003            >        bcc skip3699
                       >        trap            ;failed carry set
66e2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66e5 :                 >skip3699
                        
                                trap_vs
66e5 : 5003            >        bvc skip3701
                       >        trap            ;failed overflow set
66e7 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66ea :                 >skip3701
                        
                                trap_mi
66ea : 1003            >        bpl skip3703
                       >        trap            ;failed minus (bit 7 set)
66ec : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66ef :                 >skip3703
                        
                                trap_eq 
66ef : d003            >        bne skip3705
                       >        trap           ;failed equal (zero)
66f1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66f4 :                 >skip3705
                        
66f4 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
66f6 : f003            >        beq skip3707
                       >        trap            ;failed not equal (non zero)
66f8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
66fb :                 >skip3707
                        
66fb : e04e                     cpx #'N'
                                trap_ne        
66fd : f003            >        beq skip3709
                       >        trap            ;failed not equal (non zero)
66ff : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6702 :                 >skip3709
                        
6702 : c041                     cpy #('D'-3)
                                trap_ne
6704 : f003            >        beq skip3711
                       >        trap            ;failed not equal (non zero)
6706 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6709 :                 >skip3711
                        
6709 : 48                       pha             ;save a,x
670a : 8a                       txa
670b : 48                       pha
670c : ba                       tsx
670d : e0fd                     cpx #$fd        ;check SP
                                trap_ne
670f : f003            >        beq skip3713
                       >        trap            ;failed not equal (non zero)
6711 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6714 :                 >skip3713
                        
6714 : 68                       pla             ;restore x
6715 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
6716 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6718 : 48              >            pha         ;use stack to load status
6719 : 28              >            plp
                        
671a : 68                       pla             ;restore a
671b : e8                       inx             ;return registers with modifications
671c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
671e : 6cd466                   jmp (ptr_ind_ret)
                                trap            ;runover protection
6721 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
                        
                        ; target for the jump subroutine test
6724 : 88                       dey
6725 : 88                       dey
6726 :                  test_jsr
6726 : 08                       php             ;either SP or Y count will fail, if we do not hit
6727 : 88                       dey
6728 : 88                       dey
6729 : 88                       dey
672a : 28                       plp
                                trap_cs         ;flags loaded?
672b : 9003            >        bcc skip3718
                       >        trap            ;failed carry set
672d : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6730 :                 >skip3718
                        
                                trap_vs
6730 : 5003            >        bvc skip3720
                       >        trap            ;failed overflow set
6732 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6735 :                 >skip3720
                        
                                trap_mi
6735 : 1003            >        bpl skip3722
                       >        trap            ;failed minus (bit 7 set)
6737 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
673a :                 >skip3722
                        
                                trap_eq 
673a : d003            >        bne skip3724
                       >        trap           ;failed equal (zero)
673c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
673f :                 >skip3724
                        
673f : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
6741 : f003            >        beq skip3726
                       >        trap            ;failed not equal (non zero)
6743 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6746 :                 >skip3726
                        
6746 : e053                     cpx #'S'
                                trap_ne        
6748 : f003            >        beq skip3728
                       >        trap            ;failed not equal (non zero)
674a : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
674d :                 >skip3728
                        
674d : c04f                     cpy #('R'-3)
                                trap_ne
674f : f003            >        beq skip3730
                       >        trap            ;failed not equal (non zero)
6751 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6754 :                 >skip3730
                        
6754 : 48                       pha             ;save a,x
6755 : 8a                       txa
6756 : 48                       pha       
6757 : ba                       tsx             ;sp -4? (return addr,a,x)
6758 : e0fb                     cpx #$fb
                                trap_ne
675a : f003            >        beq skip3732
                       >        trap            ;failed not equal (non zero)
675c : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
675f :                 >skip3732
                        
675f : adff01                   lda $1ff        ;propper return on stack
6762 : c91c                     cmp #hi(jsr_ret)
                                trap_ne
6764 : f003            >        beq skip3734
                       >        trap            ;failed not equal (non zero)
6766 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6769 :                 >skip3734
                        
6769 : adfe01                   lda $1fe
676c : c99a                     cmp #lo(jsr_ret)
                                trap_ne
676e : f003            >        beq skip3736
                       >        trap            ;failed not equal (non zero)
6770 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6773 :                 >skip3736
                        
                                set_stat $ff
                       >            load_flag $ff
6773 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
6775 : 48              >            pha         ;use stack to load status
6776 : 28              >            plp
                        
6777 : 68                       pla             ;pull x,a
6778 : aa                       tax
6779 : 68                       pla
677a : e8                       inx             ;return registers with modifications
677b : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
677d : 60                       rts
                                trap            ;runover protection
677e : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
6781 :                  nmi_trap
                                trap            ;check stack for conditions at NMI
6781 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
6784 :                  res_trap
                                trap            ;unexpected RESET
6784 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
                                
6787 : 88                       dey
6788 : 88                       dey
6789 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
6789 : 08                       php             ;either SP or Y count will fail, if we do not hit
678a : 88                       dey
678b : 88                       dey
678c : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
678d : c942                     cmp #'B'        ;registers loaded?
                                trap_ne
678f : f003            >        beq skip3743
                       >        trap            ;failed not equal (non zero)
6791 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
6794 :                 >skip3743
                        
6794 : e052                     cpx #'R'
                                trap_ne        
6796 : f003            >        beq skip3745
                       >        trap            ;failed not equal (non zero)
6798 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
679b :                 >skip3745
                        
679b : c048                     cpy #('K'-3)
                                trap_ne
679d : f003            >        beq skip3747
                       >        trap            ;failed not equal (non zero)
679f : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67a2 :                 >skip3747
                        
67a2 : 8510                     sta irq_a       ;save registers during break test
67a4 : 8611                     stx irq_x
67a6 : ba                       tsx             ;test break on stack
67a7 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
67aa : c930            >            cmp #(0      |fao)&m8    ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
67ac : f003            >        beq skip3750
                       >        trap            ;failed not equal (non zero)
67ae : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67b1 :                 >skip3750
                        
67b1 : 68                       pla
67b2 : c934                     cmp #fai        ;should have added interrupt disable
                                trap_ne
67b4 : f003            >        beq skip3752
                       >        trap            ;failed not equal (non zero)
67b6 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67b9 :                 >skip3752
                        
67b9 : ba                       tsx
67ba : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
67bc : f003            >        beq skip3754
                       >        trap            ;failed not equal (non zero)
67be : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67c1 :                 >skip3754
                        
67c1 : adff01                   lda $1ff        ;propper return on stack
67c4 : c91d                     cmp #hi(brk_ret)
                                trap_ne
67c6 : f003            >        beq skip3756
                       >        trap            ;failed not equal (non zero)
67c8 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67cb :                 >skip3756
                        
67cb : adfe01                   lda $1fe
67ce : c96e                     cmp #lo(brk_ret)
                                trap_ne
67d0 : f003            >        beq skip3758
                       >        trap            ;failed not equal (non zero)
67d2 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                       >
67d5 :                 >skip3758
                        
                                set_stat $ff
                       >            load_flag $ff
67d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
67d7 : 48              >            pha         ;use stack to load status
67d8 : 28              >            plp
                        
67d9 : a611                     ldx irq_x
67db : e8                       inx             ;return registers with modifications
67dc : a510                     lda irq_a
67de : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
67e0 : 40                       rti
                                trap            ;runover protection
67e1 : 8d02ef          >        sta $ef02
                       >        ;jsr report_error
                        
                                
                            if report = 1
                                include "report.i65"
                        ;**** report 6502 funtional test errors to standard I/O ****
                        ;
                        ;this include file is part of the 6502 functional tests
                        ;it is used when you configure report = 1 in the tests
                        ;
                        ;to adopt the standard output vectors of your test environment
                        ;you must modify the rchar and rget subroutines in this include
                        ;
                        ;I/O hardware may have to be initialized in report_init
                        
                        ;print message macro - \1 = message location
                        rprt    macro
                                ldx #0
                                lda \1
                        loop\?
                                jsr rchar
                                inx
                                lda \1,x
                                bne loop\?
                                endm
                        
                        ;initialize I/O as required (example: configure & enable ACIA)
67e4 :                  report_init
                                ;nothing to initialize
                                rprt rmsg_start
67e4 : a200            >        ldx #0
67e6 : adba68          >        lda rmsg_start
67e9 :                 >loop3763
67e9 : 20b668          >        jsr rchar
67ec : e8              >        inx
67ed : bdba68          >        lda rmsg_start,x
67f0 : d0f7            >        bne loop3763
                        
67f2 : 60                       rts
                                
                        ;show stack (with saved registers), zeropage and absolute memory workspace
                        ;after an error was trapped in the test program
67f3 :                  report_error
                        ;save registers
67f3 : 08                       php
67f4 : 48                       pha
67f5 : 8a                       txa
67f6 : 48                       pha
67f7 : 98                       tya
67f8 : 48                       pha
67f9 : d8                       cld
                        ;show stack with index to registers at error
                                rprt rmsg_stack
67fa : a200            >        ldx #0
67fc : adce68          >        lda rmsg_stack
67ff :                 >loop3764
67ff : 20b668          >        jsr rchar
6802 : e8              >        inx
6803 : bdce68          >        lda rmsg_stack,x
6806 : d0f7            >        bne loop3764
                        
6808 : ba                       tsx
6809 : e8                       inx
680a : a901                     lda #1      ;address high
680c : 20a268                   jsr rhex
680f : 8a                       txa         ;address low
6810 : 20a268                   jsr rhex
6813 : 209e68           rstack  jsr rspace
6816 : bd0001                   lda $100,x  ;stack data
6819 : 20a268                   jsr rhex
681c : e8                       inx
681d : d0f4                     bne rstack
681f : 209568                   jsr rcrlf   ;new line
                        ;show zero page workspace
6822 : a900                     lda #0
6824 : 20a268                   jsr rhex
6827 : a912                     lda #zpt
6829 : aa                       tax
682a : 20a268                   jsr rhex
682d : 209e68           rzp     jsr rspace
6830 : b500                     lda 0,x
6832 : 20a268                   jsr rhex
6835 : e8                       inx
6836 : e019                     cpx #zp_bss
6838 : d0f3                     bne rzp
683a : 209568                   jsr rcrlf
                        ;show absolute workspace
683d : a902                     lda #hi(data_segment)
683f : 20a268                   jsr rhex
6842 : a900                     lda #lo(data_segment)
6844 : 20a268                   jsr rhex
6847 : a200                     ldx #0
6849 : 209e68           rabs    jsr rspace
684c : bd0002                   lda data_segment,x
684f : 20a268                   jsr rhex
6852 : e8                       inx
6853 : e008                     cpx #(data_bss-data_segment)
6855 : d0f2                     bne rabs
                        ;ask to continue
                                rprt rmsg_cont
6857 : a200            >        ldx #0
6859 : adea68          >        lda rmsg_cont
685c :                 >loop3765
685c : 20b668          >        jsr rchar
685f : e8              >        inx
6860 : bdea68          >        lda rmsg_cont,x
6863 : d0f7            >        bne loop3765
                        
6865 : 208968           rerr1   jsr rget
6868 : c943                     cmp #'C'
686a : d0f9                     bne rerr1        
                        ;restore registers
686c : 68                       pla
686d : a8                       tay
686e : 68                       pla
686f : aa                       tax
6870 : 68                       pla 
6871 : 28                       plp
6872 : 60                       rts   
                        
                        ;show test has ended, ask to repeat
6873 :                  report_success
                            if rep_int = 1
                                rprt rmsg_priority
                                lda data_segment    ;show interrupt sequence
                                jsr rhex
                                jsr rspace
                                lda data_segment+1
                                jsr rhex
                                jsr rspace
                                lda data_segment+2
                                jsr rhex
                            endif
                                rprt rmsg_success
6873 : a200            >        ldx #0
6875 : ad0269          >        lda rmsg_success
6878 :                 >loop3766
6878 : 20b668          >        jsr rchar
687b : e8              >        inx
687c : bd0269          >        lda rmsg_success,x
687f : d0f7            >        bne loop3766
                        
6881 : 208968           rsuc1   jsr rget
6884 : c952                     cmp #'R'
6886 : d0f9                     bne rsuc1        
6888 : 60                       rts
                        
                        ;input subroutine
                        ;get a character from standard input 
                        ;adjust according to the needs in your test environment
6889 :                  rget                ;get character in A
                        ;rget1
                        ;        lda $bff1   ;wait RDRF
                        ;        and #8
                        ;        beq rget1
                        ;not a real ACIA - so RDRF is not checked
6889 : adf0bf                   lda $bff0   ;read acia rx reg
                        ;the load can be replaced by a call to a kernal routine
                        ;        jsr $ffcf   ;example: CHRIN for a C64
688c : c961                     cmp #'a'    ;lower case
688e : 9002                     bcc rget1
6890 : 295f                     and #$5f    ;convert to upper case
6892 : a943             rget1   lda #'C'
6894 : 60               		rts
                        
                        ;output subroutines
6895 : a90a             rcrlf   lda #10
6897 : 20b668                   jsr rchar
689a : a90d                     lda #13
689c : d018                     bne rchar
                        
689e : a920             rspace  lda #' '
68a0 : d014                     bne rchar
                                
68a2 : 48               rhex    pha         ;report hex byte in A
68a3 : 4a                       lsr a       ;high nibble first
68a4 : 4a                       lsr a
68a5 : 4a                       lsr a
68a6 : 4a                       lsr a
68a7 : 20ad68                   jsr rnib
68aa : 68                       pla         ;now low nibble
68ab : 290f                     and #$f
                        
68ad : 18               rnib    clc         ;report nibble in A
68ae : 6930                     adc #'0'    ;make printable 0-9
68b0 : c93a                     cmp #'9'+1
68b2 : 9002                     bcc rchar
68b4 : 6906                     adc #6      ;make printable A-F
                        
                        ;send a character to standard output 
                        ;adjust according to the needs in your test environment
                        ;register X needs to be preserved!
68b6 :                  rchar               ;report character in A
                        ;        pha         ;wait TDRF
                        ;rchar1  lda $bff1
                        ;        and #$10
                        ;        beq rchar1
                        ;        pla
                        ;not a real ACIA - so TDRF is not checked
68b6 : 8d00ef                   sta $ef00   ;write acia tx reg
                        ;the store can be replaced by a call to a kernal routine
                        ;        jsr $ffd2   ;example: CHROUT for a C64
68b9 : 60                       rts
                        
68ba :                  rmsg_start
68ba : 0a0d5374617274..         db  10,13,"Started testing",10,13,0
68ce :                  rmsg_stack
68ce : 0a0d7265677320..         db  10,13,"regs Y  X  A  PS PCLPCH",10,13,0
68ea :                  rmsg_cont
68ea : 0a0d7072657373..         db  10,13,"press C to continue",10,13,0
6902 :                  rmsg_success
6902 : 0a0d416c6c2074..         db  10,13,"All tests completed, press R to repeat",10,13,0
                            if rep_int = 1
                        rmsg_priority
                                db  10,13,"interrupt sequence (NMI IRQ BRK) ",0
                            endif
                           
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
692d :                  zp_init
692d : c3824100         zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
6931 : 7f               zp7f_   db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
6932 : 001f7180         zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
6936 : 0fff7f80         zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
693a : ff0f8f8f         zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
693e : 0802             ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
6940 : 0902                     dw  abs1+1
6942 : 0a02                     dw  abs1+2
6944 : 0b02                     dw  abs1+3
6946 : 0c02                     dw  abs7f
6948 : 1001             inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
694a : 0302             indt_   dw  abst            ;indirect pointer to store area in absolute memory
694c : 0402                     dw  abst+1
694e : 0502                     dw  abst+2
6950 : 0602                     dw  abst+3
6952 : 0b01             inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
6954 : 3f02             indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
6956 : 4002                     dw  absAN+1
6958 : 4102                     dw  absAN+2
695a : 4202                     dw  absAN+3
695c : 4302             indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
695e : 4402                     dw  absEO+1
6960 : 4502                     dw  absEO+2
6962 : 4602                     dw  absEO+3
6964 : 3b02             indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
6966 : 3c02                     dw  absOR+1
6968 : 3d02                     dw  absOR+2
696a : 3e02                     dw  absOR+3
                        ;add/subtract indirect pointers
696c : 0302             adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
696e : 0402             sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
6970 : 0401             adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
6972 : 0501             sbiy2_  dw  sba2-$ff
6974 :                  zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
6974 :                  data_init
6974 : c3824100         abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
6978 : 7f               abs7f_  db  $7f             ;test pattern for compare
                        ;loads
6979 : 80800002         fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
697d :                  rASL_                       ;expected result ASL & ROL -carry  
697d : 86048200         rROL_   db  $86,$04,$82,0   ; "
6981 : 87058301         rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
6985 :                  rLSR_                       ;expected result LSR & ROR -carry
6985 : 61412000         rROR_   db  $61,$41,$20,0   ; "
6989 : e1c1a080         rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
698d :                  fASL_                       ;expected flags for shifts
698d : 81018002         fROL_   db  fnc,fc,fn,fz    ;no carry in
6991 : 81018000         fROLc_  db  fnc,fc,fn,0     ;carry in
6995 :                  fLSR_
6995 : 01000102         fROR_   db  fc,0,fc,fz      ;no carry in
6999 : 81808180         fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
699d : 7f80ff0001       rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
69a2 : 0080800200       fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        ;logical memory operand
69a7 : 001f7180         absOR_  db  0,$1f,$71,$80   ;test pattern for OR
69ab : 0fff7f80         absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
69af : ff0f8f8f         absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
69b3 : 00f11f00         absORa_ db  0,$f1,$1f,0     ;test pattern for OR
69b7 : f0ffffff         absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
69bb : fff0f00f         absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
69bf : 00ff7f80         absrlo_ db  0,$ff,$7f,$80
69c3 : 02800080         absflo_ db  fz,fn,0,fn
69c7 :                  data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
69c7 :                  vec_init
69c7 : 8167                     dw  nmi_trap
69c9 : 8467                     dw  res_trap
69cb : 8967                     dw  irq_trap
fffa =                  vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
No errors in pass 2.
Wrote binary from address $1000 through $69cc.
Total size 22989 bytes.
Program start address is at $1004 (4100).
